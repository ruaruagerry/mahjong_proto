// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mahjong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeChatLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeChatLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraDeskTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraDeskTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEnterDeskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEnterDeskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEnterDeskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEnterDeskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRoomCardChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRoomCardChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCommonCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCommonCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvtDeskUserEnter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvtDeskUserEnter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameExitDeskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameExitDeskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameExitDeskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameExitDeskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeskPlayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeskPlayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvtUserExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvtUserExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientNotifyStartGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientNotifyStartGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientNotifyStartGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientNotifyStartGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSendCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSendCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSendCardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSendCardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionChiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionChiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionChiRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionChiRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionPengReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionPengReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionPengRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionPengRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionGangReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionGangReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionGangRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionGangRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionHuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionHuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionHuRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionHuRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionPassReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionPassReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionPassRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionPassRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerReadyEvt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerReadyEvt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionGangNotFirstReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionGangNotFirstReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOptionGangNotFirstRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOptionGangNotFirstRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyDeleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyDeleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyDeleteEvt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyDeleteEvt_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfoEvt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfoEvt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameOverResultInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameOverResultInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvtGameOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvtGameOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerPlayRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerPlayRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyPlayRecordListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyPlayRecordListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyPlayRecordListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyPlayRecordListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoundPlayRecordsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoundPlayRecordsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoundPlayRecordsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoundPlayRecordsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeskChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeskChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeskChatEvt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeskChatEvt_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogOutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogOutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogOutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogOutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvtBroadCast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvtBroadCast_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserCreatePreBill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCreatePreBill_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateFormalBill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateFormalBill_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetInviteUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetInviteUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetInviteUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetInviteUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ws_msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ws_msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WsProtoTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WsProtoTest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mahjong_2eproto() {
  protobuf_AddDesc_mahjong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mahjong.proto");
  GOOGLE_CHECK(file != NULL);
  LoginReq_descriptor_ = file->message_type(0);
  static const int LoginReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, is_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, extra_username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, extra_password_),
  };
  LoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReq));
  WeChatLoginReq_descriptor_ = file->message_type(1);
  static const int WeChatLoginReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeChatLoginReq, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeChatLoginReq, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeChatLoginReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeChatLoginReq, expire_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeChatLoginReq, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeChatLoginReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeChatLoginReq, os_),
  };
  WeChatLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeChatLoginReq_descriptor_,
      WeChatLoginReq::default_instance_,
      WeChatLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeChatLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeChatLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeChatLoginReq));
  LoginRsp_descriptor_ = file->message_type(2);
  static const int LoginRsp_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, old_deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, wx_public_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, wx_agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, room_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, wy_yunxin_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, hall_billband_),
  };
  LoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRsp_descriptor_,
      LoginRsp::default_instance_,
      LoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRsp));
  ExtraDeskTypeInfo_descriptor_ = file->message_type(3);
  static const int ExtraDeskTypeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraDeskTypeInfo, hongzhong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraDeskTypeInfo, qidui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraDeskTypeInfo, zhuaniao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraDeskTypeInfo, piaofen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraDeskTypeInfo, shanghuo_),
  };
  ExtraDeskTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraDeskTypeInfo_descriptor_,
      ExtraDeskTypeInfo::default_instance_,
      ExtraDeskTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraDeskTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraDeskTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraDeskTypeInfo));
  GameEnterDeskReq_descriptor_ = file->message_type(4);
  static const int GameEnterDeskReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, dst_desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, new_desk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, reconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, card_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, desk_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, seat_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, win_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, extra_type_),
  };
  GameEnterDeskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEnterDeskReq_descriptor_,
      GameEnterDeskReq::default_instance_,
      GameEnterDeskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEnterDeskReq));
  GameEnterDeskRsp_descriptor_ = file->message_type(5);
  static const int GameEnterDeskRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskRsp, ret_),
  };
  GameEnterDeskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEnterDeskRsp_descriptor_,
      GameEnterDeskRsp::default_instance_,
      GameEnterDeskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEnterDeskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEnterDeskRsp));
  UserRoomCardChange_descriptor_ = file->message_type(6);
  static const int UserRoomCardChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoomCardChange, room_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoomCardChange, change_reason_),
  };
  UserRoomCardChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRoomCardChange_descriptor_,
      UserRoomCardChange::default_instance_,
      UserRoomCardChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoomCardChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRoomCardChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRoomCardChange));
  GameUserInfo_descriptor_ = file->message_type(7);
  static const int GameUserInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, is_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, piaofen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, shanghuo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, ip_),
  };
  GameUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameUserInfo_descriptor_,
      GameUserInfo::default_instance_,
      GameUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameUserInfo));
  UserCommonCards_descriptor_ = file->message_type(8);
  static const int UserCommonCards_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, card_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, out_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, discard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, op_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, chips_),
  };
  UserCommonCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCommonCards_descriptor_,
      UserCommonCards::default_instance_,
      UserCommonCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCommonCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCommonCards));
  MyOption_descriptor_ = file->message_type(9);
  static const int MyOption_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyOption, op_chi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyOption, op_peng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyOption, op_gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyOption, op_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyOption, need_wait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyOption, chi_cards_),
  };
  MyOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyOption_descriptor_,
      MyOption::default_instance_,
      MyOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyOption));
  EvtDeskUserEnter_descriptor_ = file->message_type(10);
  static const int EvtDeskUserEnter_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, op_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, max_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, next_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, dealer_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, in_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, share_cards_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, my_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, recv_card_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, desk_remain_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, seat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, apply_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, win_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, extra_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, pre_remain_time_),
  };
  EvtDeskUserEnter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvtDeskUserEnter_descriptor_,
      EvtDeskUserEnter::default_instance_,
      EvtDeskUserEnter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtDeskUserEnter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvtDeskUserEnter));
  GameExitDeskReq_descriptor_ = file->message_type(11);
  static const int GameExitDeskReq_offsets_[1] = {
  };
  GameExitDeskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameExitDeskReq_descriptor_,
      GameExitDeskReq::default_instance_,
      GameExitDeskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameExitDeskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameExitDeskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameExitDeskReq));
  GameExitDeskRsp_descriptor_ = file->message_type(12);
  static const int GameExitDeskRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameExitDeskRsp, ret_),
  };
  GameExitDeskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameExitDeskRsp_descriptor_,
      GameExitDeskRsp::default_instance_,
      GameExitDeskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameExitDeskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameExitDeskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameExitDeskRsp));
  DeskPlayInfo_descriptor_ = file->message_type(13);
  static const int DeskPlayInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, card_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, out_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, out_card_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, discards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, round_win_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, total_chi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, total_peng_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, total_gang_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, total_ganged_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, total_hu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, total_hued_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, round_chi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, round_peng_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, round_gang_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, round_ganged_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, role_),
  };
  DeskPlayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeskPlayInfo_descriptor_,
      DeskPlayInfo::default_instance_,
      DeskPlayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskPlayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeskPlayInfo));
  EvtUserExit_descriptor_ = file->message_type(14);
  static const int EvtUserExit_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, dealer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, op_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, op_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, next_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, play_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, player_op_past_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, dealer_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, reason_),
  };
  EvtUserExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvtUserExit_descriptor_,
      EvtUserExit::default_instance_,
      EvtUserExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtUserExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvtUserExit));
  ClientNotifyStartGameReq_descriptor_ = file->message_type(15);
  static const int ClientNotifyStartGameReq_offsets_[1] = {
  };
  ClientNotifyStartGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientNotifyStartGameReq_descriptor_,
      ClientNotifyStartGameReq::default_instance_,
      ClientNotifyStartGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotifyStartGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotifyStartGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientNotifyStartGameReq));
  ClientNotifyStartGameRsp_descriptor_ = file->message_type(16);
  static const int ClientNotifyStartGameRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotifyStartGameRsp, ret_),
  };
  ClientNotifyStartGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientNotifyStartGameRsp_descriptor_,
      ClientNotifyStartGameRsp::default_instance_,
      ClientNotifyStartGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotifyStartGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotifyStartGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientNotifyStartGameRsp));
  GameSendCardReq_descriptor_ = file->message_type(17);
  static const int GameSendCardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSendCardReq, card_),
  };
  GameSendCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSendCardReq_descriptor_,
      GameSendCardReq::default_instance_,
      GameSendCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSendCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSendCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSendCardReq));
  GameSendCardRsp_descriptor_ = file->message_type(18);
  static const int GameSendCardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSendCardRsp, ret_),
  };
  GameSendCardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSendCardRsp_descriptor_,
      GameSendCardRsp::default_instance_,
      GameSendCardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSendCardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSendCardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSendCardRsp));
  GameOptionChiReq_descriptor_ = file->message_type(19);
  static const int GameOptionChiReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionChiReq, index_),
  };
  GameOptionChiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionChiReq_descriptor_,
      GameOptionChiReq::default_instance_,
      GameOptionChiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionChiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionChiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionChiReq));
  GameOptionChiRsp_descriptor_ = file->message_type(20);
  static const int GameOptionChiRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionChiRsp, ret_),
  };
  GameOptionChiRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionChiRsp_descriptor_,
      GameOptionChiRsp::default_instance_,
      GameOptionChiRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionChiRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionChiRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionChiRsp));
  GameOptionPengReq_descriptor_ = file->message_type(21);
  static const int GameOptionPengReq_offsets_[1] = {
  };
  GameOptionPengReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionPengReq_descriptor_,
      GameOptionPengReq::default_instance_,
      GameOptionPengReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPengReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPengReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionPengReq));
  GameOptionPengRsp_descriptor_ = file->message_type(22);
  static const int GameOptionPengRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPengRsp, ret_),
  };
  GameOptionPengRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionPengRsp_descriptor_,
      GameOptionPengRsp::default_instance_,
      GameOptionPengRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPengRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPengRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionPengRsp));
  GameOptionGangReq_descriptor_ = file->message_type(23);
  static const int GameOptionGangReq_offsets_[1] = {
  };
  GameOptionGangReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionGangReq_descriptor_,
      GameOptionGangReq::default_instance_,
      GameOptionGangReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionGangReq));
  GameOptionGangRsp_descriptor_ = file->message_type(24);
  static const int GameOptionGangRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangRsp, ret_),
  };
  GameOptionGangRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionGangRsp_descriptor_,
      GameOptionGangRsp::default_instance_,
      GameOptionGangRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionGangRsp));
  GameOptionHuReq_descriptor_ = file->message_type(25);
  static const int GameOptionHuReq_offsets_[1] = {
  };
  GameOptionHuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionHuReq_descriptor_,
      GameOptionHuReq::default_instance_,
      GameOptionHuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionHuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionHuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionHuReq));
  GameOptionHuRsp_descriptor_ = file->message_type(26);
  static const int GameOptionHuRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionHuRsp, ret_),
  };
  GameOptionHuRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionHuRsp_descriptor_,
      GameOptionHuRsp::default_instance_,
      GameOptionHuRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionHuRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionHuRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionHuRsp));
  GameOptionPassReq_descriptor_ = file->message_type(27);
  static const int GameOptionPassReq_offsets_[1] = {
  };
  GameOptionPassReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionPassReq_descriptor_,
      GameOptionPassReq::default_instance_,
      GameOptionPassReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPassReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPassReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionPassReq));
  GameOptionPassRsp_descriptor_ = file->message_type(28);
  static const int GameOptionPassRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPassRsp, ret_),
  };
  GameOptionPassRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionPassRsp_descriptor_,
      GameOptionPassRsp::default_instance_,
      GameOptionPassRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPassRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionPassRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionPassRsp));
  GamePlayerReadyReq_descriptor_ = file->message_type(29);
  static const int GamePlayerReadyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerReadyReq, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerReadyReq, piaofen_),
  };
  GamePlayerReadyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerReadyReq_descriptor_,
      GamePlayerReadyReq::default_instance_,
      GamePlayerReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerReadyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerReadyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerReadyReq));
  UserStatus_descriptor_ = file->message_type(30);
  static const int UserStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, piaofen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, shanghuo_),
  };
  UserStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStatus_descriptor_,
      UserStatus::default_instance_,
      UserStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStatus));
  GamePlayerReadyEvt_descriptor_ = file->message_type(31);
  static const int GamePlayerReadyEvt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerReadyEvt, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerReadyEvt, pre_remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerReadyEvt, deskid_),
  };
  GamePlayerReadyEvt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerReadyEvt_descriptor_,
      GamePlayerReadyEvt::default_instance_,
      GamePlayerReadyEvt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerReadyEvt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerReadyEvt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerReadyEvt));
  GameOptionGangNotFirstReq_descriptor_ = file->message_type(32);
  static const int GameOptionGangNotFirstReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangNotFirstReq, gang_card_),
  };
  GameOptionGangNotFirstReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionGangNotFirstReq_descriptor_,
      GameOptionGangNotFirstReq::default_instance_,
      GameOptionGangNotFirstReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangNotFirstReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangNotFirstReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionGangNotFirstReq));
  GameOptionGangNotFirstRsp_descriptor_ = file->message_type(33);
  static const int GameOptionGangNotFirstRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangNotFirstRsp, ret_),
  };
  GameOptionGangNotFirstRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOptionGangNotFirstRsp_descriptor_,
      GameOptionGangNotFirstRsp::default_instance_,
      GameOptionGangNotFirstRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangNotFirstRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOptionGangNotFirstRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOptionGangNotFirstRsp));
  ApplyDeleteReq_descriptor_ = file->message_type(34);
  static const int ApplyDeleteReq_offsets_[1] = {
  };
  ApplyDeleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyDeleteReq_descriptor_,
      ApplyDeleteReq::default_instance_,
      ApplyDeleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDeleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDeleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyDeleteReq));
  ApplyDeleteEvt_descriptor_ = file->message_type(35);
  static const int ApplyDeleteEvt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDeleteEvt, apply_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDeleteEvt, game_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDeleteEvt, remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDeleteEvt, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDeleteEvt, deskid_),
  };
  ApplyDeleteEvt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyDeleteEvt_descriptor_,
      ApplyDeleteEvt::default_instance_,
      ApplyDeleteEvt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDeleteEvt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDeleteEvt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyDeleteEvt));
  UserOption_descriptor_ = file->message_type(36);
  static const int UserOption_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOption, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOption, type_),
  };
  UserOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOption_descriptor_,
      UserOption::default_instance_,
      UserOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOption));
  GameInfoEvt_descriptor_ = file->message_type(37);
  static const int GameInfoEvt_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, next_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, max_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, dealer_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, op_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, share_cards_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, my_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, recv_card_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, desk_remain_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, seat_num_),
  };
  GameInfoEvt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfoEvt_descriptor_,
      GameInfoEvt::default_instance_,
      GameInfoEvt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfoEvt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfoEvt));
  GameOverResultInfo_descriptor_ = file->message_type(38);
  static const int GameOverResultInfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, round_chi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, round_peng_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, round_gang_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, round_hu_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, round_win_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, total_chi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, total_peng_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, total_gang_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, total_hu_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, total_win_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, piaofen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, shanghuo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, bird_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, out_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, op_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, round_win_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, over_chips_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, round_win_chips_before_),
  };
  GameOverResultInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameOverResultInfo_descriptor_,
      GameOverResultInfo::default_instance_,
      GameOverResultInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameOverResultInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameOverResultInfo));
  EvtGameOver_descriptor_ = file->message_type(39);
  static const int EvtGameOver_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, winners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, remain_round_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, bird_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, seat_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, win_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, extra_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, last_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, over_reason_),
  };
  EvtGameOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvtGameOver_descriptor_,
      EvtGameOver::default_instance_,
      EvtGameOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtGameOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvtGameOver));
  RecordInfo_descriptor_ = file->message_type(40);
  static const int RecordInfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, round_win_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, round_chi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, round_peng_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, round_gang_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, round_hu_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, round_win_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, total_chi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, total_peng_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, total_gang_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, total_hu_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, total_win_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, piaofen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, shanghuo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, bird_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, out_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, op_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, over_chips_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, round_win_chips_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, portrait_),
  };
  RecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordInfo_descriptor_,
      RecordInfo::default_instance_,
      RecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordInfo));
  PerPlayRecord_descriptor_ = file->message_type(41);
  static const int PerPlayRecord_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, roundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, desk_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, bird_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, seat_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, win_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, extra_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, master_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, winners_),
  };
  PerPlayRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PerPlayRecord_descriptor_,
      PerPlayRecord::default_instance_,
      PerPlayRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerPlayRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PerPlayRecord));
  MyPlayRecordListReq_descriptor_ = file->message_type(42);
  static const int MyPlayRecordListReq_offsets_[1] = {
  };
  MyPlayRecordListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyPlayRecordListReq_descriptor_,
      MyPlayRecordListReq::default_instance_,
      MyPlayRecordListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyPlayRecordListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyPlayRecordListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyPlayRecordListReq));
  MyPlayRecordListRsp_descriptor_ = file->message_type(43);
  static const int MyPlayRecordListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyPlayRecordListRsp, record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyPlayRecordListRsp, ret_),
  };
  MyPlayRecordListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyPlayRecordListRsp_descriptor_,
      MyPlayRecordListRsp::default_instance_,
      MyPlayRecordListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyPlayRecordListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyPlayRecordListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyPlayRecordListRsp));
  RoundPlayRecordsReq_descriptor_ = file->message_type(44);
  static const int RoundPlayRecordsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundPlayRecordsReq, round_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundPlayRecordsReq, game_round_index_),
  };
  RoundPlayRecordsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoundPlayRecordsReq_descriptor_,
      RoundPlayRecordsReq::default_instance_,
      RoundPlayRecordsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundPlayRecordsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundPlayRecordsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoundPlayRecordsReq));
  RoundPlayRecordsRsp_descriptor_ = file->message_type(45);
  static const int RoundPlayRecordsRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundPlayRecordsRsp, record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundPlayRecordsRsp, ret_),
  };
  RoundPlayRecordsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoundPlayRecordsRsp_descriptor_,
      RoundPlayRecordsRsp::default_instance_,
      RoundPlayRecordsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundPlayRecordsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundPlayRecordsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoundPlayRecordsRsp));
  DeskChatReq_descriptor_ = file->message_type(46);
  static const int DeskChatReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatReq, index_),
  };
  DeskChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeskChatReq_descriptor_,
      DeskChatReq::default_instance_,
      DeskChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeskChatReq));
  DeskChatEvt_descriptor_ = file->message_type(47);
  static const int DeskChatEvt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatEvt, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatEvt, op_uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatEvt, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatEvt, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatEvt, content_),
  };
  DeskChatEvt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeskChatEvt_descriptor_,
      DeskChatEvt::default_instance_,
      DeskChatEvt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatEvt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskChatEvt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeskChatEvt));
  LogOutReq_descriptor_ = file->message_type(48);
  static const int LogOutReq_offsets_[1] = {
  };
  LogOutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogOutReq_descriptor_,
      LogOutReq::default_instance_,
      LogOutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogOutReq));
  LogOutRsp_descriptor_ = file->message_type(49);
  static const int LogOutRsp_offsets_[1] = {
  };
  LogOutRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogOutRsp_descriptor_,
      LogOutRsp::default_instance_,
      LogOutRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOutRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogOutRsp));
  EvtBroadCast_descriptor_ = file->message_type(50);
  static const int EvtBroadCast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtBroadCast, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtBroadCast, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtBroadCast, nick_),
  };
  EvtBroadCast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvtBroadCast_descriptor_,
      EvtBroadCast::default_instance_,
      EvtBroadCast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtBroadCast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvtBroadCast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvtBroadCast));
  UserCreatePreBill_descriptor_ = file->message_type(51);
  static const int UserCreatePreBill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCreatePreBill, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCreatePreBill, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCreatePreBill, item_id_),
  };
  UserCreatePreBill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCreatePreBill_descriptor_,
      UserCreatePreBill::default_instance_,
      UserCreatePreBill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCreatePreBill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCreatePreBill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCreatePreBill));
  CreateFormalBill_descriptor_ = file->message_type(52);
  static const int CreateFormalBill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFormalBill, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFormalBill, item_id_),
  };
  CreateFormalBill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateFormalBill_descriptor_,
      CreateFormalBill::default_instance_,
      CreateFormalBill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFormalBill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateFormalBill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateFormalBill));
  SetInviteUserReq_descriptor_ = file->message_type(53);
  static const int SetInviteUserReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInviteUserReq, uin_),
  };
  SetInviteUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetInviteUserReq_descriptor_,
      SetInviteUserReq::default_instance_,
      SetInviteUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInviteUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInviteUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetInviteUserReq));
  SetInviteUserRsp_descriptor_ = file->message_type(54);
  static const int SetInviteUserRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInviteUserRsp, ret_),
  };
  SetInviteUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetInviteUserRsp_descriptor_,
      SetInviteUserRsp::default_instance_,
      SetInviteUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInviteUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInviteUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetInviteUserRsp));
  HeartBeatReq_descriptor_ = file->message_type(55);
  static const int HeartBeatReq_offsets_[1] = {
  };
  HeartBeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatReq_descriptor_,
      HeartBeatReq::default_instance_,
      HeartBeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatReq));
  HeartBeatRsp_descriptor_ = file->message_type(56);
  static const int HeartBeatRsp_offsets_[1] = {
  };
  HeartBeatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatRsp_descriptor_,
      HeartBeatRsp::default_instance_,
      HeartBeatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatRsp));
  ws_msg_descriptor_ = file->message_type(57);
  static const int ws_msg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg, ms_op_int_),
  };
  ws_msg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ws_msg_descriptor_,
      ws_msg::default_instance_,
      ws_msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ws_msg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ws_msg));
  WsProtoTest_descriptor_ = file->message_type(58);
  static const int WsProtoTest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsProtoTest, op_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsProtoTest, re_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsProtoTest, op_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsProtoTest, op_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsProtoTest, re_msg_),
  };
  WsProtoTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WsProtoTest_descriptor_,
      WsProtoTest::default_instance_,
      WsProtoTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsProtoTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsProtoTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WsProtoTest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mahjong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeChatLoginReq_descriptor_, &WeChatLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRsp_descriptor_, &LoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraDeskTypeInfo_descriptor_, &ExtraDeskTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEnterDeskReq_descriptor_, &GameEnterDeskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEnterDeskRsp_descriptor_, &GameEnterDeskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRoomCardChange_descriptor_, &UserRoomCardChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameUserInfo_descriptor_, &GameUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCommonCards_descriptor_, &UserCommonCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyOption_descriptor_, &MyOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvtDeskUserEnter_descriptor_, &EvtDeskUserEnter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameExitDeskReq_descriptor_, &GameExitDeskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameExitDeskRsp_descriptor_, &GameExitDeskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeskPlayInfo_descriptor_, &DeskPlayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvtUserExit_descriptor_, &EvtUserExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientNotifyStartGameReq_descriptor_, &ClientNotifyStartGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientNotifyStartGameRsp_descriptor_, &ClientNotifyStartGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSendCardReq_descriptor_, &GameSendCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSendCardRsp_descriptor_, &GameSendCardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionChiReq_descriptor_, &GameOptionChiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionChiRsp_descriptor_, &GameOptionChiRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionPengReq_descriptor_, &GameOptionPengReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionPengRsp_descriptor_, &GameOptionPengRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionGangReq_descriptor_, &GameOptionGangReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionGangRsp_descriptor_, &GameOptionGangRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionHuReq_descriptor_, &GameOptionHuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionHuRsp_descriptor_, &GameOptionHuRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionPassReq_descriptor_, &GameOptionPassReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionPassRsp_descriptor_, &GameOptionPassRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerReadyReq_descriptor_, &GamePlayerReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStatus_descriptor_, &UserStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerReadyEvt_descriptor_, &GamePlayerReadyEvt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionGangNotFirstReq_descriptor_, &GameOptionGangNotFirstReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOptionGangNotFirstRsp_descriptor_, &GameOptionGangNotFirstRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyDeleteReq_descriptor_, &ApplyDeleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyDeleteEvt_descriptor_, &ApplyDeleteEvt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOption_descriptor_, &UserOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfoEvt_descriptor_, &GameInfoEvt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameOverResultInfo_descriptor_, &GameOverResultInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvtGameOver_descriptor_, &EvtGameOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordInfo_descriptor_, &RecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PerPlayRecord_descriptor_, &PerPlayRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyPlayRecordListReq_descriptor_, &MyPlayRecordListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyPlayRecordListRsp_descriptor_, &MyPlayRecordListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoundPlayRecordsReq_descriptor_, &RoundPlayRecordsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoundPlayRecordsRsp_descriptor_, &RoundPlayRecordsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeskChatReq_descriptor_, &DeskChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeskChatEvt_descriptor_, &DeskChatEvt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogOutReq_descriptor_, &LogOutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogOutRsp_descriptor_, &LogOutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvtBroadCast_descriptor_, &EvtBroadCast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCreatePreBill_descriptor_, &UserCreatePreBill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateFormalBill_descriptor_, &CreateFormalBill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetInviteUserReq_descriptor_, &SetInviteUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetInviteUserRsp_descriptor_, &SetInviteUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatReq_descriptor_, &HeartBeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatRsp_descriptor_, &HeartBeatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ws_msg_descriptor_, &ws_msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WsProtoTest_descriptor_, &WsProtoTest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mahjong_2eproto() {
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete WeChatLoginReq::default_instance_;
  delete WeChatLoginReq_reflection_;
  delete LoginRsp::default_instance_;
  delete LoginRsp_reflection_;
  delete ExtraDeskTypeInfo::default_instance_;
  delete ExtraDeskTypeInfo_reflection_;
  delete GameEnterDeskReq::default_instance_;
  delete GameEnterDeskReq_reflection_;
  delete GameEnterDeskRsp::default_instance_;
  delete GameEnterDeskRsp_reflection_;
  delete UserRoomCardChange::default_instance_;
  delete UserRoomCardChange_reflection_;
  delete GameUserInfo::default_instance_;
  delete GameUserInfo_reflection_;
  delete UserCommonCards::default_instance_;
  delete UserCommonCards_reflection_;
  delete MyOption::default_instance_;
  delete MyOption_reflection_;
  delete EvtDeskUserEnter::default_instance_;
  delete EvtDeskUserEnter_reflection_;
  delete GameExitDeskReq::default_instance_;
  delete GameExitDeskReq_reflection_;
  delete GameExitDeskRsp::default_instance_;
  delete GameExitDeskRsp_reflection_;
  delete DeskPlayInfo::default_instance_;
  delete DeskPlayInfo_reflection_;
  delete EvtUserExit::default_instance_;
  delete EvtUserExit_reflection_;
  delete ClientNotifyStartGameReq::default_instance_;
  delete ClientNotifyStartGameReq_reflection_;
  delete ClientNotifyStartGameRsp::default_instance_;
  delete ClientNotifyStartGameRsp_reflection_;
  delete GameSendCardReq::default_instance_;
  delete GameSendCardReq_reflection_;
  delete GameSendCardRsp::default_instance_;
  delete GameSendCardRsp_reflection_;
  delete GameOptionChiReq::default_instance_;
  delete GameOptionChiReq_reflection_;
  delete GameOptionChiRsp::default_instance_;
  delete GameOptionChiRsp_reflection_;
  delete GameOptionPengReq::default_instance_;
  delete GameOptionPengReq_reflection_;
  delete GameOptionPengRsp::default_instance_;
  delete GameOptionPengRsp_reflection_;
  delete GameOptionGangReq::default_instance_;
  delete GameOptionGangReq_reflection_;
  delete GameOptionGangRsp::default_instance_;
  delete GameOptionGangRsp_reflection_;
  delete GameOptionHuReq::default_instance_;
  delete GameOptionHuReq_reflection_;
  delete GameOptionHuRsp::default_instance_;
  delete GameOptionHuRsp_reflection_;
  delete GameOptionPassReq::default_instance_;
  delete GameOptionPassReq_reflection_;
  delete GameOptionPassRsp::default_instance_;
  delete GameOptionPassRsp_reflection_;
  delete GamePlayerReadyReq::default_instance_;
  delete GamePlayerReadyReq_reflection_;
  delete UserStatus::default_instance_;
  delete UserStatus_reflection_;
  delete GamePlayerReadyEvt::default_instance_;
  delete GamePlayerReadyEvt_reflection_;
  delete GameOptionGangNotFirstReq::default_instance_;
  delete GameOptionGangNotFirstReq_reflection_;
  delete GameOptionGangNotFirstRsp::default_instance_;
  delete GameOptionGangNotFirstRsp_reflection_;
  delete ApplyDeleteReq::default_instance_;
  delete ApplyDeleteReq_reflection_;
  delete ApplyDeleteEvt::default_instance_;
  delete ApplyDeleteEvt_reflection_;
  delete UserOption::default_instance_;
  delete UserOption_reflection_;
  delete GameInfoEvt::default_instance_;
  delete GameInfoEvt_reflection_;
  delete GameOverResultInfo::default_instance_;
  delete GameOverResultInfo_reflection_;
  delete EvtGameOver::default_instance_;
  delete EvtGameOver_reflection_;
  delete RecordInfo::default_instance_;
  delete RecordInfo_reflection_;
  delete PerPlayRecord::default_instance_;
  delete PerPlayRecord_reflection_;
  delete MyPlayRecordListReq::default_instance_;
  delete MyPlayRecordListReq_reflection_;
  delete MyPlayRecordListRsp::default_instance_;
  delete MyPlayRecordListRsp_reflection_;
  delete RoundPlayRecordsReq::default_instance_;
  delete RoundPlayRecordsReq_reflection_;
  delete RoundPlayRecordsRsp::default_instance_;
  delete RoundPlayRecordsRsp_reflection_;
  delete DeskChatReq::default_instance_;
  delete DeskChatReq_reflection_;
  delete DeskChatEvt::default_instance_;
  delete DeskChatEvt_reflection_;
  delete LogOutReq::default_instance_;
  delete LogOutReq_reflection_;
  delete LogOutRsp::default_instance_;
  delete LogOutRsp_reflection_;
  delete EvtBroadCast::default_instance_;
  delete EvtBroadCast_reflection_;
  delete UserCreatePreBill::default_instance_;
  delete UserCreatePreBill_reflection_;
  delete CreateFormalBill::default_instance_;
  delete CreateFormalBill_reflection_;
  delete SetInviteUserReq::default_instance_;
  delete SetInviteUserReq_reflection_;
  delete SetInviteUserRsp::default_instance_;
  delete SetInviteUserRsp_reflection_;
  delete HeartBeatReq::default_instance_;
  delete HeartBeatReq_reflection_;
  delete HeartBeatRsp::default_instance_;
  delete HeartBeatRsp_reflection_;
  delete ws_msg::default_instance_;
  delete ws_msg_reflection_;
  delete WsProtoTest::default_instance_;
  delete WsProtoTest_reflection_;
}

void protobuf_AddDesc_mahjong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmahjong.proto\"\247\001\n\010LoginReq\022\014\n\004nick\030\001 \001"
    "(\t\022\014\n\004uuid\030\002 \001(\t\022\014\n\004sign\030\003 \001(\t\022\017\n\007channe"
    "l\030\004 \001(\t\022\017\n\007version\030\005 \001(\005\022\n\n\002os\030\006 \001(\t\022\023\n\013"
    "is_register\030\007 \001(\010\022\026\n\016extra_username\030\010 \001("
    "\t\022\026\n\016extra_password\030\t \001(\t\"\200\001\n\016WeChatLogi"
    "nReq\022\014\n\004sign\030\001 \001(\t\022\016\n\006openid\030\002 \001(\t\022\r\n\005to"
    "ken\030\003 \001(\t\022\023\n\013expire_date\030\004 \001(\t\022\017\n\007channe"
    "l\030\005 \001(\t\022\017\n\007version\030\006 \001(\005\022\n\n\002os\030\007 \001(\t\"\361\001\n"
    "\010LoginRsp\022\013\n\003uin\030\001 \001(\005\022\020\n\010password\030\002 \001(\t"
    "\022\014\n\004nick\030\003 \001(\t\022\013\n\003sex\030\004 \001(\005\022\022\n\nold_deski"
    "d\030\005 \001(\005\022\020\n\010portrait\030\007 \001(\t\022\024\n\014wx_public_i"
    "d\030\010 \001(\t\022\023\n\013wx_agent_id\030\t \001(\t\022\n\n\002ip\030\n \001(\t"
    "\022\021\n\troom_card\030\013 \001(\005\022\013\n\003ret\030\014 \001(\005\022\027\n\017wy_y"
    "unxin_token\030\r \001(\t\022\025\n\rhall_billband\030\016 \001(\t"
    "\"j\n\021ExtraDeskTypeInfo\022\021\n\thongzhong\030\001 \001(\010"
    "\022\r\n\005qidui\030\002 \001(\010\022\020\n\010zhuaniao\030\003 \001(\005\022\017\n\007pia"
    "ofen\030\004 \001(\005\022\020\n\010shanghuo\030\005 \001(\010\"\277\001\n\020GameEnt"
    "erDeskReq\022\023\n\013dst_desk_id\030\001 \001(\005\022\020\n\010new_de"
    "sk\030\002 \001(\005\022\021\n\treconnect\030\003 \001(\005\022\020\n\010card_num\030"
    "\004 \001(\005\022\021\n\tdesk_type\030\005 \001(\005\022\022\n\nseat_limit\030\006"
    " \001(\005\022\020\n\010win_type\030\007 \001(\005\022&\n\nextra_type\030\010 \001"
    "(\0132\022.ExtraDeskTypeInfo\"\037\n\020GameEnterDeskR"
    "sp\022\013\n\003ret\030\001 \001(\005\">\n\022UserRoomCardChange\022\021\n"
    "\troom_card\030\001 \001(\005\022\025\n\rchange_reason\030\002 \001(\005\""
    "\252\001\n\014GameUserInfo\022\016\n\006status\030\001 \001(\005\022\013\n\003uin\030"
    "\002 \001(\005\022\014\n\004nick\030\003 \001(\t\022\016\n\006seatid\030\004 \001(\005\022\013\n\003s"
    "ex\030\005 \001(\005\022\020\n\010portrait\030\006 \001(\t\022\021\n\tis_master\030"
    "\007 \001(\005\022\017\n\007piaofen\030\010 \001(\005\022\020\n\010shanghuo\030\t \001(\005"
    "\022\n\n\002ip\030\n \001(\t\"\224\001\n\017UserCommonCards\022\013\n\003uin\030"
    "\001 \001(\005\022\020\n\010card_len\030\002 \001(\005\022\021\n\tout_cards\030\003 \003"
    "(\005\022\017\n\007discard\030\004 \003(\005\022\016\n\006seatid\030\005 \001(\005\022\016\n\006s"
    "tatus\030\006 \001(\005\022\017\n\007op_list\030\007 \003(\005\022\r\n\005chips\030\010 "
    "\001(\005\"q\n\010MyOption\022\016\n\006op_chi\030\001 \001(\010\022\017\n\007op_pe"
    "ng\030\002 \001(\010\022\017\n\007op_gang\030\003 \001(\010\022\r\n\005op_hu\030\004 \001(\010"
    "\022\021\n\tneed_wait\030\005 \001(\010\022\021\n\tchi_cards\030\006 \003(\005\"\353"
    "\003\n\020EvtDeskUserEnter\022\016\n\006deskid\030\001 \001(\005\022\016\n\006o"
    "p_uin\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\022\021\n\tmax_round"
    "\030\004 \001(\005\022\034\n\005users\030\005 \003(\0132\r.GameUserInfo\022\020\n\010"
    "next_uin\030\006 \001(\005\022\025\n\rdealer_seatid\030\007 \001(\005\022\021\n"
    "\005cards\030\010 \003(\005B\002\020\001\022\"\n\010in_users\030\t \003(\0132\020.Use"
    "rCommonCards\022\027\n\017share_cards_len\030\n \001(\005\022\022\n"
    "\ngame_round\030\013 \001(\005\022\034\n\tmy_option\030\014 \001(\0132\t.M"
    "yOption\022\025\n\rrecv_card_uin\030\r \001(\005\022\031\n\021desk_r"
    "emain_round\030\016 \001(\005\022\020\n\010seat_num\030\017 \001(\005\022\023\n\013r"
    "emain_time\030\020 \001(\005\022\021\n\tapply_uin\030\021 \001(\005\022\020\n\010w"
    "in_type\030\022 \001(\005\022&\n\nextra_type\030\023 \001(\0132\022.Extr"
    "aDeskTypeInfo\022\014\n\004type\030\024 \001(\005\022\027\n\017pre_remai"
    "n_time\030\025 \001(\005\"\021\n\017GameExitDeskReq\"\036\n\017GameE"
    "xitDeskRsp\022\013\n\003ret\030\001 \001(\005\"\254\003\n\014DeskPlayInfo"
    "\022\021\n\005cards\030\001 \003(\005B\002\020\001\022\020\n\010card_len\030\002 \001(\005\022\025\n"
    "\tout_cards\030\003 \003(\005B\002\020\001\022\024\n\014out_card_len\030\004 \001"
    "(\005\022\024\n\010discards\030\005 \003(\005B\002\020\001\022\016\n\006status\030\006 \001(\005"
    "\022\r\n\005chips\030\007 \001(\005\022\027\n\017round_win_chips\030\010 \001(\005"
    "\022\025\n\rtotal_chi_num\030\t \001(\005\022\026\n\016total_peng_nu"
    "m\030\n \001(\005\022\026\n\016total_gang_num\030\013 \001(\005\022\030\n\020total"
    "_ganged_num\030\014 \001(\005\022\024\n\014total_hu_num\030\r \001(\005\022"
    "\026\n\016total_hued_num\030\016 \001(\005\022\025\n\rround_chi_num"
    "\030\017 \001(\005\022\026\n\016round_peng_num\030\020 \001(\005\022\026\n\016round_"
    "gang_num\030\021 \001(\005\022\030\n\020round_ganged_num\030\022 \001(\005"
    "\022\014\n\004role\030\023 \001(\005\"\310\001\n\013EvtUserExit\022\016\n\006deskid"
    "\030\001 \001(\005\022\016\n\006dealer\030\002 \001(\005\022\016\n\006op_uin\030\003 \001(\005\022\021"
    "\n\top_status\030\004 \001(\005\022\020\n\010next_uin\030\005 \001(\005\022 \n\tp"
    "lay_info\030\006 \001(\0132\r.DeskPlayInfo\022\033\n\023player_"
    "op_past_time\030\007 \001(\003\022\025\n\rdealer_seatid\030\010 \001("
    "\005\022\016\n\006reason\030\t \001(\005\"\032\n\030ClientNotifyStartGa"
    "meReq\"\'\n\030ClientNotifyStartGameRsp\022\013\n\003ret"
    "\030\001 \001(\005\"\037\n\017GameSendCardReq\022\014\n\004card\030\001 \001(\005\""
    "\036\n\017GameSendCardRsp\022\013\n\003ret\030\001 \001(\005\"!\n\020GameO"
    "ptionChiReq\022\r\n\005index\030\001 \001(\005\"\037\n\020GameOption"
    "ChiRsp\022\013\n\003ret\030\001 \001(\005\"\023\n\021GameOptionPengReq"
    "\" \n\021GameOptionPengRsp\022\013\n\003ret\030\001 \001(\005\"\023\n\021Ga"
    "meOptionGangReq\" \n\021GameOptionGangRsp\022\013\n\003"
    "ret\030\001 \001(\005\"\021\n\017GameOptionHuReq\"\036\n\017GameOpti"
    "onHuRsp\022\013\n\003ret\030\001 \001(\005\"\023\n\021GameOptionPassRe"
    "q\" \n\021GameOptionPassRsp\022\013\n\003ret\030\001 \001(\005\"5\n\022G"
    "amePlayerReadyReq\022\016\n\006status\030\001 \001(\005\022\017\n\007pia"
    "ofen\030\002 \001(\005\"L\n\nUserStatus\022\013\n\003uin\030\001 \001(\005\022\016\n"
    "\006status\030\002 \001(\005\022\017\n\007piaofen\030\003 \001(\005\022\020\n\010shangh"
    "uo\030\004 \001(\005\"Y\n\022GamePlayerReadyEvt\022\032\n\005users\030"
    "\001 \003(\0132\013.UserStatus\022\027\n\017pre_remain_time\030\002 "
    "\001(\005\022\016\n\006deskid\030\003 \001(\005\".\n\031GameOptionGangNot"
    "FirstReq\022\021\n\tgang_card\030\001 \001(\005\"(\n\031GameOptio"
    "nGangNotFirstRsp\022\013\n\003ret\030\001 \001(\005\"\020\n\016ApplyDe"
    "leteReq\"m\n\016ApplyDeleteEvt\022\021\n\tapply_uin\030\001"
    " \001(\005\022\023\n\013game_status\030\002 \001(\005\022\023\n\013remain_time"
    "\030\003 \001(\005\022\016\n\006status\030\004 \001(\005\022\016\n\006deskid\030\005 \001(\005\"\'"
    "\n\nUserOption\022\013\n\003uin\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\""
    "\312\002\n\013GameInfoEvt\022\016\n\006deskid\030\001 \001(\005\022\020\n\010next_"
    "uin\030\002 \001(\005\022\021\n\tmax_round\030\003 \001(\005\022\021\n\005cards\030\004 "
    "\003(\005B\002\020\001\022\025\n\rdealer_seatid\030\005 \001(\005\022\037\n\005users\030"
    "\006 \003(\0132\020.UserCommonCards\022\034\n\007op_user\030\007 \001(\013"
    "2\013.UserOption\022\027\n\017share_cards_len\030\010 \001(\005\022\022"
    "\n\ngame_round\030\t \001(\005\022\034\n\tmy_option\030\n \001(\0132\t."
    "MyOption\022\016\n\006status\030\013 \001(\005\022\025\n\rrecv_card_ui"
    "n\030\014 \001(\005\022\031\n\021desk_remain_round\030\r \001(\005\022\020\n\010se"
    "at_num\030\016 \001(\005\"\353\003\n\022GameOverResultInfo\022\013\n\003u"
    "in\030\001 \001(\005\022\r\n\005chips\030\002 \001(\003\022\025\n\rround_chi_num"
    "\030\003 \001(\005\022\026\n\016round_peng_num\030\004 \001(\005\022\027\n\017round_"
    "gang_list\030\005 \003(\005\022\025\n\rround_hu_list\030\006 \003(\005\022\026"
    "\n\016round_win_list\030\007 \003(\005\022\025\n\rtotal_chi_num\030"
    "\010 \001(\005\022\026\n\016total_peng_num\030\t \001(\005\022\027\n\017total_g"
    "ang_list\030\n \003(\005\022\025\n\rtotal_hu_list\030\013 \003(\005\022\026\n"
    "\016total_win_list\030\014 \003(\005\022\016\n\006status\030\r \001(\005\022\017\n"
    "\007piaofen\030\016 \001(\005\022\020\n\010shanghuo\030\017 \001(\005\022\020\n\010bird"
    "_num\030\020 \001(\005\022\r\n\005cards\030\021 \003(\005\022\021\n\tout_cards\030\022"
    " \003(\005\022\017\n\007op_list\030\023 \003(\005\022\027\n\017round_win_chips"
    "\030\024 \001(\005\022\032\n\022over_chips_details\030\025 \003(\005\022\036\n\026ro"
    "und_win_chips_before\030\026 \001(\005\"\260\002\n\013EvtGameOv"
    "er\022\023\n\007winners\030\001 \003(\005B\002\020\001\022#\n\006result\030\002 \003(\0132"
    "\023.GameOverResultInfo\022\016\n\006deskid\030\003 \001(\005\022\016\n\006"
    "status\030\004 \001(\005\022\030\n\020remain_round_num\030\005 \001(\005\022\025"
    "\n\tbird_card\030\006 \003(\005B\002\020\001\022\014\n\004type\030\007 \001(\005\022\022\n\ns"
    "eat_limit\030\010 \001(\005\022\020\n\010win_type\030\t \001(\005\022&\n\next"
    "ra_type\030\n \001(\0132\022.ExtraDeskTypeInfo\022\022\n\nlas"
    "t_round\030\013 \001(\010\022\021\n\tover_time\030\014 \001(\005\022\023\n\013over"
    "_reason\030\r \001(\005\"\236\004\n\nRecordInfo\022\013\n\003uin\030\001 \001("
    "\005\022\014\n\004role\030\002 \001(\005\022\r\n\005chips\030\003 \001(\003\022\027\n\017round_"
    "win_chips\030\004 \001(\005\022\025\n\rround_chi_num\030\005 \001(\005\022\026"
    "\n\016round_peng_num\030\006 \001(\005\022\027\n\017round_gang_lis"
    "t\030\007 \003(\005\022\025\n\rround_hu_list\030\010 \003(\005\022\026\n\016round_"
    "win_list\030\t \003(\005\022\025\n\rtotal_chi_num\030\n \001(\005\022\026\n"
    "\016total_peng_num\030\013 \001(\005\022\027\n\017total_gang_list"
    "\030\014 \003(\005\022\025\n\rtotal_hu_list\030\r \003(\005\022\026\n\016total_w"
    "in_list\030\016 \003(\005\022\017\n\007piaofen\030\017 \001(\005\022\020\n\010shangh"
    "uo\030\020 \001(\005\022\020\n\010bird_num\030\021 \001(\005\022\r\n\005cards\030\022 \003("
    "\005\022\021\n\tout_cards\030\023 \003(\005\022\017\n\007op_list\030\024 \003(\005\022\032\n"
    "\022over_chips_details\030\025 \003(\005\022\036\n\026round_win_c"
    "hips_before\030\026 \001(\005\022\014\n\004nick\030\027 \001(\t\022\016\n\006seati"
    "d\030\030 \001(\005\022\013\n\003sex\030\031 \001(\005\022\020\n\010portrait\030\032 \001(\t\"\244"
    "\002\n\rPerPlayRecord\022\017\n\007roundid\030\001 \001(\t\022\033\n\006res"
    "ult\030\002 \003(\0132\013.RecordInfo\022\016\n\006deskid\030\003 \001(\005\022\022"
    "\n\ngame_round\030\004 \001(\005\022\022\n\ndesk_round\030\006 \001(\005\022\025"
    "\n\tbird_card\030\007 \003(\005B\002\020\001\022\014\n\004type\030\010 \001(\005\022\022\n\ns"
    "eat_limit\030\t \001(\005\022\020\n\010win_type\030\n \001(\005\022&\n\next"
    "ra_type\030\013 \001(\0132\022.ExtraDeskTypeInfo\022\021\n\tove"
    "r_time\030\014 \001(\005\022\022\n\nmaster_uin\030\r \001(\005\022\023\n\007winn"
    "ers\030\016 \003(\005B\002\020\001\"\025\n\023MyPlayRecordListReq\"G\n\023"
    "MyPlayRecordListRsp\022#\n\013record_list\030\001 \003(\013"
    "2\016.PerPlayRecord\022\013\n\003ret\030\002 \001(\005\"A\n\023RoundPl"
    "ayRecordsReq\022\020\n\010round_id\030\001 \001(\t\022\030\n\020game_r"
    "ound_index\030\002 \001(\005\"G\n\023RoundPlayRecordsRsp\022"
    "#\n\013record_list\030\001 \003(\0132\016.PerPlayRecord\022\013\n\003"
    "ret\030\002 \001(\005\";\n\013DeskChatReq\022\017\n\007content\030\001 \001("
    "\t\022\014\n\004type\030\002 \001(\005\022\r\n\005index\030\003 \001(\005\"W\n\013DeskCh"
    "atEvt\022\013\n\003ret\030\001 \001(\005\022\016\n\006op_uin\030\002 \001(\005\022\013\n\003se"
    "x\030\003 \001(\010\022\r\n\005index\030\004 \001(\005\022\017\n\007content\030\005 \001(\t\""
    "\013\n\tLogOutReq\"\013\n\tLogOutRsp\":\n\014EvtBroadCas"
    "t\022\013\n\003uin\030\001 \001(\005\022\017\n\007content\030\002 \001(\t\022\014\n\004nick\030"
    "\003 \001(\t\"\?\n\021UserCreatePreBill\022\013\n\003uin\030\001 \001(\005\022"
    "\014\n\004name\030\002 \001(\t\022\017\n\007item_id\030\003 \001(\t\"0\n\020Create"
    "FormalBill\022\013\n\003uin\030\001 \001(\005\022\017\n\007item_id\030\002 \001(\t"
    "\"\037\n\020SetInviteUserReq\022\013\n\003uin\030\001 \001(\005\"\037\n\020Set"
    "InviteUserRsp\022\013\n\003ret\030\001 \001(\005\"\016\n\014HeartBeatR"
    "eq\"\016\n\014HeartBeatRsp\"\033\n\006ws_msg\022\021\n\tms_op_in"
    "t\030\001 \001(\005\"s\n\013WsProtoTest\022\016\n\006op_int\030\001 \001(\005\022\022"
    "\n\006re_int\030\002 \003(\005B\002\020\001\022\016\n\006op_str\030\003 \001(\t\022\027\n\006op"
    "_msg\030\004 \001(\0132\007.ws_msg\022\027\n\006re_msg\030\005 \003(\0132\007.ws"
    "_msg", 6284);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mahjong.proto", &protobuf_RegisterTypes);
  LoginReq::default_instance_ = new LoginReq();
  WeChatLoginReq::default_instance_ = new WeChatLoginReq();
  LoginRsp::default_instance_ = new LoginRsp();
  ExtraDeskTypeInfo::default_instance_ = new ExtraDeskTypeInfo();
  GameEnterDeskReq::default_instance_ = new GameEnterDeskReq();
  GameEnterDeskRsp::default_instance_ = new GameEnterDeskRsp();
  UserRoomCardChange::default_instance_ = new UserRoomCardChange();
  GameUserInfo::default_instance_ = new GameUserInfo();
  UserCommonCards::default_instance_ = new UserCommonCards();
  MyOption::default_instance_ = new MyOption();
  EvtDeskUserEnter::default_instance_ = new EvtDeskUserEnter();
  GameExitDeskReq::default_instance_ = new GameExitDeskReq();
  GameExitDeskRsp::default_instance_ = new GameExitDeskRsp();
  DeskPlayInfo::default_instance_ = new DeskPlayInfo();
  EvtUserExit::default_instance_ = new EvtUserExit();
  ClientNotifyStartGameReq::default_instance_ = new ClientNotifyStartGameReq();
  ClientNotifyStartGameRsp::default_instance_ = new ClientNotifyStartGameRsp();
  GameSendCardReq::default_instance_ = new GameSendCardReq();
  GameSendCardRsp::default_instance_ = new GameSendCardRsp();
  GameOptionChiReq::default_instance_ = new GameOptionChiReq();
  GameOptionChiRsp::default_instance_ = new GameOptionChiRsp();
  GameOptionPengReq::default_instance_ = new GameOptionPengReq();
  GameOptionPengRsp::default_instance_ = new GameOptionPengRsp();
  GameOptionGangReq::default_instance_ = new GameOptionGangReq();
  GameOptionGangRsp::default_instance_ = new GameOptionGangRsp();
  GameOptionHuReq::default_instance_ = new GameOptionHuReq();
  GameOptionHuRsp::default_instance_ = new GameOptionHuRsp();
  GameOptionPassReq::default_instance_ = new GameOptionPassReq();
  GameOptionPassRsp::default_instance_ = new GameOptionPassRsp();
  GamePlayerReadyReq::default_instance_ = new GamePlayerReadyReq();
  UserStatus::default_instance_ = new UserStatus();
  GamePlayerReadyEvt::default_instance_ = new GamePlayerReadyEvt();
  GameOptionGangNotFirstReq::default_instance_ = new GameOptionGangNotFirstReq();
  GameOptionGangNotFirstRsp::default_instance_ = new GameOptionGangNotFirstRsp();
  ApplyDeleteReq::default_instance_ = new ApplyDeleteReq();
  ApplyDeleteEvt::default_instance_ = new ApplyDeleteEvt();
  UserOption::default_instance_ = new UserOption();
  GameInfoEvt::default_instance_ = new GameInfoEvt();
  GameOverResultInfo::default_instance_ = new GameOverResultInfo();
  EvtGameOver::default_instance_ = new EvtGameOver();
  RecordInfo::default_instance_ = new RecordInfo();
  PerPlayRecord::default_instance_ = new PerPlayRecord();
  MyPlayRecordListReq::default_instance_ = new MyPlayRecordListReq();
  MyPlayRecordListRsp::default_instance_ = new MyPlayRecordListRsp();
  RoundPlayRecordsReq::default_instance_ = new RoundPlayRecordsReq();
  RoundPlayRecordsRsp::default_instance_ = new RoundPlayRecordsRsp();
  DeskChatReq::default_instance_ = new DeskChatReq();
  DeskChatEvt::default_instance_ = new DeskChatEvt();
  LogOutReq::default_instance_ = new LogOutReq();
  LogOutRsp::default_instance_ = new LogOutRsp();
  EvtBroadCast::default_instance_ = new EvtBroadCast();
  UserCreatePreBill::default_instance_ = new UserCreatePreBill();
  CreateFormalBill::default_instance_ = new CreateFormalBill();
  SetInviteUserReq::default_instance_ = new SetInviteUserReq();
  SetInviteUserRsp::default_instance_ = new SetInviteUserRsp();
  HeartBeatReq::default_instance_ = new HeartBeatReq();
  HeartBeatRsp::default_instance_ = new HeartBeatRsp();
  ws_msg::default_instance_ = new ws_msg();
  WsProtoTest::default_instance_ = new WsProtoTest();
  LoginReq::default_instance_->InitAsDefaultInstance();
  WeChatLoginReq::default_instance_->InitAsDefaultInstance();
  LoginRsp::default_instance_->InitAsDefaultInstance();
  ExtraDeskTypeInfo::default_instance_->InitAsDefaultInstance();
  GameEnterDeskReq::default_instance_->InitAsDefaultInstance();
  GameEnterDeskRsp::default_instance_->InitAsDefaultInstance();
  UserRoomCardChange::default_instance_->InitAsDefaultInstance();
  GameUserInfo::default_instance_->InitAsDefaultInstance();
  UserCommonCards::default_instance_->InitAsDefaultInstance();
  MyOption::default_instance_->InitAsDefaultInstance();
  EvtDeskUserEnter::default_instance_->InitAsDefaultInstance();
  GameExitDeskReq::default_instance_->InitAsDefaultInstance();
  GameExitDeskRsp::default_instance_->InitAsDefaultInstance();
  DeskPlayInfo::default_instance_->InitAsDefaultInstance();
  EvtUserExit::default_instance_->InitAsDefaultInstance();
  ClientNotifyStartGameReq::default_instance_->InitAsDefaultInstance();
  ClientNotifyStartGameRsp::default_instance_->InitAsDefaultInstance();
  GameSendCardReq::default_instance_->InitAsDefaultInstance();
  GameSendCardRsp::default_instance_->InitAsDefaultInstance();
  GameOptionChiReq::default_instance_->InitAsDefaultInstance();
  GameOptionChiRsp::default_instance_->InitAsDefaultInstance();
  GameOptionPengReq::default_instance_->InitAsDefaultInstance();
  GameOptionPengRsp::default_instance_->InitAsDefaultInstance();
  GameOptionGangReq::default_instance_->InitAsDefaultInstance();
  GameOptionGangRsp::default_instance_->InitAsDefaultInstance();
  GameOptionHuReq::default_instance_->InitAsDefaultInstance();
  GameOptionHuRsp::default_instance_->InitAsDefaultInstance();
  GameOptionPassReq::default_instance_->InitAsDefaultInstance();
  GameOptionPassRsp::default_instance_->InitAsDefaultInstance();
  GamePlayerReadyReq::default_instance_->InitAsDefaultInstance();
  UserStatus::default_instance_->InitAsDefaultInstance();
  GamePlayerReadyEvt::default_instance_->InitAsDefaultInstance();
  GameOptionGangNotFirstReq::default_instance_->InitAsDefaultInstance();
  GameOptionGangNotFirstRsp::default_instance_->InitAsDefaultInstance();
  ApplyDeleteReq::default_instance_->InitAsDefaultInstance();
  ApplyDeleteEvt::default_instance_->InitAsDefaultInstance();
  UserOption::default_instance_->InitAsDefaultInstance();
  GameInfoEvt::default_instance_->InitAsDefaultInstance();
  GameOverResultInfo::default_instance_->InitAsDefaultInstance();
  EvtGameOver::default_instance_->InitAsDefaultInstance();
  RecordInfo::default_instance_->InitAsDefaultInstance();
  PerPlayRecord::default_instance_->InitAsDefaultInstance();
  MyPlayRecordListReq::default_instance_->InitAsDefaultInstance();
  MyPlayRecordListRsp::default_instance_->InitAsDefaultInstance();
  RoundPlayRecordsReq::default_instance_->InitAsDefaultInstance();
  RoundPlayRecordsRsp::default_instance_->InitAsDefaultInstance();
  DeskChatReq::default_instance_->InitAsDefaultInstance();
  DeskChatEvt::default_instance_->InitAsDefaultInstance();
  LogOutReq::default_instance_->InitAsDefaultInstance();
  LogOutRsp::default_instance_->InitAsDefaultInstance();
  EvtBroadCast::default_instance_->InitAsDefaultInstance();
  UserCreatePreBill::default_instance_->InitAsDefaultInstance();
  CreateFormalBill::default_instance_->InitAsDefaultInstance();
  SetInviteUserReq::default_instance_->InitAsDefaultInstance();
  SetInviteUserRsp::default_instance_->InitAsDefaultInstance();
  HeartBeatReq::default_instance_->InitAsDefaultInstance();
  HeartBeatRsp::default_instance_->InitAsDefaultInstance();
  ws_msg::default_instance_->InitAsDefaultInstance();
  WsProtoTest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mahjong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mahjong_2eproto {
  StaticDescriptorInitializer_mahjong_2eproto() {
    protobuf_AddDesc_mahjong_2eproto();
  }
} static_descriptor_initializer_mahjong_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kNickFieldNumber;
const int LoginReq::kUuidFieldNumber;
const int LoginReq::kSignFieldNumber;
const int LoginReq::kChannelFieldNumber;
const int LoginReq::kVersionFieldNumber;
const int LoginReq::kOsFieldNumber;
const int LoginReq::kIsRegisterFieldNumber;
const int LoginReq::kExtraUsernameFieldNumber;
const int LoginReq::kExtraPasswordFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_register_ = false;
  extra_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (extra_username_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_username_;
  }
  if (extra_password_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_password_;
  }
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    version_ = 0;
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
    is_register_ = false;
    if (has_extra_username()) {
      if (extra_username_ != &::google::protobuf::internal::kEmptyString) {
        extra_username_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_extra_password()) {
      if (extra_password_ != &::google::protobuf::internal::kEmptyString) {
        extra_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sign;
        break;
      }

      // optional string sign = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_channel;
        break;
      }

      // optional string channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // optional int32 version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_os;
        break;
      }

      // optional string os = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_register;
        break;
      }

      // optional bool is_register = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_register:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_register_)));
          set_has_is_register();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extra_username;
        break;
      }

      // optional string extra_username = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extra_username().data(), this->extra_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_extra_password;
        break;
      }

      // optional string extra_password = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extra_password().data(), this->extra_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nick = 1;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nick(), output);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }

  // optional string sign = 3;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sign(), output);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->channel(), output);
  }

  // optional int32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  // optional string os = 6;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->os(), output);
  }

  // optional bool is_register = 7;
  if (has_is_register()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_register(), output);
  }

  // optional string extra_username = 8;
  if (has_extra_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_username().data(), this->extra_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->extra_username(), output);
  }

  // optional string extra_password = 9;
  if (has_extra_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_password().data(), this->extra_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->extra_password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nick = 1;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nick(), target);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional string sign = 3;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sign(), target);
  }

  // optional string channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channel(), target);
  }

  // optional int32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  // optional string os = 6;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->os(), target);
  }

  // optional bool is_register = 7;
  if (has_is_register()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_register(), target);
  }

  // optional string extra_username = 8;
  if (has_extra_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_username().data(), this->extra_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->extra_username(), target);
  }

  // optional string extra_password = 9;
  if (has_extra_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_password().data(), this->extra_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->extra_password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nick = 1;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional string sign = 3;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional int32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string os = 6;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional bool is_register = 7;
    if (has_is_register()) {
      total_size += 1 + 1;
    }

    // optional string extra_username = 8;
    if (has_extra_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_username());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string extra_password = 9;
    if (has_extra_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_is_register()) {
      set_is_register(from.is_register());
    }
    if (from.has_extra_username()) {
      set_extra_username(from.extra_username());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extra_password()) {
      set_extra_password(from.extra_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(nick_, other->nick_);
    std::swap(uuid_, other->uuid_);
    std::swap(sign_, other->sign_);
    std::swap(channel_, other->channel_);
    std::swap(version_, other->version_);
    std::swap(os_, other->os_);
    std::swap(is_register_, other->is_register_);
    std::swap(extra_username_, other->extra_username_);
    std::swap(extra_password_, other->extra_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeChatLoginReq::kSignFieldNumber;
const int WeChatLoginReq::kOpenidFieldNumber;
const int WeChatLoginReq::kTokenFieldNumber;
const int WeChatLoginReq::kExpireDateFieldNumber;
const int WeChatLoginReq::kChannelFieldNumber;
const int WeChatLoginReq::kVersionFieldNumber;
const int WeChatLoginReq::kOsFieldNumber;
#endif  // !_MSC_VER

WeChatLoginReq::WeChatLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeChatLoginReq::InitAsDefaultInstance() {
}

WeChatLoginReq::WeChatLoginReq(const WeChatLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeChatLoginReq::SharedCtor() {
  _cached_size_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expire_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeChatLoginReq::~WeChatLoginReq() {
  SharedDtor();
}

void WeChatLoginReq::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (expire_date_ != &::google::protobuf::internal::kEmptyString) {
    delete expire_date_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (this != default_instance_) {
  }
}

void WeChatLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeChatLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeChatLoginReq_descriptor_;
}

const WeChatLoginReq& WeChatLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

WeChatLoginReq* WeChatLoginReq::default_instance_ = NULL;

WeChatLoginReq* WeChatLoginReq::New() const {
  return new WeChatLoginReq;
}

void WeChatLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_expire_date()) {
      if (expire_date_ != &::google::protobuf::internal::kEmptyString) {
        expire_date_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    version_ = 0;
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::kEmptyString) {
        os_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeChatLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sign = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_expire_date;
        break;
      }

      // optional string expire_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expire_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expire_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->expire_date().data(), this->expire_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }

      // optional int32 version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_os;
        break;
      }

      // optional string os = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeChatLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sign = 1;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sign(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // optional string expire_date = 4;
  if (has_expire_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expire_date().data(), this->expire_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->expire_date(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  // optional int32 version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->version(), output);
  }

  // optional string os = 7;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->os(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeChatLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sign = 1;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sign(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional string expire_date = 4;
  if (has_expire_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expire_date().data(), this->expire_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->expire_date(), target);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->channel(), target);
  }

  // optional int32 version = 6;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->version(), target);
  }

  // optional string os = 7;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->os(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeChatLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sign = 1;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string expire_date = 4;
    if (has_expire_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expire_date());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional int32 version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional string os = 7;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeChatLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeChatLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeChatLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeChatLoginReq::MergeFrom(const WeChatLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_expire_date()) {
      set_expire_date(from.expire_date());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeChatLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeChatLoginReq::CopyFrom(const WeChatLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeChatLoginReq::IsInitialized() const {

  return true;
}

void WeChatLoginReq::Swap(WeChatLoginReq* other) {
  if (other != this) {
    std::swap(sign_, other->sign_);
    std::swap(openid_, other->openid_);
    std::swap(token_, other->token_);
    std::swap(expire_date_, other->expire_date_);
    std::swap(channel_, other->channel_);
    std::swap(version_, other->version_);
    std::swap(os_, other->os_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeChatLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeChatLoginReq_descriptor_;
  metadata.reflection = WeChatLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRsp::kUinFieldNumber;
const int LoginRsp::kPasswordFieldNumber;
const int LoginRsp::kNickFieldNumber;
const int LoginRsp::kSexFieldNumber;
const int LoginRsp::kOldDeskidFieldNumber;
const int LoginRsp::kPortraitFieldNumber;
const int LoginRsp::kWxPublicIdFieldNumber;
const int LoginRsp::kWxAgentIdFieldNumber;
const int LoginRsp::kIpFieldNumber;
const int LoginRsp::kRoomCardFieldNumber;
const int LoginRsp::kRetFieldNumber;
const int LoginRsp::kWyYunxinTokenFieldNumber;
const int LoginRsp::kHallBillbandFieldNumber;
#endif  // !_MSC_VER

LoginRsp::LoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRsp::InitAsDefaultInstance() {
}

LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRsp::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  old_deskid_ = 0;
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wx_public_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wx_agent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_card_ = 0;
  ret_ = 0;
  wy_yunxin_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hall_billband_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsp::~LoginRsp() {
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (portrait_ != &::google::protobuf::internal::kEmptyString) {
    delete portrait_;
  }
  if (wx_public_id_ != &::google::protobuf::internal::kEmptyString) {
    delete wx_public_id_;
  }
  if (wx_agent_id_ != &::google::protobuf::internal::kEmptyString) {
    delete wx_agent_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (wy_yunxin_token_ != &::google::protobuf::internal::kEmptyString) {
    delete wy_yunxin_token_;
  }
  if (hall_billband_ != &::google::protobuf::internal::kEmptyString) {
    delete hall_billband_;
  }
  if (this != default_instance_) {
  }
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRsp_descriptor_;
}

const LoginRsp& LoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

LoginRsp* LoginRsp::default_instance_ = NULL;

LoginRsp* LoginRsp::New() const {
  return new LoginRsp;
}

void LoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    sex_ = 0;
    old_deskid_ = 0;
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::kEmptyString) {
        portrait_->clear();
      }
    }
    if (has_wx_public_id()) {
      if (wx_public_id_ != &::google::protobuf::internal::kEmptyString) {
        wx_public_id_->clear();
      }
    }
    if (has_wx_agent_id()) {
      if (wx_agent_id_ != &::google::protobuf::internal::kEmptyString) {
        wx_agent_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    room_card_ = 0;
    ret_ = 0;
    if (has_wy_yunxin_token()) {
      if (wy_yunxin_token_ != &::google::protobuf::internal::kEmptyString) {
        wy_yunxin_token_->clear();
      }
    }
    if (has_hall_billband()) {
      if (hall_billband_ != &::google::protobuf::internal::kEmptyString) {
        hall_billband_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick;
        break;
      }

      // optional string nick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_deskid;
        break;
      }

      // optional int32 old_deskid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_deskid_)));
          set_has_old_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_portrait;
        break;
      }

      // optional string portrait = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_wx_public_id;
        break;
      }

      // optional string wx_public_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wx_public_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wx_public_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wx_public_id().data(), this->wx_public_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_wx_agent_id;
        break;
      }

      // optional string wx_agent_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wx_agent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wx_agent_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wx_agent_id().data(), this->wx_agent_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ip;
        break;
      }

      // optional string ip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_room_card;
        break;
      }

      // optional int32 room_card = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_card_)));
          set_has_room_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ret;
        break;
      }

      // optional int32 ret = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_wy_yunxin_token;
        break;
      }

      // optional string wy_yunxin_token = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wy_yunxin_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wy_yunxin_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wy_yunxin_token().data(), this->wy_yunxin_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_hall_billband;
        break;
      }

      // optional string hall_billband = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hall_billband:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hall_billband()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hall_billband().data(), this->hall_billband().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional int32 old_deskid = 5;
  if (has_old_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->old_deskid(), output);
  }

  // optional string portrait = 7;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->portrait(), output);
  }

  // optional string wx_public_id = 8;
  if (has_wx_public_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wx_public_id().data(), this->wx_public_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->wx_public_id(), output);
  }

  // optional string wx_agent_id = 9;
  if (has_wx_agent_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wx_agent_id().data(), this->wx_agent_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->wx_agent_id(), output);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->ip(), output);
  }

  // optional int32 room_card = 11;
  if (has_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->room_card(), output);
  }

  // optional int32 ret = 12;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ret(), output);
  }

  // optional string wy_yunxin_token = 13;
  if (has_wy_yunxin_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wy_yunxin_token().data(), this->wy_yunxin_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->wy_yunxin_token(), output);
  }

  // optional string hall_billband = 14;
  if (has_hall_billband()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hall_billband().data(), this->hall_billband().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->hall_billband(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional int32 old_deskid = 5;
  if (has_old_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->old_deskid(), target);
  }

  // optional string portrait = 7;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->portrait(), target);
  }

  // optional string wx_public_id = 8;
  if (has_wx_public_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wx_public_id().data(), this->wx_public_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->wx_public_id(), target);
  }

  // optional string wx_agent_id = 9;
  if (has_wx_agent_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wx_agent_id().data(), this->wx_agent_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->wx_agent_id(), target);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip(), target);
  }

  // optional int32 room_card = 11;
  if (has_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->room_card(), target);
  }

  // optional int32 ret = 12;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ret(), target);
  }

  // optional string wy_yunxin_token = 13;
  if (has_wy_yunxin_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wy_yunxin_token().data(), this->wy_yunxin_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->wy_yunxin_token(), target);
  }

  // optional string hall_billband = 14;
  if (has_hall_billband()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hall_billband().data(), this->hall_billband().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->hall_billband(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 old_deskid = 5;
    if (has_old_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_deskid());
    }

    // optional string portrait = 7;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

    // optional string wx_public_id = 8;
    if (has_wx_public_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wx_public_id());
    }

    // optional string wx_agent_id = 9;
    if (has_wx_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wx_agent_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 10;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 room_card = 11;
    if (has_room_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_card());
    }

    // optional int32 ret = 12;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional string wy_yunxin_token = 13;
    if (has_wy_yunxin_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wy_yunxin_token());
    }

    // optional string hall_billband = 14;
    if (has_hall_billband()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hall_billband());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_old_deskid()) {
      set_old_deskid(from.old_deskid());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_wx_public_id()) {
      set_wx_public_id(from.wx_public_id());
    }
    if (from.has_wx_agent_id()) {
      set_wx_agent_id(from.wx_agent_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_room_card()) {
      set_room_card(from.room_card());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_wy_yunxin_token()) {
      set_wy_yunxin_token(from.wy_yunxin_token());
    }
    if (from.has_hall_billband()) {
      set_hall_billband(from.hall_billband());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {

  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(password_, other->password_);
    std::swap(nick_, other->nick_);
    std::swap(sex_, other->sex_);
    std::swap(old_deskid_, other->old_deskid_);
    std::swap(portrait_, other->portrait_);
    std::swap(wx_public_id_, other->wx_public_id_);
    std::swap(wx_agent_id_, other->wx_agent_id_);
    std::swap(ip_, other->ip_);
    std::swap(room_card_, other->room_card_);
    std::swap(ret_, other->ret_);
    std::swap(wy_yunxin_token_, other->wy_yunxin_token_);
    std::swap(hall_billband_, other->hall_billband_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRsp_descriptor_;
  metadata.reflection = LoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtraDeskTypeInfo::kHongzhongFieldNumber;
const int ExtraDeskTypeInfo::kQiduiFieldNumber;
const int ExtraDeskTypeInfo::kZhuaniaoFieldNumber;
const int ExtraDeskTypeInfo::kPiaofenFieldNumber;
const int ExtraDeskTypeInfo::kShanghuoFieldNumber;
#endif  // !_MSC_VER

ExtraDeskTypeInfo::ExtraDeskTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraDeskTypeInfo::InitAsDefaultInstance() {
}

ExtraDeskTypeInfo::ExtraDeskTypeInfo(const ExtraDeskTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraDeskTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  hongzhong_ = false;
  qidui_ = false;
  zhuaniao_ = 0;
  piaofen_ = 0;
  shanghuo_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraDeskTypeInfo::~ExtraDeskTypeInfo() {
  SharedDtor();
}

void ExtraDeskTypeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExtraDeskTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraDeskTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraDeskTypeInfo_descriptor_;
}

const ExtraDeskTypeInfo& ExtraDeskTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

ExtraDeskTypeInfo* ExtraDeskTypeInfo::default_instance_ = NULL;

ExtraDeskTypeInfo* ExtraDeskTypeInfo::New() const {
  return new ExtraDeskTypeInfo;
}

void ExtraDeskTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hongzhong_ = false;
    qidui_ = false;
    zhuaniao_ = 0;
    piaofen_ = 0;
    shanghuo_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraDeskTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hongzhong = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hongzhong_)));
          set_has_hongzhong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qidui;
        break;
      }

      // optional bool qidui = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qidui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qidui_)));
          set_has_qidui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zhuaniao;
        break;
      }

      // optional int32 zhuaniao = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhuaniao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhuaniao_)));
          set_has_zhuaniao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_piaofen;
        break;
      }

      // optional int32 piaofen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaofen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaofen_)));
          set_has_piaofen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shanghuo;
        break;
      }

      // optional bool shanghuo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shanghuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shanghuo_)));
          set_has_shanghuo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraDeskTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hongzhong = 1;
  if (has_hongzhong()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hongzhong(), output);
  }

  // optional bool qidui = 2;
  if (has_qidui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->qidui(), output);
  }

  // optional int32 zhuaniao = 3;
  if (has_zhuaniao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zhuaniao(), output);
  }

  // optional int32 piaofen = 4;
  if (has_piaofen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->piaofen(), output);
  }

  // optional bool shanghuo = 5;
  if (has_shanghuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->shanghuo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraDeskTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hongzhong = 1;
  if (has_hongzhong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hongzhong(), target);
  }

  // optional bool qidui = 2;
  if (has_qidui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->qidui(), target);
  }

  // optional int32 zhuaniao = 3;
  if (has_zhuaniao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zhuaniao(), target);
  }

  // optional int32 piaofen = 4;
  if (has_piaofen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->piaofen(), target);
  }

  // optional bool shanghuo = 5;
  if (has_shanghuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->shanghuo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraDeskTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hongzhong = 1;
    if (has_hongzhong()) {
      total_size += 1 + 1;
    }

    // optional bool qidui = 2;
    if (has_qidui()) {
      total_size += 1 + 1;
    }

    // optional int32 zhuaniao = 3;
    if (has_zhuaniao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhuaniao());
    }

    // optional int32 piaofen = 4;
    if (has_piaofen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaofen());
    }

    // optional bool shanghuo = 5;
    if (has_shanghuo()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraDeskTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraDeskTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraDeskTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraDeskTypeInfo::MergeFrom(const ExtraDeskTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hongzhong()) {
      set_hongzhong(from.hongzhong());
    }
    if (from.has_qidui()) {
      set_qidui(from.qidui());
    }
    if (from.has_zhuaniao()) {
      set_zhuaniao(from.zhuaniao());
    }
    if (from.has_piaofen()) {
      set_piaofen(from.piaofen());
    }
    if (from.has_shanghuo()) {
      set_shanghuo(from.shanghuo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraDeskTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraDeskTypeInfo::CopyFrom(const ExtraDeskTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraDeskTypeInfo::IsInitialized() const {

  return true;
}

void ExtraDeskTypeInfo::Swap(ExtraDeskTypeInfo* other) {
  if (other != this) {
    std::swap(hongzhong_, other->hongzhong_);
    std::swap(qidui_, other->qidui_);
    std::swap(zhuaniao_, other->zhuaniao_);
    std::swap(piaofen_, other->piaofen_);
    std::swap(shanghuo_, other->shanghuo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraDeskTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraDeskTypeInfo_descriptor_;
  metadata.reflection = ExtraDeskTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEnterDeskReq::kDstDeskIdFieldNumber;
const int GameEnterDeskReq::kNewDeskFieldNumber;
const int GameEnterDeskReq::kReconnectFieldNumber;
const int GameEnterDeskReq::kCardNumFieldNumber;
const int GameEnterDeskReq::kDeskTypeFieldNumber;
const int GameEnterDeskReq::kSeatLimitFieldNumber;
const int GameEnterDeskReq::kWinTypeFieldNumber;
const int GameEnterDeskReq::kExtraTypeFieldNumber;
#endif  // !_MSC_VER

GameEnterDeskReq::GameEnterDeskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEnterDeskReq::InitAsDefaultInstance() {
  extra_type_ = const_cast< ::ExtraDeskTypeInfo*>(&::ExtraDeskTypeInfo::default_instance());
}

GameEnterDeskReq::GameEnterDeskReq(const GameEnterDeskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEnterDeskReq::SharedCtor() {
  _cached_size_ = 0;
  dst_desk_id_ = 0;
  new_desk_ = 0;
  reconnect_ = 0;
  card_num_ = 0;
  desk_type_ = 0;
  seat_limit_ = 0;
  win_type_ = 0;
  extra_type_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEnterDeskReq::~GameEnterDeskReq() {
  SharedDtor();
}

void GameEnterDeskReq::SharedDtor() {
  if (this != default_instance_) {
    delete extra_type_;
  }
}

void GameEnterDeskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEnterDeskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEnterDeskReq_descriptor_;
}

const GameEnterDeskReq& GameEnterDeskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameEnterDeskReq* GameEnterDeskReq::default_instance_ = NULL;

GameEnterDeskReq* GameEnterDeskReq::New() const {
  return new GameEnterDeskReq;
}

void GameEnterDeskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_desk_id_ = 0;
    new_desk_ = 0;
    reconnect_ = 0;
    card_num_ = 0;
    desk_type_ = 0;
    seat_limit_ = 0;
    win_type_ = 0;
    if (has_extra_type()) {
      if (extra_type_ != NULL) extra_type_->::ExtraDeskTypeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEnterDeskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dst_desk_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_desk_id_)));
          set_has_dst_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_desk;
        break;
      }

      // optional int32 new_desk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_desk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_desk_)));
          set_has_new_desk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reconnect;
        break;
      }

      // optional int32 reconnect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reconnect_)));
          set_has_reconnect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_card_num;
        break;
      }

      // optional int32 card_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_num_)));
          set_has_card_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_desk_type;
        break;
      }

      // optional int32 desk_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_type_)));
          set_has_desk_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seat_limit;
        break;
      }

      // optional int32 seat_limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_limit_)));
          set_has_seat_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_win_type;
        break;
      }

      // optional int32 win_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_type_)));
          set_has_win_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_extra_type;
        break;
      }

      // optional .ExtraDeskTypeInfo extra_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEnterDeskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dst_desk_id = 1;
  if (has_dst_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dst_desk_id(), output);
  }

  // optional int32 new_desk = 2;
  if (has_new_desk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_desk(), output);
  }

  // optional int32 reconnect = 3;
  if (has_reconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reconnect(), output);
  }

  // optional int32 card_num = 4;
  if (has_card_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->card_num(), output);
  }

  // optional int32 desk_type = 5;
  if (has_desk_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->desk_type(), output);
  }

  // optional int32 seat_limit = 6;
  if (has_seat_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seat_limit(), output);
  }

  // optional int32 win_type = 7;
  if (has_win_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->win_type(), output);
  }

  // optional .ExtraDeskTypeInfo extra_type = 8;
  if (has_extra_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->extra_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEnterDeskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dst_desk_id = 1;
  if (has_dst_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dst_desk_id(), target);
  }

  // optional int32 new_desk = 2;
  if (has_new_desk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_desk(), target);
  }

  // optional int32 reconnect = 3;
  if (has_reconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reconnect(), target);
  }

  // optional int32 card_num = 4;
  if (has_card_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->card_num(), target);
  }

  // optional int32 desk_type = 5;
  if (has_desk_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->desk_type(), target);
  }

  // optional int32 seat_limit = 6;
  if (has_seat_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seat_limit(), target);
  }

  // optional int32 win_type = 7;
  if (has_win_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->win_type(), target);
  }

  // optional .ExtraDeskTypeInfo extra_type = 8;
  if (has_extra_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->extra_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEnterDeskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dst_desk_id = 1;
    if (has_dst_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_desk_id());
    }

    // optional int32 new_desk = 2;
    if (has_new_desk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_desk());
    }

    // optional int32 reconnect = 3;
    if (has_reconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reconnect());
    }

    // optional int32 card_num = 4;
    if (has_card_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_num());
    }

    // optional int32 desk_type = 5;
    if (has_desk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_type());
    }

    // optional int32 seat_limit = 6;
    if (has_seat_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_limit());
    }

    // optional int32 win_type = 7;
    if (has_win_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_type());
    }

    // optional .ExtraDeskTypeInfo extra_type = 8;
    if (has_extra_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEnterDeskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEnterDeskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEnterDeskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEnterDeskReq::MergeFrom(const GameEnterDeskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_desk_id()) {
      set_dst_desk_id(from.dst_desk_id());
    }
    if (from.has_new_desk()) {
      set_new_desk(from.new_desk());
    }
    if (from.has_reconnect()) {
      set_reconnect(from.reconnect());
    }
    if (from.has_card_num()) {
      set_card_num(from.card_num());
    }
    if (from.has_desk_type()) {
      set_desk_type(from.desk_type());
    }
    if (from.has_seat_limit()) {
      set_seat_limit(from.seat_limit());
    }
    if (from.has_win_type()) {
      set_win_type(from.win_type());
    }
    if (from.has_extra_type()) {
      mutable_extra_type()->::ExtraDeskTypeInfo::MergeFrom(from.extra_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEnterDeskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEnterDeskReq::CopyFrom(const GameEnterDeskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEnterDeskReq::IsInitialized() const {

  return true;
}

void GameEnterDeskReq::Swap(GameEnterDeskReq* other) {
  if (other != this) {
    std::swap(dst_desk_id_, other->dst_desk_id_);
    std::swap(new_desk_, other->new_desk_);
    std::swap(reconnect_, other->reconnect_);
    std::swap(card_num_, other->card_num_);
    std::swap(desk_type_, other->desk_type_);
    std::swap(seat_limit_, other->seat_limit_);
    std::swap(win_type_, other->win_type_);
    std::swap(extra_type_, other->extra_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEnterDeskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEnterDeskReq_descriptor_;
  metadata.reflection = GameEnterDeskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEnterDeskRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GameEnterDeskRsp::GameEnterDeskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameEnterDeskRsp::InitAsDefaultInstance() {
}

GameEnterDeskRsp::GameEnterDeskRsp(const GameEnterDeskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameEnterDeskRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEnterDeskRsp::~GameEnterDeskRsp() {
  SharedDtor();
}

void GameEnterDeskRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEnterDeskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEnterDeskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEnterDeskRsp_descriptor_;
}

const GameEnterDeskRsp& GameEnterDeskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameEnterDeskRsp* GameEnterDeskRsp::default_instance_ = NULL;

GameEnterDeskRsp* GameEnterDeskRsp::New() const {
  return new GameEnterDeskRsp;
}

void GameEnterDeskRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEnterDeskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameEnterDeskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameEnterDeskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameEnterDeskRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEnterDeskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEnterDeskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEnterDeskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEnterDeskRsp::MergeFrom(const GameEnterDeskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEnterDeskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEnterDeskRsp::CopyFrom(const GameEnterDeskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEnterDeskRsp::IsInitialized() const {

  return true;
}

void GameEnterDeskRsp::Swap(GameEnterDeskRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEnterDeskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEnterDeskRsp_descriptor_;
  metadata.reflection = GameEnterDeskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRoomCardChange::kRoomCardFieldNumber;
const int UserRoomCardChange::kChangeReasonFieldNumber;
#endif  // !_MSC_VER

UserRoomCardChange::UserRoomCardChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserRoomCardChange::InitAsDefaultInstance() {
}

UserRoomCardChange::UserRoomCardChange(const UserRoomCardChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserRoomCardChange::SharedCtor() {
  _cached_size_ = 0;
  room_card_ = 0;
  change_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRoomCardChange::~UserRoomCardChange() {
  SharedDtor();
}

void UserRoomCardChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserRoomCardChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRoomCardChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRoomCardChange_descriptor_;
}

const UserRoomCardChange& UserRoomCardChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

UserRoomCardChange* UserRoomCardChange::default_instance_ = NULL;

UserRoomCardChange* UserRoomCardChange::New() const {
  return new UserRoomCardChange;
}

void UserRoomCardChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_card_ = 0;
    change_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRoomCardChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_card_)));
          set_has_room_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_reason;
        break;
      }

      // optional int32 change_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_reason_)));
          set_has_change_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserRoomCardChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 room_card = 1;
  if (has_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_card(), output);
  }

  // optional int32 change_reason = 2;
  if (has_change_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->change_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserRoomCardChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 room_card = 1;
  if (has_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_card(), target);
  }

  // optional int32 change_reason = 2;
  if (has_change_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->change_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserRoomCardChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 room_card = 1;
    if (has_room_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_card());
    }

    // optional int32 change_reason = 2;
    if (has_change_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRoomCardChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRoomCardChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRoomCardChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRoomCardChange::MergeFrom(const UserRoomCardChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_card()) {
      set_room_card(from.room_card());
    }
    if (from.has_change_reason()) {
      set_change_reason(from.change_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRoomCardChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRoomCardChange::CopyFrom(const UserRoomCardChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRoomCardChange::IsInitialized() const {

  return true;
}

void UserRoomCardChange::Swap(UserRoomCardChange* other) {
  if (other != this) {
    std::swap(room_card_, other->room_card_);
    std::swap(change_reason_, other->change_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRoomCardChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRoomCardChange_descriptor_;
  metadata.reflection = UserRoomCardChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameUserInfo::kStatusFieldNumber;
const int GameUserInfo::kUinFieldNumber;
const int GameUserInfo::kNickFieldNumber;
const int GameUserInfo::kSeatidFieldNumber;
const int GameUserInfo::kSexFieldNumber;
const int GameUserInfo::kPortraitFieldNumber;
const int GameUserInfo::kIsMasterFieldNumber;
const int GameUserInfo::kPiaofenFieldNumber;
const int GameUserInfo::kShanghuoFieldNumber;
const int GameUserInfo::kIpFieldNumber;
#endif  // !_MSC_VER

GameUserInfo::GameUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameUserInfo::InitAsDefaultInstance() {
}

GameUserInfo::GameUserInfo(const GameUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameUserInfo::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  uin_ = 0;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seatid_ = 0;
  sex_ = 0;
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_master_ = 0;
  piaofen_ = 0;
  shanghuo_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUserInfo::~GameUserInfo() {
  SharedDtor();
}

void GameUserInfo::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (portrait_ != &::google::protobuf::internal::kEmptyString) {
    delete portrait_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GameUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameUserInfo_descriptor_;
}

const GameUserInfo& GameUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameUserInfo* GameUserInfo::default_instance_ = NULL;

GameUserInfo* GameUserInfo::New() const {
  return new GameUserInfo;
}

void GameUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    uin_ = 0;
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    seatid_ = 0;
    sex_ = 0;
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::kEmptyString) {
        portrait_->clear();
      }
    }
    is_master_ = 0;
    piaofen_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    shanghuo_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional int32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick;
        break;
      }

      // optional string nick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_portrait;
        break;
      }

      // optional string portrait = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_master;
        break;
      }

      // optional int32 is_master = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_master_)));
          set_has_is_master();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_piaofen;
        break;
      }

      // optional int32 piaofen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaofen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaofen_)));
          set_has_piaofen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_shanghuo;
        break;
      }

      // optional int32 shanghuo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shanghuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shanghuo_)));
          set_has_shanghuo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ip;
        break;
      }

      // optional string ip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uin(), output);
  }

  // optional string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick(), output);
  }

  // optional int32 seatid = 4;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seatid(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional string portrait = 6;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->portrait(), output);
  }

  // optional int32 is_master = 7;
  if (has_is_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_master(), output);
  }

  // optional int32 piaofen = 8;
  if (has_piaofen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->piaofen(), output);
  }

  // optional int32 shanghuo = 9;
  if (has_shanghuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->shanghuo(), output);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uin(), target);
  }

  // optional string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  // optional int32 seatid = 4;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seatid(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional string portrait = 6;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->portrait(), target);
  }

  // optional int32 is_master = 7;
  if (has_is_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_master(), target);
  }

  // optional int32 piaofen = 8;
  if (has_piaofen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->piaofen(), target);
  }

  // optional int32 shanghuo = 9;
  if (has_shanghuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->shanghuo(), target);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional string nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional int32 seatid = 4;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string portrait = 6;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

    // optional int32 is_master = 7;
    if (has_is_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_master());
    }

    // optional int32 piaofen = 8;
    if (has_piaofen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaofen());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 shanghuo = 9;
    if (has_shanghuo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shanghuo());
    }

    // optional string ip = 10;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameUserInfo::MergeFrom(const GameUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_is_master()) {
      set_is_master(from.is_master());
    }
    if (from.has_piaofen()) {
      set_piaofen(from.piaofen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shanghuo()) {
      set_shanghuo(from.shanghuo());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameUserInfo::CopyFrom(const GameUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserInfo::IsInitialized() const {

  return true;
}

void GameUserInfo::Swap(GameUserInfo* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(uin_, other->uin_);
    std::swap(nick_, other->nick_);
    std::swap(seatid_, other->seatid_);
    std::swap(sex_, other->sex_);
    std::swap(portrait_, other->portrait_);
    std::swap(is_master_, other->is_master_);
    std::swap(piaofen_, other->piaofen_);
    std::swap(shanghuo_, other->shanghuo_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameUserInfo_descriptor_;
  metadata.reflection = GameUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserCommonCards::kUinFieldNumber;
const int UserCommonCards::kCardLenFieldNumber;
const int UserCommonCards::kOutCardsFieldNumber;
const int UserCommonCards::kDiscardFieldNumber;
const int UserCommonCards::kSeatidFieldNumber;
const int UserCommonCards::kStatusFieldNumber;
const int UserCommonCards::kOpListFieldNumber;
const int UserCommonCards::kChipsFieldNumber;
#endif  // !_MSC_VER

UserCommonCards::UserCommonCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserCommonCards::InitAsDefaultInstance() {
}

UserCommonCards::UserCommonCards(const UserCommonCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserCommonCards::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  card_len_ = 0;
  seatid_ = 0;
  status_ = 0;
  chips_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCommonCards::~UserCommonCards() {
  SharedDtor();
}

void UserCommonCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCommonCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCommonCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCommonCards_descriptor_;
}

const UserCommonCards& UserCommonCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

UserCommonCards* UserCommonCards::default_instance_ = NULL;

UserCommonCards* UserCommonCards::New() const {
  return new UserCommonCards;
}

void UserCommonCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    card_len_ = 0;
    seatid_ = 0;
    status_ = 0;
    chips_ = 0;
  }
  out_cards_.Clear();
  discard_.Clear();
  op_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCommonCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_len;
        break;
      }

      // optional int32 card_len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_len_)));
          set_has_card_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_cards;
        break;
      }

      // repeated int32 out_cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_out_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_out_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_out_cards;
        if (input->ExpectTag(32)) goto parse_discard;
        break;
      }

      // repeated int32 discard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_discard())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_discard())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_discard;
        if (input->ExpectTag(40)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional int32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_op_list;
        break;
      }

      // repeated int32 op_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_op_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_op_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_op_list;
        if (input->ExpectTag(64)) goto parse_chips;
        break;
      }

      // optional int32 chips = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserCommonCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional int32 card_len = 2;
  if (has_card_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_len(), output);
  }

  // repeated int32 out_cards = 3;
  for (int i = 0; i < this->out_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->out_cards(i), output);
  }

  // repeated int32 discard = 4;
  for (int i = 0; i < this->discard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->discard(i), output);
  }

  // optional int32 seatid = 5;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seatid(), output);
  }

  // optional int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // repeated int32 op_list = 7;
  for (int i = 0; i < this->op_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->op_list(i), output);
  }

  // optional int32 chips = 8;
  if (has_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->chips(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserCommonCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional int32 card_len = 2;
  if (has_card_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_len(), target);
  }

  // repeated int32 out_cards = 3;
  for (int i = 0; i < this->out_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->out_cards(i), target);
  }

  // repeated int32 discard = 4;
  for (int i = 0; i < this->discard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->discard(i), target);
  }

  // optional int32 seatid = 5;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seatid(), target);
  }

  // optional int32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // repeated int32 op_list = 7;
  for (int i = 0; i < this->op_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->op_list(i), target);
  }

  // optional int32 chips = 8;
  if (has_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->chips(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserCommonCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional int32 card_len = 2;
    if (has_card_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_len());
    }

    // optional int32 seatid = 5;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 chips = 8;
    if (has_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chips());
    }

  }
  // repeated int32 out_cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->out_cards(i));
    }
    total_size += 1 * this->out_cards_size() + data_size;
  }

  // repeated int32 discard = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->discard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->discard(i));
    }
    total_size += 1 * this->discard_size() + data_size;
  }

  // repeated int32 op_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->op_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->op_list(i));
    }
    total_size += 1 * this->op_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCommonCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCommonCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCommonCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCommonCards::MergeFrom(const UserCommonCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  out_cards_.MergeFrom(from.out_cards_);
  discard_.MergeFrom(from.discard_);
  op_list_.MergeFrom(from.op_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_card_len()) {
      set_card_len(from.card_len());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_chips()) {
      set_chips(from.chips());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCommonCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCommonCards::CopyFrom(const UserCommonCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCommonCards::IsInitialized() const {

  return true;
}

void UserCommonCards::Swap(UserCommonCards* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(card_len_, other->card_len_);
    out_cards_.Swap(&other->out_cards_);
    discard_.Swap(&other->discard_);
    std::swap(seatid_, other->seatid_);
    std::swap(status_, other->status_);
    op_list_.Swap(&other->op_list_);
    std::swap(chips_, other->chips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCommonCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCommonCards_descriptor_;
  metadata.reflection = UserCommonCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyOption::kOpChiFieldNumber;
const int MyOption::kOpPengFieldNumber;
const int MyOption::kOpGangFieldNumber;
const int MyOption::kOpHuFieldNumber;
const int MyOption::kNeedWaitFieldNumber;
const int MyOption::kChiCardsFieldNumber;
#endif  // !_MSC_VER

MyOption::MyOption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyOption::InitAsDefaultInstance() {
}

MyOption::MyOption(const MyOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyOption::SharedCtor() {
  _cached_size_ = 0;
  op_chi_ = false;
  op_peng_ = false;
  op_gang_ = false;
  op_hu_ = false;
  need_wait_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyOption::~MyOption() {
  SharedDtor();
}

void MyOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyOption_descriptor_;
}

const MyOption& MyOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MyOption* MyOption::default_instance_ = NULL;

MyOption* MyOption::New() const {
  return new MyOption;
}

void MyOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_chi_ = false;
    op_peng_ = false;
    op_gang_ = false;
    op_hu_ = false;
    need_wait_ = false;
  }
  chi_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool op_chi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &op_chi_)));
          set_has_op_chi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op_peng;
        break;
      }

      // optional bool op_peng = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_peng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &op_peng_)));
          set_has_op_peng();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op_gang;
        break;
      }

      // optional bool op_gang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_gang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &op_gang_)));
          set_has_op_gang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_op_hu;
        break;
      }

      // optional bool op_hu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &op_hu_)));
          set_has_op_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_need_wait;
        break;
      }

      // optional bool need_wait = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_wait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_wait_)));
          set_has_need_wait();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chi_cards;
        break;
      }

      // repeated int32 chi_cards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chi_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_chi_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chi_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chi_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool op_chi = 1;
  if (has_op_chi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->op_chi(), output);
  }

  // optional bool op_peng = 2;
  if (has_op_peng()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->op_peng(), output);
  }

  // optional bool op_gang = 3;
  if (has_op_gang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->op_gang(), output);
  }

  // optional bool op_hu = 4;
  if (has_op_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->op_hu(), output);
  }

  // optional bool need_wait = 5;
  if (has_need_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->need_wait(), output);
  }

  // repeated int32 chi_cards = 6;
  for (int i = 0; i < this->chi_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->chi_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool op_chi = 1;
  if (has_op_chi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->op_chi(), target);
  }

  // optional bool op_peng = 2;
  if (has_op_peng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->op_peng(), target);
  }

  // optional bool op_gang = 3;
  if (has_op_gang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->op_gang(), target);
  }

  // optional bool op_hu = 4;
  if (has_op_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->op_hu(), target);
  }

  // optional bool need_wait = 5;
  if (has_need_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->need_wait(), target);
  }

  // repeated int32 chi_cards = 6;
  for (int i = 0; i < this->chi_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->chi_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool op_chi = 1;
    if (has_op_chi()) {
      total_size += 1 + 1;
    }

    // optional bool op_peng = 2;
    if (has_op_peng()) {
      total_size += 1 + 1;
    }

    // optional bool op_gang = 3;
    if (has_op_gang()) {
      total_size += 1 + 1;
    }

    // optional bool op_hu = 4;
    if (has_op_hu()) {
      total_size += 1 + 1;
    }

    // optional bool need_wait = 5;
    if (has_need_wait()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 chi_cards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->chi_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chi_cards(i));
    }
    total_size += 1 * this->chi_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyOption::MergeFrom(const MyOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  chi_cards_.MergeFrom(from.chi_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_chi()) {
      set_op_chi(from.op_chi());
    }
    if (from.has_op_peng()) {
      set_op_peng(from.op_peng());
    }
    if (from.has_op_gang()) {
      set_op_gang(from.op_gang());
    }
    if (from.has_op_hu()) {
      set_op_hu(from.op_hu());
    }
    if (from.has_need_wait()) {
      set_need_wait(from.need_wait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyOption::CopyFrom(const MyOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyOption::IsInitialized() const {

  return true;
}

void MyOption::Swap(MyOption* other) {
  if (other != this) {
    std::swap(op_chi_, other->op_chi_);
    std::swap(op_peng_, other->op_peng_);
    std::swap(op_gang_, other->op_gang_);
    std::swap(op_hu_, other->op_hu_);
    std::swap(need_wait_, other->need_wait_);
    chi_cards_.Swap(&other->chi_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyOption_descriptor_;
  metadata.reflection = MyOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EvtDeskUserEnter::kDeskidFieldNumber;
const int EvtDeskUserEnter::kOpUinFieldNumber;
const int EvtDeskUserEnter::kStatusFieldNumber;
const int EvtDeskUserEnter::kMaxRoundFieldNumber;
const int EvtDeskUserEnter::kUsersFieldNumber;
const int EvtDeskUserEnter::kNextUinFieldNumber;
const int EvtDeskUserEnter::kDealerSeatidFieldNumber;
const int EvtDeskUserEnter::kCardsFieldNumber;
const int EvtDeskUserEnter::kInUsersFieldNumber;
const int EvtDeskUserEnter::kShareCardsLenFieldNumber;
const int EvtDeskUserEnter::kGameRoundFieldNumber;
const int EvtDeskUserEnter::kMyOptionFieldNumber;
const int EvtDeskUserEnter::kRecvCardUinFieldNumber;
const int EvtDeskUserEnter::kDeskRemainRoundFieldNumber;
const int EvtDeskUserEnter::kSeatNumFieldNumber;
const int EvtDeskUserEnter::kRemainTimeFieldNumber;
const int EvtDeskUserEnter::kApplyUinFieldNumber;
const int EvtDeskUserEnter::kWinTypeFieldNumber;
const int EvtDeskUserEnter::kExtraTypeFieldNumber;
const int EvtDeskUserEnter::kTypeFieldNumber;
const int EvtDeskUserEnter::kPreRemainTimeFieldNumber;
#endif  // !_MSC_VER

EvtDeskUserEnter::EvtDeskUserEnter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EvtDeskUserEnter::InitAsDefaultInstance() {
  my_option_ = const_cast< ::MyOption*>(&::MyOption::default_instance());
  extra_type_ = const_cast< ::ExtraDeskTypeInfo*>(&::ExtraDeskTypeInfo::default_instance());
}

EvtDeskUserEnter::EvtDeskUserEnter(const EvtDeskUserEnter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EvtDeskUserEnter::SharedCtor() {
  _cached_size_ = 0;
  deskid_ = 0;
  op_uin_ = 0;
  status_ = 0;
  max_round_ = 0;
  next_uin_ = 0;
  dealer_seatid_ = 0;
  share_cards_len_ = 0;
  game_round_ = 0;
  my_option_ = NULL;
  recv_card_uin_ = 0;
  desk_remain_round_ = 0;
  seat_num_ = 0;
  remain_time_ = 0;
  apply_uin_ = 0;
  win_type_ = 0;
  extra_type_ = NULL;
  type_ = 0;
  pre_remain_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvtDeskUserEnter::~EvtDeskUserEnter() {
  SharedDtor();
}

void EvtDeskUserEnter::SharedDtor() {
  if (this != default_instance_) {
    delete my_option_;
    delete extra_type_;
  }
}

void EvtDeskUserEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvtDeskUserEnter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvtDeskUserEnter_descriptor_;
}

const EvtDeskUserEnter& EvtDeskUserEnter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

EvtDeskUserEnter* EvtDeskUserEnter::default_instance_ = NULL;

EvtDeskUserEnter* EvtDeskUserEnter::New() const {
  return new EvtDeskUserEnter;
}

void EvtDeskUserEnter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deskid_ = 0;
    op_uin_ = 0;
    status_ = 0;
    max_round_ = 0;
    next_uin_ = 0;
    dealer_seatid_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    share_cards_len_ = 0;
    game_round_ = 0;
    if (has_my_option()) {
      if (my_option_ != NULL) my_option_->::MyOption::Clear();
    }
    recv_card_uin_ = 0;
    desk_remain_round_ = 0;
    seat_num_ = 0;
    remain_time_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    apply_uin_ = 0;
    win_type_ = 0;
    if (has_extra_type()) {
      if (extra_type_ != NULL) extra_type_->::ExtraDeskTypeInfo::Clear();
    }
    type_ = 0;
    pre_remain_time_ = 0;
  }
  users_.Clear();
  cards_.Clear();
  in_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvtDeskUserEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op_uin;
        break;
      }

      // optional int32 op_uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_uin_)));
          set_has_op_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_round;
        break;
      }

      // optional int32 max_round = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_round_)));
          set_has_max_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_users;
        break;
      }

      // repeated .GameUserInfo users = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_users;
        if (input->ExpectTag(48)) goto parse_next_uin;
        break;
      }

      // optional int32 next_uin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_uin_)));
          set_has_next_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dealer_seatid;
        break;
      }

      // optional int32 dealer_seatid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealer_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealer_seatid_)));
          set_has_dealer_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_in_users;
        break;
      }

      // repeated .UserCommonCards in_users = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_in_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_in_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_in_users;
        if (input->ExpectTag(80)) goto parse_share_cards_len;
        break;
      }

      // optional int32 share_cards_len = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_share_cards_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &share_cards_len_)));
          set_has_share_cards_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_game_round;
        break;
      }

      // optional int32 game_round = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_my_option;
        break;
      }

      // optional .MyOption my_option = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_recv_card_uin;
        break;
      }

      // optional int32 recv_card_uin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_card_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_card_uin_)));
          set_has_recv_card_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_desk_remain_round;
        break;
      }

      // optional int32 desk_remain_round = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_remain_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_remain_round_)));
          set_has_desk_remain_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_seat_num;
        break;
      }

      // optional int32 seat_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_num_)));
          set_has_seat_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_apply_uin;
        break;
      }

      // optional int32 apply_uin = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_uin_)));
          set_has_apply_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_win_type;
        break;
      }

      // optional int32 win_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_type_)));
          set_has_win_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_extra_type;
        break;
      }

      // optional .ExtraDeskTypeInfo extra_type = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_type;
        break;
      }

      // optional int32 type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_pre_remain_time;
        break;
      }

      // optional int32 pre_remain_time = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_remain_time_)));
          set_has_pre_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EvtDeskUserEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 deskid = 1;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deskid(), output);
  }

  // optional int32 op_uin = 2;
  if (has_op_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op_uin(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional int32 max_round = 4;
  if (has_max_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_round(), output);
  }

  // repeated .GameUserInfo users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->users(i), output);
  }

  // optional int32 next_uin = 6;
  if (has_next_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->next_uin(), output);
  }

  // optional int32 dealer_seatid = 7;
  if (has_dealer_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dealer_seatid(), output);
  }

  // repeated int32 cards = 8 [packed = true];
  if (this->cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cards_cached_byte_size_);
  }
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cards(i), output);
  }

  // repeated .UserCommonCards in_users = 9;
  for (int i = 0; i < this->in_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->in_users(i), output);
  }

  // optional int32 share_cards_len = 10;
  if (has_share_cards_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->share_cards_len(), output);
  }

  // optional int32 game_round = 11;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->game_round(), output);
  }

  // optional .MyOption my_option = 12;
  if (has_my_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->my_option(), output);
  }

  // optional int32 recv_card_uin = 13;
  if (has_recv_card_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->recv_card_uin(), output);
  }

  // optional int32 desk_remain_round = 14;
  if (has_desk_remain_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->desk_remain_round(), output);
  }

  // optional int32 seat_num = 15;
  if (has_seat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->seat_num(), output);
  }

  // optional int32 remain_time = 16;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->remain_time(), output);
  }

  // optional int32 apply_uin = 17;
  if (has_apply_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->apply_uin(), output);
  }

  // optional int32 win_type = 18;
  if (has_win_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->win_type(), output);
  }

  // optional .ExtraDeskTypeInfo extra_type = 19;
  if (has_extra_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->extra_type(), output);
  }

  // optional int32 type = 20;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->type(), output);
  }

  // optional int32 pre_remain_time = 21;
  if (has_pre_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->pre_remain_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EvtDeskUserEnter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 deskid = 1;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deskid(), target);
  }

  // optional int32 op_uin = 2;
  if (has_op_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op_uin(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // optional int32 max_round = 4;
  if (has_max_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_round(), target);
  }

  // repeated .GameUserInfo users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->users(i), target);
  }

  // optional int32 next_uin = 6;
  if (has_next_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->next_uin(), target);
  }

  // optional int32 dealer_seatid = 7;
  if (has_dealer_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dealer_seatid(), target);
  }

  // repeated int32 cards = 8 [packed = true];
  if (this->cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cards_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cards(i), target);
  }

  // repeated .UserCommonCards in_users = 9;
  for (int i = 0; i < this->in_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->in_users(i), target);
  }

  // optional int32 share_cards_len = 10;
  if (has_share_cards_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->share_cards_len(), target);
  }

  // optional int32 game_round = 11;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->game_round(), target);
  }

  // optional .MyOption my_option = 12;
  if (has_my_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->my_option(), target);
  }

  // optional int32 recv_card_uin = 13;
  if (has_recv_card_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->recv_card_uin(), target);
  }

  // optional int32 desk_remain_round = 14;
  if (has_desk_remain_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->desk_remain_round(), target);
  }

  // optional int32 seat_num = 15;
  if (has_seat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->seat_num(), target);
  }

  // optional int32 remain_time = 16;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->remain_time(), target);
  }

  // optional int32 apply_uin = 17;
  if (has_apply_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->apply_uin(), target);
  }

  // optional int32 win_type = 18;
  if (has_win_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->win_type(), target);
  }

  // optional .ExtraDeskTypeInfo extra_type = 19;
  if (has_extra_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->extra_type(), target);
  }

  // optional int32 type = 20;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->type(), target);
  }

  // optional int32 pre_remain_time = 21;
  if (has_pre_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->pre_remain_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EvtDeskUserEnter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deskid = 1;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 op_uin = 2;
    if (has_op_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_uin());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 max_round = 4;
    if (has_max_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_round());
    }

    // optional int32 next_uin = 6;
    if (has_next_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_uin());
    }

    // optional int32 dealer_seatid = 7;
    if (has_dealer_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealer_seatid());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 share_cards_len = 10;
    if (has_share_cards_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->share_cards_len());
    }

    // optional int32 game_round = 11;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional .MyOption my_option = 12;
    if (has_my_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_option());
    }

    // optional int32 recv_card_uin = 13;
    if (has_recv_card_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recv_card_uin());
    }

    // optional int32 desk_remain_round = 14;
    if (has_desk_remain_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_remain_round());
    }

    // optional int32 seat_num = 15;
    if (has_seat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_num());
    }

    // optional int32 remain_time = 16;
    if (has_remain_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 apply_uin = 17;
    if (has_apply_uin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_uin());
    }

    // optional int32 win_type = 18;
    if (has_win_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_type());
    }

    // optional .ExtraDeskTypeInfo extra_type = 19;
    if (has_extra_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_type());
    }

    // optional int32 type = 20;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 pre_remain_time = 21;
    if (has_pre_remain_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_remain_time());
    }

  }
  // repeated .GameUserInfo users = 5;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  // repeated int32 cards = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cards_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .UserCommonCards in_users = 9;
  total_size += 1 * this->in_users_size();
  for (int i = 0; i < this->in_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->in_users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvtDeskUserEnter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvtDeskUserEnter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvtDeskUserEnter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvtDeskUserEnter::MergeFrom(const EvtDeskUserEnter& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  cards_.MergeFrom(from.cards_);
  in_users_.MergeFrom(from.in_users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_op_uin()) {
      set_op_uin(from.op_uin());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_max_round()) {
      set_max_round(from.max_round());
    }
    if (from.has_next_uin()) {
      set_next_uin(from.next_uin());
    }
    if (from.has_dealer_seatid()) {
      set_dealer_seatid(from.dealer_seatid());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_share_cards_len()) {
      set_share_cards_len(from.share_cards_len());
    }
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_my_option()) {
      mutable_my_option()->::MyOption::MergeFrom(from.my_option());
    }
    if (from.has_recv_card_uin()) {
      set_recv_card_uin(from.recv_card_uin());
    }
    if (from.has_desk_remain_round()) {
      set_desk_remain_round(from.desk_remain_round());
    }
    if (from.has_seat_num()) {
      set_seat_num(from.seat_num());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_apply_uin()) {
      set_apply_uin(from.apply_uin());
    }
    if (from.has_win_type()) {
      set_win_type(from.win_type());
    }
    if (from.has_extra_type()) {
      mutable_extra_type()->::ExtraDeskTypeInfo::MergeFrom(from.extra_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pre_remain_time()) {
      set_pre_remain_time(from.pre_remain_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvtDeskUserEnter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvtDeskUserEnter::CopyFrom(const EvtDeskUserEnter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvtDeskUserEnter::IsInitialized() const {

  return true;
}

void EvtDeskUserEnter::Swap(EvtDeskUserEnter* other) {
  if (other != this) {
    std::swap(deskid_, other->deskid_);
    std::swap(op_uin_, other->op_uin_);
    std::swap(status_, other->status_);
    std::swap(max_round_, other->max_round_);
    users_.Swap(&other->users_);
    std::swap(next_uin_, other->next_uin_);
    std::swap(dealer_seatid_, other->dealer_seatid_);
    cards_.Swap(&other->cards_);
    in_users_.Swap(&other->in_users_);
    std::swap(share_cards_len_, other->share_cards_len_);
    std::swap(game_round_, other->game_round_);
    std::swap(my_option_, other->my_option_);
    std::swap(recv_card_uin_, other->recv_card_uin_);
    std::swap(desk_remain_round_, other->desk_remain_round_);
    std::swap(seat_num_, other->seat_num_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(apply_uin_, other->apply_uin_);
    std::swap(win_type_, other->win_type_);
    std::swap(extra_type_, other->extra_type_);
    std::swap(type_, other->type_);
    std::swap(pre_remain_time_, other->pre_remain_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvtDeskUserEnter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvtDeskUserEnter_descriptor_;
  metadata.reflection = EvtDeskUserEnter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GameExitDeskReq::GameExitDeskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameExitDeskReq::InitAsDefaultInstance() {
}

GameExitDeskReq::GameExitDeskReq(const GameExitDeskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameExitDeskReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameExitDeskReq::~GameExitDeskReq() {
  SharedDtor();
}

void GameExitDeskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameExitDeskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameExitDeskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameExitDeskReq_descriptor_;
}

const GameExitDeskReq& GameExitDeskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameExitDeskReq* GameExitDeskReq::default_instance_ = NULL;

GameExitDeskReq* GameExitDeskReq::New() const {
  return new GameExitDeskReq;
}

void GameExitDeskReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameExitDeskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GameExitDeskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameExitDeskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameExitDeskReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameExitDeskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameExitDeskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameExitDeskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameExitDeskReq::MergeFrom(const GameExitDeskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameExitDeskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameExitDeskReq::CopyFrom(const GameExitDeskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameExitDeskReq::IsInitialized() const {

  return true;
}

void GameExitDeskReq::Swap(GameExitDeskReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameExitDeskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameExitDeskReq_descriptor_;
  metadata.reflection = GameExitDeskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameExitDeskRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GameExitDeskRsp::GameExitDeskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameExitDeskRsp::InitAsDefaultInstance() {
}

GameExitDeskRsp::GameExitDeskRsp(const GameExitDeskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameExitDeskRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameExitDeskRsp::~GameExitDeskRsp() {
  SharedDtor();
}

void GameExitDeskRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameExitDeskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameExitDeskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameExitDeskRsp_descriptor_;
}

const GameExitDeskRsp& GameExitDeskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameExitDeskRsp* GameExitDeskRsp::default_instance_ = NULL;

GameExitDeskRsp* GameExitDeskRsp::New() const {
  return new GameExitDeskRsp;
}

void GameExitDeskRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameExitDeskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameExitDeskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameExitDeskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameExitDeskRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameExitDeskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameExitDeskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameExitDeskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameExitDeskRsp::MergeFrom(const GameExitDeskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameExitDeskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameExitDeskRsp::CopyFrom(const GameExitDeskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameExitDeskRsp::IsInitialized() const {

  return true;
}

void GameExitDeskRsp::Swap(GameExitDeskRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameExitDeskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameExitDeskRsp_descriptor_;
  metadata.reflection = GameExitDeskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeskPlayInfo::kCardsFieldNumber;
const int DeskPlayInfo::kCardLenFieldNumber;
const int DeskPlayInfo::kOutCardsFieldNumber;
const int DeskPlayInfo::kOutCardLenFieldNumber;
const int DeskPlayInfo::kDiscardsFieldNumber;
const int DeskPlayInfo::kStatusFieldNumber;
const int DeskPlayInfo::kChipsFieldNumber;
const int DeskPlayInfo::kRoundWinChipsFieldNumber;
const int DeskPlayInfo::kTotalChiNumFieldNumber;
const int DeskPlayInfo::kTotalPengNumFieldNumber;
const int DeskPlayInfo::kTotalGangNumFieldNumber;
const int DeskPlayInfo::kTotalGangedNumFieldNumber;
const int DeskPlayInfo::kTotalHuNumFieldNumber;
const int DeskPlayInfo::kTotalHuedNumFieldNumber;
const int DeskPlayInfo::kRoundChiNumFieldNumber;
const int DeskPlayInfo::kRoundPengNumFieldNumber;
const int DeskPlayInfo::kRoundGangNumFieldNumber;
const int DeskPlayInfo::kRoundGangedNumFieldNumber;
const int DeskPlayInfo::kRoleFieldNumber;
#endif  // !_MSC_VER

DeskPlayInfo::DeskPlayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeskPlayInfo::InitAsDefaultInstance() {
}

DeskPlayInfo::DeskPlayInfo(const DeskPlayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeskPlayInfo::SharedCtor() {
  _cached_size_ = 0;
  card_len_ = 0;
  out_card_len_ = 0;
  status_ = 0;
  chips_ = 0;
  round_win_chips_ = 0;
  total_chi_num_ = 0;
  total_peng_num_ = 0;
  total_gang_num_ = 0;
  total_ganged_num_ = 0;
  total_hu_num_ = 0;
  total_hued_num_ = 0;
  round_chi_num_ = 0;
  round_peng_num_ = 0;
  round_gang_num_ = 0;
  round_ganged_num_ = 0;
  role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeskPlayInfo::~DeskPlayInfo() {
  SharedDtor();
}

void DeskPlayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeskPlayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeskPlayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskPlayInfo_descriptor_;
}

const DeskPlayInfo& DeskPlayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

DeskPlayInfo* DeskPlayInfo::default_instance_ = NULL;

DeskPlayInfo* DeskPlayInfo::New() const {
  return new DeskPlayInfo;
}

void DeskPlayInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    card_len_ = 0;
    out_card_len_ = 0;
    status_ = 0;
    chips_ = 0;
    round_win_chips_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_chi_num_ = 0;
    total_peng_num_ = 0;
    total_gang_num_ = 0;
    total_ganged_num_ = 0;
    total_hu_num_ = 0;
    total_hued_num_ = 0;
    round_chi_num_ = 0;
    round_peng_num_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    round_gang_num_ = 0;
    round_ganged_num_ = 0;
    role_ = 0;
  }
  cards_.Clear();
  out_cards_.Clear();
  discards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeskPlayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_len;
        break;
      }

      // optional int32 card_len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_len_)));
          set_has_card_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_out_cards;
        break;
      }

      // repeated int32 out_cards = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_out_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_out_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_out_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_out_card_len;
        break;
      }

      // optional int32 out_card_len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_card_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_card_len_)));
          set_has_out_card_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_discards;
        break;
      }

      // repeated int32 discards = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_discards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_discards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional int32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_chips;
        break;
      }

      // optional int32 chips = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_round_win_chips;
        break;
      }

      // optional int32 round_win_chips = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_win_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_win_chips_)));
          set_has_round_win_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_chi_num;
        break;
      }

      // optional int32 total_chi_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_chi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_chi_num_)));
          set_has_total_chi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_total_peng_num;
        break;
      }

      // optional int32 total_peng_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_peng_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_peng_num_)));
          set_has_total_peng_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_gang_num;
        break;
      }

      // optional int32 total_gang_num = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_gang_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_gang_num_)));
          set_has_total_gang_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_total_ganged_num;
        break;
      }

      // optional int32 total_ganged_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_ganged_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_ganged_num_)));
          set_has_total_ganged_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_total_hu_num;
        break;
      }

      // optional int32 total_hu_num = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_hu_num_)));
          set_has_total_hu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_total_hued_num;
        break;
      }

      // optional int32 total_hued_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hued_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_hued_num_)));
          set_has_total_hued_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_round_chi_num;
        break;
      }

      // optional int32 round_chi_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_chi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_chi_num_)));
          set_has_round_chi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_round_peng_num;
        break;
      }

      // optional int32 round_peng_num = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_peng_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_peng_num_)));
          set_has_round_peng_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_round_gang_num;
        break;
      }

      // optional int32 round_gang_num = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_gang_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_gang_num_)));
          set_has_round_gang_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_round_ganged_num;
        break;
      }

      // optional int32 round_ganged_num = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_ganged_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_ganged_num_)));
          set_has_round_ganged_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_role;
        break;
      }

      // optional int32 role = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeskPlayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 cards = 1 [packed = true];
  if (this->cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cards_cached_byte_size_);
  }
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cards(i), output);
  }

  // optional int32 card_len = 2;
  if (has_card_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_len(), output);
  }

  // repeated int32 out_cards = 3 [packed = true];
  if (this->out_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_out_cards_cached_byte_size_);
  }
  for (int i = 0; i < this->out_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->out_cards(i), output);
  }

  // optional int32 out_card_len = 4;
  if (has_out_card_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->out_card_len(), output);
  }

  // repeated int32 discards = 5 [packed = true];
  if (this->discards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_discards_cached_byte_size_);
  }
  for (int i = 0; i < this->discards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->discards(i), output);
  }

  // optional int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // optional int32 chips = 7;
  if (has_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->chips(), output);
  }

  // optional int32 round_win_chips = 8;
  if (has_round_win_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->round_win_chips(), output);
  }

  // optional int32 total_chi_num = 9;
  if (has_total_chi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->total_chi_num(), output);
  }

  // optional int32 total_peng_num = 10;
  if (has_total_peng_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_peng_num(), output);
  }

  // optional int32 total_gang_num = 11;
  if (has_total_gang_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->total_gang_num(), output);
  }

  // optional int32 total_ganged_num = 12;
  if (has_total_ganged_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->total_ganged_num(), output);
  }

  // optional int32 total_hu_num = 13;
  if (has_total_hu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->total_hu_num(), output);
  }

  // optional int32 total_hued_num = 14;
  if (has_total_hued_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->total_hued_num(), output);
  }

  // optional int32 round_chi_num = 15;
  if (has_round_chi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->round_chi_num(), output);
  }

  // optional int32 round_peng_num = 16;
  if (has_round_peng_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->round_peng_num(), output);
  }

  // optional int32 round_gang_num = 17;
  if (has_round_gang_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->round_gang_num(), output);
  }

  // optional int32 round_ganged_num = 18;
  if (has_round_ganged_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->round_ganged_num(), output);
  }

  // optional int32 role = 19;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeskPlayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 cards = 1 [packed = true];
  if (this->cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cards_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cards(i), target);
  }

  // optional int32 card_len = 2;
  if (has_card_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_len(), target);
  }

  // repeated int32 out_cards = 3 [packed = true];
  if (this->out_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _out_cards_cached_byte_size_, target);
  }
  for (int i = 0; i < this->out_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->out_cards(i), target);
  }

  // optional int32 out_card_len = 4;
  if (has_out_card_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->out_card_len(), target);
  }

  // repeated int32 discards = 5 [packed = true];
  if (this->discards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _discards_cached_byte_size_, target);
  }
  for (int i = 0; i < this->discards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->discards(i), target);
  }

  // optional int32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // optional int32 chips = 7;
  if (has_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->chips(), target);
  }

  // optional int32 round_win_chips = 8;
  if (has_round_win_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->round_win_chips(), target);
  }

  // optional int32 total_chi_num = 9;
  if (has_total_chi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->total_chi_num(), target);
  }

  // optional int32 total_peng_num = 10;
  if (has_total_peng_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->total_peng_num(), target);
  }

  // optional int32 total_gang_num = 11;
  if (has_total_gang_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->total_gang_num(), target);
  }

  // optional int32 total_ganged_num = 12;
  if (has_total_ganged_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->total_ganged_num(), target);
  }

  // optional int32 total_hu_num = 13;
  if (has_total_hu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->total_hu_num(), target);
  }

  // optional int32 total_hued_num = 14;
  if (has_total_hued_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->total_hued_num(), target);
  }

  // optional int32 round_chi_num = 15;
  if (has_round_chi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->round_chi_num(), target);
  }

  // optional int32 round_peng_num = 16;
  if (has_round_peng_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->round_peng_num(), target);
  }

  // optional int32 round_gang_num = 17;
  if (has_round_gang_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->round_gang_num(), target);
  }

  // optional int32 round_ganged_num = 18;
  if (has_round_ganged_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->round_ganged_num(), target);
  }

  // optional int32 role = 19;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeskPlayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 card_len = 2;
    if (has_card_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_len());
    }

    // optional int32 out_card_len = 4;
    if (has_out_card_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_card_len());
    }

    // optional int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 chips = 7;
    if (has_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chips());
    }

    // optional int32 round_win_chips = 8;
    if (has_round_win_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_win_chips());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 total_chi_num = 9;
    if (has_total_chi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_chi_num());
    }

    // optional int32 total_peng_num = 10;
    if (has_total_peng_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_peng_num());
    }

    // optional int32 total_gang_num = 11;
    if (has_total_gang_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_gang_num());
    }

    // optional int32 total_ganged_num = 12;
    if (has_total_ganged_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_ganged_num());
    }

    // optional int32 total_hu_num = 13;
    if (has_total_hu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_hu_num());
    }

    // optional int32 total_hued_num = 14;
    if (has_total_hued_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_hued_num());
    }

    // optional int32 round_chi_num = 15;
    if (has_round_chi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_chi_num());
    }

    // optional int32 round_peng_num = 16;
    if (has_round_peng_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_peng_num());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 round_gang_num = 17;
    if (has_round_gang_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_gang_num());
    }

    // optional int32 round_ganged_num = 18;
    if (has_round_ganged_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_ganged_num());
    }

    // optional int32 role = 19;
    if (has_role()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

  }
  // repeated int32 cards = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cards_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 out_cards = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->out_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->out_cards(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _out_cards_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 discards = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->discards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->discards(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _discards_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeskPlayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeskPlayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeskPlayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeskPlayInfo::MergeFrom(const DeskPlayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  out_cards_.MergeFrom(from.out_cards_);
  discards_.MergeFrom(from.discards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_card_len()) {
      set_card_len(from.card_len());
    }
    if (from.has_out_card_len()) {
      set_out_card_len(from.out_card_len());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_chips()) {
      set_chips(from.chips());
    }
    if (from.has_round_win_chips()) {
      set_round_win_chips(from.round_win_chips());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_chi_num()) {
      set_total_chi_num(from.total_chi_num());
    }
    if (from.has_total_peng_num()) {
      set_total_peng_num(from.total_peng_num());
    }
    if (from.has_total_gang_num()) {
      set_total_gang_num(from.total_gang_num());
    }
    if (from.has_total_ganged_num()) {
      set_total_ganged_num(from.total_ganged_num());
    }
    if (from.has_total_hu_num()) {
      set_total_hu_num(from.total_hu_num());
    }
    if (from.has_total_hued_num()) {
      set_total_hued_num(from.total_hued_num());
    }
    if (from.has_round_chi_num()) {
      set_round_chi_num(from.round_chi_num());
    }
    if (from.has_round_peng_num()) {
      set_round_peng_num(from.round_peng_num());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_round_gang_num()) {
      set_round_gang_num(from.round_gang_num());
    }
    if (from.has_round_ganged_num()) {
      set_round_ganged_num(from.round_ganged_num());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeskPlayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeskPlayInfo::CopyFrom(const DeskPlayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeskPlayInfo::IsInitialized() const {

  return true;
}

void DeskPlayInfo::Swap(DeskPlayInfo* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(card_len_, other->card_len_);
    out_cards_.Swap(&other->out_cards_);
    std::swap(out_card_len_, other->out_card_len_);
    discards_.Swap(&other->discards_);
    std::swap(status_, other->status_);
    std::swap(chips_, other->chips_);
    std::swap(round_win_chips_, other->round_win_chips_);
    std::swap(total_chi_num_, other->total_chi_num_);
    std::swap(total_peng_num_, other->total_peng_num_);
    std::swap(total_gang_num_, other->total_gang_num_);
    std::swap(total_ganged_num_, other->total_ganged_num_);
    std::swap(total_hu_num_, other->total_hu_num_);
    std::swap(total_hued_num_, other->total_hued_num_);
    std::swap(round_chi_num_, other->round_chi_num_);
    std::swap(round_peng_num_, other->round_peng_num_);
    std::swap(round_gang_num_, other->round_gang_num_);
    std::swap(round_ganged_num_, other->round_ganged_num_);
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeskPlayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeskPlayInfo_descriptor_;
  metadata.reflection = DeskPlayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EvtUserExit::kDeskidFieldNumber;
const int EvtUserExit::kDealerFieldNumber;
const int EvtUserExit::kOpUinFieldNumber;
const int EvtUserExit::kOpStatusFieldNumber;
const int EvtUserExit::kNextUinFieldNumber;
const int EvtUserExit::kPlayInfoFieldNumber;
const int EvtUserExit::kPlayerOpPastTimeFieldNumber;
const int EvtUserExit::kDealerSeatidFieldNumber;
const int EvtUserExit::kReasonFieldNumber;
#endif  // !_MSC_VER

EvtUserExit::EvtUserExit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EvtUserExit::InitAsDefaultInstance() {
  play_info_ = const_cast< ::DeskPlayInfo*>(&::DeskPlayInfo::default_instance());
}

EvtUserExit::EvtUserExit(const EvtUserExit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EvtUserExit::SharedCtor() {
  _cached_size_ = 0;
  deskid_ = 0;
  dealer_ = 0;
  op_uin_ = 0;
  op_status_ = 0;
  next_uin_ = 0;
  play_info_ = NULL;
  player_op_past_time_ = GOOGLE_LONGLONG(0);
  dealer_seatid_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvtUserExit::~EvtUserExit() {
  SharedDtor();
}

void EvtUserExit::SharedDtor() {
  if (this != default_instance_) {
    delete play_info_;
  }
}

void EvtUserExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvtUserExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvtUserExit_descriptor_;
}

const EvtUserExit& EvtUserExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

EvtUserExit* EvtUserExit::default_instance_ = NULL;

EvtUserExit* EvtUserExit::New() const {
  return new EvtUserExit;
}

void EvtUserExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deskid_ = 0;
    dealer_ = 0;
    op_uin_ = 0;
    op_status_ = 0;
    next_uin_ = 0;
    if (has_play_info()) {
      if (play_info_ != NULL) play_info_->::DeskPlayInfo::Clear();
    }
    player_op_past_time_ = GOOGLE_LONGLONG(0);
    dealer_seatid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvtUserExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dealer;
        break;
      }

      // optional int32 dealer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealer_)));
          set_has_dealer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op_uin;
        break;
      }

      // optional int32 op_uin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_uin_)));
          set_has_op_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_op_status;
        break;
      }

      // optional int32 op_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_status_)));
          set_has_op_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_next_uin;
        break;
      }

      // optional int32 next_uin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_uin_)));
          set_has_next_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_play_info;
        break;
      }

      // optional .DeskPlayInfo play_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_play_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_op_past_time;
        break;
      }

      // optional int64 player_op_past_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_op_past_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_op_past_time_)));
          set_has_player_op_past_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dealer_seatid;
        break;
      }

      // optional int32 dealer_seatid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealer_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealer_seatid_)));
          set_has_dealer_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reason;
        break;
      }

      // optional int32 reason = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EvtUserExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 deskid = 1;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deskid(), output);
  }

  // optional int32 dealer = 2;
  if (has_dealer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dealer(), output);
  }

  // optional int32 op_uin = 3;
  if (has_op_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->op_uin(), output);
  }

  // optional int32 op_status = 4;
  if (has_op_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->op_status(), output);
  }

  // optional int32 next_uin = 5;
  if (has_next_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->next_uin(), output);
  }

  // optional .DeskPlayInfo play_info = 6;
  if (has_play_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->play_info(), output);
  }

  // optional int64 player_op_past_time = 7;
  if (has_player_op_past_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->player_op_past_time(), output);
  }

  // optional int32 dealer_seatid = 8;
  if (has_dealer_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dealer_seatid(), output);
  }

  // optional int32 reason = 9;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EvtUserExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 deskid = 1;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deskid(), target);
  }

  // optional int32 dealer = 2;
  if (has_dealer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dealer(), target);
  }

  // optional int32 op_uin = 3;
  if (has_op_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->op_uin(), target);
  }

  // optional int32 op_status = 4;
  if (has_op_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->op_status(), target);
  }

  // optional int32 next_uin = 5;
  if (has_next_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->next_uin(), target);
  }

  // optional .DeskPlayInfo play_info = 6;
  if (has_play_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->play_info(), target);
  }

  // optional int64 player_op_past_time = 7;
  if (has_player_op_past_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->player_op_past_time(), target);
  }

  // optional int32 dealer_seatid = 8;
  if (has_dealer_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dealer_seatid(), target);
  }

  // optional int32 reason = 9;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EvtUserExit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deskid = 1;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 dealer = 2;
    if (has_dealer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealer());
    }

    // optional int32 op_uin = 3;
    if (has_op_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_uin());
    }

    // optional int32 op_status = 4;
    if (has_op_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_status());
    }

    // optional int32 next_uin = 5;
    if (has_next_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_uin());
    }

    // optional .DeskPlayInfo play_info = 6;
    if (has_play_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_info());
    }

    // optional int64 player_op_past_time = 7;
    if (has_player_op_past_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_op_past_time());
    }

    // optional int32 dealer_seatid = 8;
    if (has_dealer_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealer_seatid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 reason = 9;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvtUserExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvtUserExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvtUserExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvtUserExit::MergeFrom(const EvtUserExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_dealer()) {
      set_dealer(from.dealer());
    }
    if (from.has_op_uin()) {
      set_op_uin(from.op_uin());
    }
    if (from.has_op_status()) {
      set_op_status(from.op_status());
    }
    if (from.has_next_uin()) {
      set_next_uin(from.next_uin());
    }
    if (from.has_play_info()) {
      mutable_play_info()->::DeskPlayInfo::MergeFrom(from.play_info());
    }
    if (from.has_player_op_past_time()) {
      set_player_op_past_time(from.player_op_past_time());
    }
    if (from.has_dealer_seatid()) {
      set_dealer_seatid(from.dealer_seatid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvtUserExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvtUserExit::CopyFrom(const EvtUserExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvtUserExit::IsInitialized() const {

  return true;
}

void EvtUserExit::Swap(EvtUserExit* other) {
  if (other != this) {
    std::swap(deskid_, other->deskid_);
    std::swap(dealer_, other->dealer_);
    std::swap(op_uin_, other->op_uin_);
    std::swap(op_status_, other->op_status_);
    std::swap(next_uin_, other->next_uin_);
    std::swap(play_info_, other->play_info_);
    std::swap(player_op_past_time_, other->player_op_past_time_);
    std::swap(dealer_seatid_, other->dealer_seatid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvtUserExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvtUserExit_descriptor_;
  metadata.reflection = EvtUserExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientNotifyStartGameReq::ClientNotifyStartGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientNotifyStartGameReq::InitAsDefaultInstance() {
}

ClientNotifyStartGameReq::ClientNotifyStartGameReq(const ClientNotifyStartGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientNotifyStartGameReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientNotifyStartGameReq::~ClientNotifyStartGameReq() {
  SharedDtor();
}

void ClientNotifyStartGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientNotifyStartGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientNotifyStartGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientNotifyStartGameReq_descriptor_;
}

const ClientNotifyStartGameReq& ClientNotifyStartGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

ClientNotifyStartGameReq* ClientNotifyStartGameReq::default_instance_ = NULL;

ClientNotifyStartGameReq* ClientNotifyStartGameReq::New() const {
  return new ClientNotifyStartGameReq;
}

void ClientNotifyStartGameReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientNotifyStartGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientNotifyStartGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientNotifyStartGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientNotifyStartGameReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientNotifyStartGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientNotifyStartGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientNotifyStartGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientNotifyStartGameReq::MergeFrom(const ClientNotifyStartGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientNotifyStartGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientNotifyStartGameReq::CopyFrom(const ClientNotifyStartGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientNotifyStartGameReq::IsInitialized() const {

  return true;
}

void ClientNotifyStartGameReq::Swap(ClientNotifyStartGameReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientNotifyStartGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientNotifyStartGameReq_descriptor_;
  metadata.reflection = ClientNotifyStartGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientNotifyStartGameRsp::kRetFieldNumber;
#endif  // !_MSC_VER

ClientNotifyStartGameRsp::ClientNotifyStartGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientNotifyStartGameRsp::InitAsDefaultInstance() {
}

ClientNotifyStartGameRsp::ClientNotifyStartGameRsp(const ClientNotifyStartGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientNotifyStartGameRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientNotifyStartGameRsp::~ClientNotifyStartGameRsp() {
  SharedDtor();
}

void ClientNotifyStartGameRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientNotifyStartGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientNotifyStartGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientNotifyStartGameRsp_descriptor_;
}

const ClientNotifyStartGameRsp& ClientNotifyStartGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

ClientNotifyStartGameRsp* ClientNotifyStartGameRsp::default_instance_ = NULL;

ClientNotifyStartGameRsp* ClientNotifyStartGameRsp::New() const {
  return new ClientNotifyStartGameRsp;
}

void ClientNotifyStartGameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientNotifyStartGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientNotifyStartGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientNotifyStartGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientNotifyStartGameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientNotifyStartGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientNotifyStartGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientNotifyStartGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientNotifyStartGameRsp::MergeFrom(const ClientNotifyStartGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientNotifyStartGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientNotifyStartGameRsp::CopyFrom(const ClientNotifyStartGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientNotifyStartGameRsp::IsInitialized() const {

  return true;
}

void ClientNotifyStartGameRsp::Swap(ClientNotifyStartGameRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientNotifyStartGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientNotifyStartGameRsp_descriptor_;
  metadata.reflection = ClientNotifyStartGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameSendCardReq::kCardFieldNumber;
#endif  // !_MSC_VER

GameSendCardReq::GameSendCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameSendCardReq::InitAsDefaultInstance() {
}

GameSendCardReq::GameSendCardReq(const GameSendCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameSendCardReq::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSendCardReq::~GameSendCardReq() {
  SharedDtor();
}

void GameSendCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameSendCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSendCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSendCardReq_descriptor_;
}

const GameSendCardReq& GameSendCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameSendCardReq* GameSendCardReq::default_instance_ = NULL;

GameSendCardReq* GameSendCardReq::New() const {
  return new GameSendCardReq;
}

void GameSendCardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSendCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameSendCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameSendCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameSendCardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSendCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSendCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSendCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSendCardReq::MergeFrom(const GameSendCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSendCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSendCardReq::CopyFrom(const GameSendCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSendCardReq::IsInitialized() const {

  return true;
}

void GameSendCardReq::Swap(GameSendCardReq* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSendCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSendCardReq_descriptor_;
  metadata.reflection = GameSendCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameSendCardRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GameSendCardRsp::GameSendCardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameSendCardRsp::InitAsDefaultInstance() {
}

GameSendCardRsp::GameSendCardRsp(const GameSendCardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameSendCardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSendCardRsp::~GameSendCardRsp() {
  SharedDtor();
}

void GameSendCardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameSendCardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSendCardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSendCardRsp_descriptor_;
}

const GameSendCardRsp& GameSendCardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameSendCardRsp* GameSendCardRsp::default_instance_ = NULL;

GameSendCardRsp* GameSendCardRsp::New() const {
  return new GameSendCardRsp;
}

void GameSendCardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSendCardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameSendCardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameSendCardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameSendCardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSendCardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSendCardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSendCardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSendCardRsp::MergeFrom(const GameSendCardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSendCardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSendCardRsp::CopyFrom(const GameSendCardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSendCardRsp::IsInitialized() const {

  return true;
}

void GameSendCardRsp::Swap(GameSendCardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSendCardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSendCardRsp_descriptor_;
  metadata.reflection = GameSendCardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOptionChiReq::kIndexFieldNumber;
#endif  // !_MSC_VER

GameOptionChiReq::GameOptionChiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionChiReq::InitAsDefaultInstance() {
}

GameOptionChiReq::GameOptionChiReq(const GameOptionChiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionChiReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionChiReq::~GameOptionChiReq() {
  SharedDtor();
}

void GameOptionChiReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionChiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionChiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionChiReq_descriptor_;
}

const GameOptionChiReq& GameOptionChiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionChiReq* GameOptionChiReq::default_instance_ = NULL;

GameOptionChiReq* GameOptionChiReq::New() const {
  return new GameOptionChiReq;
}

void GameOptionChiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionChiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameOptionChiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionChiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionChiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionChiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionChiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionChiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionChiReq::MergeFrom(const GameOptionChiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionChiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionChiReq::CopyFrom(const GameOptionChiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionChiReq::IsInitialized() const {

  return true;
}

void GameOptionChiReq::Swap(GameOptionChiReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionChiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionChiReq_descriptor_;
  metadata.reflection = GameOptionChiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOptionChiRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GameOptionChiRsp::GameOptionChiRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionChiRsp::InitAsDefaultInstance() {
}

GameOptionChiRsp::GameOptionChiRsp(const GameOptionChiRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionChiRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionChiRsp::~GameOptionChiRsp() {
  SharedDtor();
}

void GameOptionChiRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionChiRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionChiRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionChiRsp_descriptor_;
}

const GameOptionChiRsp& GameOptionChiRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionChiRsp* GameOptionChiRsp::default_instance_ = NULL;

GameOptionChiRsp* GameOptionChiRsp::New() const {
  return new GameOptionChiRsp;
}

void GameOptionChiRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionChiRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameOptionChiRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionChiRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionChiRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionChiRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionChiRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionChiRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionChiRsp::MergeFrom(const GameOptionChiRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionChiRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionChiRsp::CopyFrom(const GameOptionChiRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionChiRsp::IsInitialized() const {

  return true;
}

void GameOptionChiRsp::Swap(GameOptionChiRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionChiRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionChiRsp_descriptor_;
  metadata.reflection = GameOptionChiRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GameOptionPengReq::GameOptionPengReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionPengReq::InitAsDefaultInstance() {
}

GameOptionPengReq::GameOptionPengReq(const GameOptionPengReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionPengReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionPengReq::~GameOptionPengReq() {
  SharedDtor();
}

void GameOptionPengReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionPengReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionPengReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionPengReq_descriptor_;
}

const GameOptionPengReq& GameOptionPengReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionPengReq* GameOptionPengReq::default_instance_ = NULL;

GameOptionPengReq* GameOptionPengReq::New() const {
  return new GameOptionPengReq;
}

void GameOptionPengReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionPengReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GameOptionPengReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionPengReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionPengReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionPengReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionPengReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionPengReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionPengReq::MergeFrom(const GameOptionPengReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionPengReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionPengReq::CopyFrom(const GameOptionPengReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionPengReq::IsInitialized() const {

  return true;
}

void GameOptionPengReq::Swap(GameOptionPengReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionPengReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionPengReq_descriptor_;
  metadata.reflection = GameOptionPengReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOptionPengRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GameOptionPengRsp::GameOptionPengRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionPengRsp::InitAsDefaultInstance() {
}

GameOptionPengRsp::GameOptionPengRsp(const GameOptionPengRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionPengRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionPengRsp::~GameOptionPengRsp() {
  SharedDtor();
}

void GameOptionPengRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionPengRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionPengRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionPengRsp_descriptor_;
}

const GameOptionPengRsp& GameOptionPengRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionPengRsp* GameOptionPengRsp::default_instance_ = NULL;

GameOptionPengRsp* GameOptionPengRsp::New() const {
  return new GameOptionPengRsp;
}

void GameOptionPengRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionPengRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameOptionPengRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionPengRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionPengRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionPengRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionPengRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionPengRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionPengRsp::MergeFrom(const GameOptionPengRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionPengRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionPengRsp::CopyFrom(const GameOptionPengRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionPengRsp::IsInitialized() const {

  return true;
}

void GameOptionPengRsp::Swap(GameOptionPengRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionPengRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionPengRsp_descriptor_;
  metadata.reflection = GameOptionPengRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GameOptionGangReq::GameOptionGangReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionGangReq::InitAsDefaultInstance() {
}

GameOptionGangReq::GameOptionGangReq(const GameOptionGangReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionGangReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionGangReq::~GameOptionGangReq() {
  SharedDtor();
}

void GameOptionGangReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionGangReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionGangReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionGangReq_descriptor_;
}

const GameOptionGangReq& GameOptionGangReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionGangReq* GameOptionGangReq::default_instance_ = NULL;

GameOptionGangReq* GameOptionGangReq::New() const {
  return new GameOptionGangReq;
}

void GameOptionGangReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionGangReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GameOptionGangReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionGangReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionGangReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionGangReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionGangReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionGangReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionGangReq::MergeFrom(const GameOptionGangReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionGangReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionGangReq::CopyFrom(const GameOptionGangReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionGangReq::IsInitialized() const {

  return true;
}

void GameOptionGangReq::Swap(GameOptionGangReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionGangReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionGangReq_descriptor_;
  metadata.reflection = GameOptionGangReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOptionGangRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GameOptionGangRsp::GameOptionGangRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionGangRsp::InitAsDefaultInstance() {
}

GameOptionGangRsp::GameOptionGangRsp(const GameOptionGangRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionGangRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionGangRsp::~GameOptionGangRsp() {
  SharedDtor();
}

void GameOptionGangRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionGangRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionGangRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionGangRsp_descriptor_;
}

const GameOptionGangRsp& GameOptionGangRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionGangRsp* GameOptionGangRsp::default_instance_ = NULL;

GameOptionGangRsp* GameOptionGangRsp::New() const {
  return new GameOptionGangRsp;
}

void GameOptionGangRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionGangRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameOptionGangRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionGangRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionGangRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionGangRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionGangRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionGangRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionGangRsp::MergeFrom(const GameOptionGangRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionGangRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionGangRsp::CopyFrom(const GameOptionGangRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionGangRsp::IsInitialized() const {

  return true;
}

void GameOptionGangRsp::Swap(GameOptionGangRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionGangRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionGangRsp_descriptor_;
  metadata.reflection = GameOptionGangRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GameOptionHuReq::GameOptionHuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionHuReq::InitAsDefaultInstance() {
}

GameOptionHuReq::GameOptionHuReq(const GameOptionHuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionHuReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionHuReq::~GameOptionHuReq() {
  SharedDtor();
}

void GameOptionHuReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionHuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionHuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionHuReq_descriptor_;
}

const GameOptionHuReq& GameOptionHuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionHuReq* GameOptionHuReq::default_instance_ = NULL;

GameOptionHuReq* GameOptionHuReq::New() const {
  return new GameOptionHuReq;
}

void GameOptionHuReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionHuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GameOptionHuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionHuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionHuReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionHuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionHuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionHuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionHuReq::MergeFrom(const GameOptionHuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionHuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionHuReq::CopyFrom(const GameOptionHuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionHuReq::IsInitialized() const {

  return true;
}

void GameOptionHuReq::Swap(GameOptionHuReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionHuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionHuReq_descriptor_;
  metadata.reflection = GameOptionHuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOptionHuRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GameOptionHuRsp::GameOptionHuRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionHuRsp::InitAsDefaultInstance() {
}

GameOptionHuRsp::GameOptionHuRsp(const GameOptionHuRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionHuRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionHuRsp::~GameOptionHuRsp() {
  SharedDtor();
}

void GameOptionHuRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionHuRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionHuRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionHuRsp_descriptor_;
}

const GameOptionHuRsp& GameOptionHuRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionHuRsp* GameOptionHuRsp::default_instance_ = NULL;

GameOptionHuRsp* GameOptionHuRsp::New() const {
  return new GameOptionHuRsp;
}

void GameOptionHuRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionHuRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameOptionHuRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionHuRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionHuRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionHuRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionHuRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionHuRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionHuRsp::MergeFrom(const GameOptionHuRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionHuRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionHuRsp::CopyFrom(const GameOptionHuRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionHuRsp::IsInitialized() const {

  return true;
}

void GameOptionHuRsp::Swap(GameOptionHuRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionHuRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionHuRsp_descriptor_;
  metadata.reflection = GameOptionHuRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GameOptionPassReq::GameOptionPassReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionPassReq::InitAsDefaultInstance() {
}

GameOptionPassReq::GameOptionPassReq(const GameOptionPassReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionPassReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionPassReq::~GameOptionPassReq() {
  SharedDtor();
}

void GameOptionPassReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionPassReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionPassReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionPassReq_descriptor_;
}

const GameOptionPassReq& GameOptionPassReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionPassReq* GameOptionPassReq::default_instance_ = NULL;

GameOptionPassReq* GameOptionPassReq::New() const {
  return new GameOptionPassReq;
}

void GameOptionPassReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionPassReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GameOptionPassReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionPassReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionPassReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionPassReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionPassReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionPassReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionPassReq::MergeFrom(const GameOptionPassReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionPassReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionPassReq::CopyFrom(const GameOptionPassReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionPassReq::IsInitialized() const {

  return true;
}

void GameOptionPassReq::Swap(GameOptionPassReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionPassReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionPassReq_descriptor_;
  metadata.reflection = GameOptionPassReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOptionPassRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GameOptionPassRsp::GameOptionPassRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionPassRsp::InitAsDefaultInstance() {
}

GameOptionPassRsp::GameOptionPassRsp(const GameOptionPassRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionPassRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionPassRsp::~GameOptionPassRsp() {
  SharedDtor();
}

void GameOptionPassRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionPassRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionPassRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionPassRsp_descriptor_;
}

const GameOptionPassRsp& GameOptionPassRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionPassRsp* GameOptionPassRsp::default_instance_ = NULL;

GameOptionPassRsp* GameOptionPassRsp::New() const {
  return new GameOptionPassRsp;
}

void GameOptionPassRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionPassRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameOptionPassRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionPassRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionPassRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionPassRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionPassRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionPassRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionPassRsp::MergeFrom(const GameOptionPassRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionPassRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionPassRsp::CopyFrom(const GameOptionPassRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionPassRsp::IsInitialized() const {

  return true;
}

void GameOptionPassRsp::Swap(GameOptionPassRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionPassRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionPassRsp_descriptor_;
  metadata.reflection = GameOptionPassRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerReadyReq::kStatusFieldNumber;
const int GamePlayerReadyReq::kPiaofenFieldNumber;
#endif  // !_MSC_VER

GamePlayerReadyReq::GamePlayerReadyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerReadyReq::InitAsDefaultInstance() {
}

GamePlayerReadyReq::GamePlayerReadyReq(const GamePlayerReadyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerReadyReq::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  piaofen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerReadyReq::~GamePlayerReadyReq() {
  SharedDtor();
}

void GamePlayerReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerReadyReq_descriptor_;
}

const GamePlayerReadyReq& GamePlayerReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GamePlayerReadyReq* GamePlayerReadyReq::default_instance_ = NULL;

GamePlayerReadyReq* GamePlayerReadyReq::New() const {
  return new GamePlayerReadyReq;
}

void GamePlayerReadyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    piaofen_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_piaofen;
        break;
      }

      // optional int32 piaofen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaofen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaofen_)));
          set_has_piaofen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 piaofen = 2;
  if (has_piaofen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piaofen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 piaofen = 2;
  if (has_piaofen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->piaofen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerReadyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 piaofen = 2;
    if (has_piaofen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaofen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerReadyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerReadyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerReadyReq::MergeFrom(const GamePlayerReadyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_piaofen()) {
      set_piaofen(from.piaofen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerReadyReq::CopyFrom(const GamePlayerReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerReadyReq::IsInitialized() const {

  return true;
}

void GamePlayerReadyReq::Swap(GamePlayerReadyReq* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(piaofen_, other->piaofen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerReadyReq_descriptor_;
  metadata.reflection = GamePlayerReadyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatus::kUinFieldNumber;
const int UserStatus::kStatusFieldNumber;
const int UserStatus::kPiaofenFieldNumber;
const int UserStatus::kShanghuoFieldNumber;
#endif  // !_MSC_VER

UserStatus::UserStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStatus::InitAsDefaultInstance() {
}

UserStatus::UserStatus(const UserStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStatus::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  status_ = 0;
  piaofen_ = 0;
  shanghuo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatus::~UserStatus() {
  SharedDtor();
}

void UserStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatus_descriptor_;
}

const UserStatus& UserStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

UserStatus* UserStatus::default_instance_ = NULL;

UserStatus* UserStatus::New() const {
  return new UserStatus;
}

void UserStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    status_ = 0;
    piaofen_ = 0;
    shanghuo_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_piaofen;
        break;
      }

      // optional int32 piaofen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaofen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaofen_)));
          set_has_piaofen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_shanghuo;
        break;
      }

      // optional int32 shanghuo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shanghuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shanghuo_)));
          set_has_shanghuo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 piaofen = 3;
  if (has_piaofen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->piaofen(), output);
  }

  // optional int32 shanghuo = 4;
  if (has_shanghuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shanghuo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 piaofen = 3;
  if (has_piaofen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->piaofen(), target);
  }

  // optional int32 shanghuo = 4;
  if (has_shanghuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shanghuo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 piaofen = 3;
    if (has_piaofen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaofen());
    }

    // optional int32 shanghuo = 4;
    if (has_shanghuo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shanghuo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatus::MergeFrom(const UserStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_piaofen()) {
      set_piaofen(from.piaofen());
    }
    if (from.has_shanghuo()) {
      set_shanghuo(from.shanghuo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatus::CopyFrom(const UserStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatus::IsInitialized() const {

  return true;
}

void UserStatus::Swap(UserStatus* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(status_, other->status_);
    std::swap(piaofen_, other->piaofen_);
    std::swap(shanghuo_, other->shanghuo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatus_descriptor_;
  metadata.reflection = UserStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerReadyEvt::kUsersFieldNumber;
const int GamePlayerReadyEvt::kPreRemainTimeFieldNumber;
const int GamePlayerReadyEvt::kDeskidFieldNumber;
#endif  // !_MSC_VER

GamePlayerReadyEvt::GamePlayerReadyEvt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerReadyEvt::InitAsDefaultInstance() {
}

GamePlayerReadyEvt::GamePlayerReadyEvt(const GamePlayerReadyEvt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerReadyEvt::SharedCtor() {
  _cached_size_ = 0;
  pre_remain_time_ = 0;
  deskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerReadyEvt::~GamePlayerReadyEvt() {
  SharedDtor();
}

void GamePlayerReadyEvt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerReadyEvt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerReadyEvt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerReadyEvt_descriptor_;
}

const GamePlayerReadyEvt& GamePlayerReadyEvt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GamePlayerReadyEvt* GamePlayerReadyEvt::default_instance_ = NULL;

GamePlayerReadyEvt* GamePlayerReadyEvt::New() const {
  return new GamePlayerReadyEvt;
}

void GamePlayerReadyEvt::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    pre_remain_time_ = 0;
    deskid_ = 0;
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerReadyEvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserStatus users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectTag(16)) goto parse_pre_remain_time;
        break;
      }

      // optional int32 pre_remain_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_remain_time_)));
          set_has_pre_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deskid;
        break;
      }

      // optional int32 deskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerReadyEvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .UserStatus users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  // optional int32 pre_remain_time = 2;
  if (has_pre_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pre_remain_time(), output);
  }

  // optional int32 deskid = 3;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerReadyEvt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .UserStatus users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  // optional int32 pre_remain_time = 2;
  if (has_pre_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pre_remain_time(), target);
  }

  // optional int32 deskid = 3;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerReadyEvt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 pre_remain_time = 2;
    if (has_pre_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_remain_time());
    }

    // optional int32 deskid = 3;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

  }
  // repeated .UserStatus users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerReadyEvt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerReadyEvt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerReadyEvt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerReadyEvt::MergeFrom(const GamePlayerReadyEvt& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pre_remain_time()) {
      set_pre_remain_time(from.pre_remain_time());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerReadyEvt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerReadyEvt::CopyFrom(const GamePlayerReadyEvt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerReadyEvt::IsInitialized() const {

  return true;
}

void GamePlayerReadyEvt::Swap(GamePlayerReadyEvt* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(pre_remain_time_, other->pre_remain_time_);
    std::swap(deskid_, other->deskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerReadyEvt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerReadyEvt_descriptor_;
  metadata.reflection = GamePlayerReadyEvt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOptionGangNotFirstReq::kGangCardFieldNumber;
#endif  // !_MSC_VER

GameOptionGangNotFirstReq::GameOptionGangNotFirstReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionGangNotFirstReq::InitAsDefaultInstance() {
}

GameOptionGangNotFirstReq::GameOptionGangNotFirstReq(const GameOptionGangNotFirstReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionGangNotFirstReq::SharedCtor() {
  _cached_size_ = 0;
  gang_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionGangNotFirstReq::~GameOptionGangNotFirstReq() {
  SharedDtor();
}

void GameOptionGangNotFirstReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionGangNotFirstReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionGangNotFirstReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionGangNotFirstReq_descriptor_;
}

const GameOptionGangNotFirstReq& GameOptionGangNotFirstReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionGangNotFirstReq* GameOptionGangNotFirstReq::default_instance_ = NULL;

GameOptionGangNotFirstReq* GameOptionGangNotFirstReq::New() const {
  return new GameOptionGangNotFirstReq;
}

void GameOptionGangNotFirstReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gang_card_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionGangNotFirstReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gang_card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gang_card_)));
          set_has_gang_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameOptionGangNotFirstReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gang_card = 1;
  if (has_gang_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gang_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionGangNotFirstReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gang_card = 1;
  if (has_gang_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gang_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionGangNotFirstReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gang_card = 1;
    if (has_gang_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gang_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionGangNotFirstReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionGangNotFirstReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionGangNotFirstReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionGangNotFirstReq::MergeFrom(const GameOptionGangNotFirstReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gang_card()) {
      set_gang_card(from.gang_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionGangNotFirstReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionGangNotFirstReq::CopyFrom(const GameOptionGangNotFirstReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionGangNotFirstReq::IsInitialized() const {

  return true;
}

void GameOptionGangNotFirstReq::Swap(GameOptionGangNotFirstReq* other) {
  if (other != this) {
    std::swap(gang_card_, other->gang_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionGangNotFirstReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionGangNotFirstReq_descriptor_;
  metadata.reflection = GameOptionGangNotFirstReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOptionGangNotFirstRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GameOptionGangNotFirstRsp::GameOptionGangNotFirstRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOptionGangNotFirstRsp::InitAsDefaultInstance() {
}

GameOptionGangNotFirstRsp::GameOptionGangNotFirstRsp(const GameOptionGangNotFirstRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOptionGangNotFirstRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOptionGangNotFirstRsp::~GameOptionGangNotFirstRsp() {
  SharedDtor();
}

void GameOptionGangNotFirstRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOptionGangNotFirstRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOptionGangNotFirstRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOptionGangNotFirstRsp_descriptor_;
}

const GameOptionGangNotFirstRsp& GameOptionGangNotFirstRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOptionGangNotFirstRsp* GameOptionGangNotFirstRsp::default_instance_ = NULL;

GameOptionGangNotFirstRsp* GameOptionGangNotFirstRsp::New() const {
  return new GameOptionGangNotFirstRsp;
}

void GameOptionGangNotFirstRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOptionGangNotFirstRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameOptionGangNotFirstRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOptionGangNotFirstRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOptionGangNotFirstRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOptionGangNotFirstRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOptionGangNotFirstRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOptionGangNotFirstRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOptionGangNotFirstRsp::MergeFrom(const GameOptionGangNotFirstRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOptionGangNotFirstRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOptionGangNotFirstRsp::CopyFrom(const GameOptionGangNotFirstRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOptionGangNotFirstRsp::IsInitialized() const {

  return true;
}

void GameOptionGangNotFirstRsp::Swap(GameOptionGangNotFirstRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOptionGangNotFirstRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOptionGangNotFirstRsp_descriptor_;
  metadata.reflection = GameOptionGangNotFirstRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ApplyDeleteReq::ApplyDeleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyDeleteReq::InitAsDefaultInstance() {
}

ApplyDeleteReq::ApplyDeleteReq(const ApplyDeleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyDeleteReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyDeleteReq::~ApplyDeleteReq() {
  SharedDtor();
}

void ApplyDeleteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyDeleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyDeleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyDeleteReq_descriptor_;
}

const ApplyDeleteReq& ApplyDeleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

ApplyDeleteReq* ApplyDeleteReq::default_instance_ = NULL;

ApplyDeleteReq* ApplyDeleteReq::New() const {
  return new ApplyDeleteReq;
}

void ApplyDeleteReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyDeleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ApplyDeleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyDeleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyDeleteReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyDeleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyDeleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyDeleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyDeleteReq::MergeFrom(const ApplyDeleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyDeleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDeleteReq::CopyFrom(const ApplyDeleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDeleteReq::IsInitialized() const {

  return true;
}

void ApplyDeleteReq::Swap(ApplyDeleteReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyDeleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyDeleteReq_descriptor_;
  metadata.reflection = ApplyDeleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyDeleteEvt::kApplyUinFieldNumber;
const int ApplyDeleteEvt::kGameStatusFieldNumber;
const int ApplyDeleteEvt::kRemainTimeFieldNumber;
const int ApplyDeleteEvt::kStatusFieldNumber;
const int ApplyDeleteEvt::kDeskidFieldNumber;
#endif  // !_MSC_VER

ApplyDeleteEvt::ApplyDeleteEvt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyDeleteEvt::InitAsDefaultInstance() {
}

ApplyDeleteEvt::ApplyDeleteEvt(const ApplyDeleteEvt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyDeleteEvt::SharedCtor() {
  _cached_size_ = 0;
  apply_uin_ = 0;
  game_status_ = 0;
  remain_time_ = 0;
  status_ = 0;
  deskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyDeleteEvt::~ApplyDeleteEvt() {
  SharedDtor();
}

void ApplyDeleteEvt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyDeleteEvt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyDeleteEvt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyDeleteEvt_descriptor_;
}

const ApplyDeleteEvt& ApplyDeleteEvt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

ApplyDeleteEvt* ApplyDeleteEvt::default_instance_ = NULL;

ApplyDeleteEvt* ApplyDeleteEvt::New() const {
  return new ApplyDeleteEvt;
}

void ApplyDeleteEvt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_uin_ = 0;
    game_status_ = 0;
    remain_time_ = 0;
    status_ = 0;
    deskid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyDeleteEvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 apply_uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_uin_)));
          set_has_apply_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_status;
        break;
      }

      // optional int32 game_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_status_)));
          set_has_game_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deskid;
        break;
      }

      // optional int32 deskid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyDeleteEvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 apply_uin = 1;
  if (has_apply_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->apply_uin(), output);
  }

  // optional int32 game_status = 2;
  if (has_game_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_status(), output);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_time(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional int32 deskid = 5;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyDeleteEvt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 apply_uin = 1;
  if (has_apply_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->apply_uin(), target);
  }

  // optional int32 game_status = 2;
  if (has_game_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_status(), target);
  }

  // optional int32 remain_time = 3;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_time(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional int32 deskid = 5;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyDeleteEvt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 apply_uin = 1;
    if (has_apply_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_uin());
    }

    // optional int32 game_status = 2;
    if (has_game_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_status());
    }

    // optional int32 remain_time = 3;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 deskid = 5;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyDeleteEvt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyDeleteEvt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyDeleteEvt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyDeleteEvt::MergeFrom(const ApplyDeleteEvt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_uin()) {
      set_apply_uin(from.apply_uin());
    }
    if (from.has_game_status()) {
      set_game_status(from.game_status());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyDeleteEvt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDeleteEvt::CopyFrom(const ApplyDeleteEvt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDeleteEvt::IsInitialized() const {

  return true;
}

void ApplyDeleteEvt::Swap(ApplyDeleteEvt* other) {
  if (other != this) {
    std::swap(apply_uin_, other->apply_uin_);
    std::swap(game_status_, other->game_status_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(status_, other->status_);
    std::swap(deskid_, other->deskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyDeleteEvt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyDeleteEvt_descriptor_;
  metadata.reflection = ApplyDeleteEvt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserOption::kUinFieldNumber;
const int UserOption::kTypeFieldNumber;
#endif  // !_MSC_VER

UserOption::UserOption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserOption::InitAsDefaultInstance() {
}

UserOption::UserOption(const UserOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserOption::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOption::~UserOption() {
  SharedDtor();
}

void UserOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOption_descriptor_;
}

const UserOption& UserOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

UserOption* UserOption::default_instance_ = NULL;

UserOption* UserOption::New() const {
  return new UserOption;
}

void UserOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOption::MergeFrom(const UserOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOption::CopyFrom(const UserOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOption::IsInitialized() const {

  return true;
}

void UserOption::Swap(UserOption* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOption_descriptor_;
  metadata.reflection = UserOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfoEvt::kDeskidFieldNumber;
const int GameInfoEvt::kNextUinFieldNumber;
const int GameInfoEvt::kMaxRoundFieldNumber;
const int GameInfoEvt::kCardsFieldNumber;
const int GameInfoEvt::kDealerSeatidFieldNumber;
const int GameInfoEvt::kUsersFieldNumber;
const int GameInfoEvt::kOpUserFieldNumber;
const int GameInfoEvt::kShareCardsLenFieldNumber;
const int GameInfoEvt::kGameRoundFieldNumber;
const int GameInfoEvt::kMyOptionFieldNumber;
const int GameInfoEvt::kStatusFieldNumber;
const int GameInfoEvt::kRecvCardUinFieldNumber;
const int GameInfoEvt::kDeskRemainRoundFieldNumber;
const int GameInfoEvt::kSeatNumFieldNumber;
#endif  // !_MSC_VER

GameInfoEvt::GameInfoEvt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameInfoEvt::InitAsDefaultInstance() {
  op_user_ = const_cast< ::UserOption*>(&::UserOption::default_instance());
  my_option_ = const_cast< ::MyOption*>(&::MyOption::default_instance());
}

GameInfoEvt::GameInfoEvt(const GameInfoEvt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameInfoEvt::SharedCtor() {
  _cached_size_ = 0;
  deskid_ = 0;
  next_uin_ = 0;
  max_round_ = 0;
  dealer_seatid_ = 0;
  op_user_ = NULL;
  share_cards_len_ = 0;
  game_round_ = 0;
  my_option_ = NULL;
  status_ = 0;
  recv_card_uin_ = 0;
  desk_remain_round_ = 0;
  seat_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfoEvt::~GameInfoEvt() {
  SharedDtor();
}

void GameInfoEvt::SharedDtor() {
  if (this != default_instance_) {
    delete op_user_;
    delete my_option_;
  }
}

void GameInfoEvt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfoEvt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfoEvt_descriptor_;
}

const GameInfoEvt& GameInfoEvt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameInfoEvt* GameInfoEvt::default_instance_ = NULL;

GameInfoEvt* GameInfoEvt::New() const {
  return new GameInfoEvt;
}

void GameInfoEvt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deskid_ = 0;
    next_uin_ = 0;
    max_round_ = 0;
    dealer_seatid_ = 0;
    if (has_op_user()) {
      if (op_user_ != NULL) op_user_->::UserOption::Clear();
    }
    share_cards_len_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    game_round_ = 0;
    if (has_my_option()) {
      if (my_option_ != NULL) my_option_->::MyOption::Clear();
    }
    status_ = 0;
    recv_card_uin_ = 0;
    desk_remain_round_ = 0;
    seat_num_ = 0;
  }
  cards_.Clear();
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfoEvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next_uin;
        break;
      }

      // optional int32 next_uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_uin_)));
          set_has_next_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_round;
        break;
      }

      // optional int32 max_round = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_round_)));
          set_has_max_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dealer_seatid;
        break;
      }

      // optional int32 dealer_seatid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealer_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealer_seatid_)));
          set_has_dealer_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_users;
        break;
      }

      // repeated .UserCommonCards users = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_users;
        if (input->ExpectTag(58)) goto parse_op_user;
        break;
      }

      // optional .UserOption op_user = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_share_cards_len;
        break;
      }

      // optional int32 share_cards_len = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_share_cards_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &share_cards_len_)));
          set_has_share_cards_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_game_round;
        break;
      }

      // optional int32 game_round = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_my_option;
        break;
      }

      // optional .MyOption my_option = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_status;
        break;
      }

      // optional int32 status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_recv_card_uin;
        break;
      }

      // optional int32 recv_card_uin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_card_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_card_uin_)));
          set_has_recv_card_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_desk_remain_round;
        break;
      }

      // optional int32 desk_remain_round = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_remain_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_remain_round_)));
          set_has_desk_remain_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_seat_num;
        break;
      }

      // optional int32 seat_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_num_)));
          set_has_seat_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameInfoEvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 deskid = 1;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deskid(), output);
  }

  // optional int32 next_uin = 2;
  if (has_next_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->next_uin(), output);
  }

  // optional int32 max_round = 3;
  if (has_max_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_round(), output);
  }

  // repeated int32 cards = 4 [packed = true];
  if (this->cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cards_cached_byte_size_);
  }
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cards(i), output);
  }

  // optional int32 dealer_seatid = 5;
  if (has_dealer_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dealer_seatid(), output);
  }

  // repeated .UserCommonCards users = 6;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->users(i), output);
  }

  // optional .UserOption op_user = 7;
  if (has_op_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->op_user(), output);
  }

  // optional int32 share_cards_len = 8;
  if (has_share_cards_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->share_cards_len(), output);
  }

  // optional int32 game_round = 9;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->game_round(), output);
  }

  // optional .MyOption my_option = 10;
  if (has_my_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->my_option(), output);
  }

  // optional int32 status = 11;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->status(), output);
  }

  // optional int32 recv_card_uin = 12;
  if (has_recv_card_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->recv_card_uin(), output);
  }

  // optional int32 desk_remain_round = 13;
  if (has_desk_remain_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->desk_remain_round(), output);
  }

  // optional int32 seat_num = 14;
  if (has_seat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->seat_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameInfoEvt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 deskid = 1;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deskid(), target);
  }

  // optional int32 next_uin = 2;
  if (has_next_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->next_uin(), target);
  }

  // optional int32 max_round = 3;
  if (has_max_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_round(), target);
  }

  // repeated int32 cards = 4 [packed = true];
  if (this->cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cards_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cards(i), target);
  }

  // optional int32 dealer_seatid = 5;
  if (has_dealer_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dealer_seatid(), target);
  }

  // repeated .UserCommonCards users = 6;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->users(i), target);
  }

  // optional .UserOption op_user = 7;
  if (has_op_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->op_user(), target);
  }

  // optional int32 share_cards_len = 8;
  if (has_share_cards_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->share_cards_len(), target);
  }

  // optional int32 game_round = 9;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->game_round(), target);
  }

  // optional .MyOption my_option = 10;
  if (has_my_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->my_option(), target);
  }

  // optional int32 status = 11;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->status(), target);
  }

  // optional int32 recv_card_uin = 12;
  if (has_recv_card_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->recv_card_uin(), target);
  }

  // optional int32 desk_remain_round = 13;
  if (has_desk_remain_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->desk_remain_round(), target);
  }

  // optional int32 seat_num = 14;
  if (has_seat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->seat_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameInfoEvt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deskid = 1;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 next_uin = 2;
    if (has_next_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_uin());
    }

    // optional int32 max_round = 3;
    if (has_max_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_round());
    }

    // optional int32 dealer_seatid = 5;
    if (has_dealer_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealer_seatid());
    }

    // optional .UserOption op_user = 7;
    if (has_op_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_user());
    }

    // optional int32 share_cards_len = 8;
    if (has_share_cards_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->share_cards_len());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 game_round = 9;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional .MyOption my_option = 10;
    if (has_my_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_option());
    }

    // optional int32 status = 11;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 recv_card_uin = 12;
    if (has_recv_card_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recv_card_uin());
    }

    // optional int32 desk_remain_round = 13;
    if (has_desk_remain_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_remain_round());
    }

    // optional int32 seat_num = 14;
    if (has_seat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_num());
    }

  }
  // repeated int32 cards = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cards_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .UserCommonCards users = 6;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfoEvt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfoEvt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfoEvt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfoEvt::MergeFrom(const GameInfoEvt& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_next_uin()) {
      set_next_uin(from.next_uin());
    }
    if (from.has_max_round()) {
      set_max_round(from.max_round());
    }
    if (from.has_dealer_seatid()) {
      set_dealer_seatid(from.dealer_seatid());
    }
    if (from.has_op_user()) {
      mutable_op_user()->::UserOption::MergeFrom(from.op_user());
    }
    if (from.has_share_cards_len()) {
      set_share_cards_len(from.share_cards_len());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_my_option()) {
      mutable_my_option()->::MyOption::MergeFrom(from.my_option());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_recv_card_uin()) {
      set_recv_card_uin(from.recv_card_uin());
    }
    if (from.has_desk_remain_round()) {
      set_desk_remain_round(from.desk_remain_round());
    }
    if (from.has_seat_num()) {
      set_seat_num(from.seat_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfoEvt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfoEvt::CopyFrom(const GameInfoEvt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfoEvt::IsInitialized() const {

  return true;
}

void GameInfoEvt::Swap(GameInfoEvt* other) {
  if (other != this) {
    std::swap(deskid_, other->deskid_);
    std::swap(next_uin_, other->next_uin_);
    std::swap(max_round_, other->max_round_);
    cards_.Swap(&other->cards_);
    std::swap(dealer_seatid_, other->dealer_seatid_);
    users_.Swap(&other->users_);
    std::swap(op_user_, other->op_user_);
    std::swap(share_cards_len_, other->share_cards_len_);
    std::swap(game_round_, other->game_round_);
    std::swap(my_option_, other->my_option_);
    std::swap(status_, other->status_);
    std::swap(recv_card_uin_, other->recv_card_uin_);
    std::swap(desk_remain_round_, other->desk_remain_round_);
    std::swap(seat_num_, other->seat_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfoEvt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfoEvt_descriptor_;
  metadata.reflection = GameInfoEvt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameOverResultInfo::kUinFieldNumber;
const int GameOverResultInfo::kChipsFieldNumber;
const int GameOverResultInfo::kRoundChiNumFieldNumber;
const int GameOverResultInfo::kRoundPengNumFieldNumber;
const int GameOverResultInfo::kRoundGangListFieldNumber;
const int GameOverResultInfo::kRoundHuListFieldNumber;
const int GameOverResultInfo::kRoundWinListFieldNumber;
const int GameOverResultInfo::kTotalChiNumFieldNumber;
const int GameOverResultInfo::kTotalPengNumFieldNumber;
const int GameOverResultInfo::kTotalGangListFieldNumber;
const int GameOverResultInfo::kTotalHuListFieldNumber;
const int GameOverResultInfo::kTotalWinListFieldNumber;
const int GameOverResultInfo::kStatusFieldNumber;
const int GameOverResultInfo::kPiaofenFieldNumber;
const int GameOverResultInfo::kShanghuoFieldNumber;
const int GameOverResultInfo::kBirdNumFieldNumber;
const int GameOverResultInfo::kCardsFieldNumber;
const int GameOverResultInfo::kOutCardsFieldNumber;
const int GameOverResultInfo::kOpListFieldNumber;
const int GameOverResultInfo::kRoundWinChipsFieldNumber;
const int GameOverResultInfo::kOverChipsDetailsFieldNumber;
const int GameOverResultInfo::kRoundWinChipsBeforeFieldNumber;
#endif  // !_MSC_VER

GameOverResultInfo::GameOverResultInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameOverResultInfo::InitAsDefaultInstance() {
}

GameOverResultInfo::GameOverResultInfo(const GameOverResultInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameOverResultInfo::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  chips_ = GOOGLE_LONGLONG(0);
  round_chi_num_ = 0;
  round_peng_num_ = 0;
  total_chi_num_ = 0;
  total_peng_num_ = 0;
  status_ = 0;
  piaofen_ = 0;
  shanghuo_ = 0;
  bird_num_ = 0;
  round_win_chips_ = 0;
  round_win_chips_before_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameOverResultInfo::~GameOverResultInfo() {
  SharedDtor();
}

void GameOverResultInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameOverResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameOverResultInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameOverResultInfo_descriptor_;
}

const GameOverResultInfo& GameOverResultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

GameOverResultInfo* GameOverResultInfo::default_instance_ = NULL;

GameOverResultInfo* GameOverResultInfo::New() const {
  return new GameOverResultInfo;
}

void GameOverResultInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    chips_ = GOOGLE_LONGLONG(0);
    round_chi_num_ = 0;
    round_peng_num_ = 0;
    total_chi_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_peng_num_ = 0;
    status_ = 0;
    piaofen_ = 0;
    shanghuo_ = 0;
    bird_num_ = 0;
  }
  if (_has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    round_win_chips_ = 0;
    round_win_chips_before_ = 0;
  }
  round_gang_list_.Clear();
  round_hu_list_.Clear();
  round_win_list_.Clear();
  total_gang_list_.Clear();
  total_hu_list_.Clear();
  total_win_list_.Clear();
  cards_.Clear();
  out_cards_.Clear();
  op_list_.Clear();
  over_chips_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameOverResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chips;
        break;
      }

      // optional int64 chips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_round_chi_num;
        break;
      }

      // optional int32 round_chi_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_chi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_chi_num_)));
          set_has_round_chi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_round_peng_num;
        break;
      }

      // optional int32 round_peng_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_peng_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_peng_num_)));
          set_has_round_peng_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_round_gang_list;
        break;
      }

      // repeated int32 round_gang_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_gang_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_round_gang_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_round_gang_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_round_gang_list;
        if (input->ExpectTag(48)) goto parse_round_hu_list;
        break;
      }

      // repeated int32 round_hu_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_hu_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_round_hu_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_round_hu_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_round_hu_list;
        if (input->ExpectTag(56)) goto parse_round_win_list;
        break;
      }

      // repeated int32 round_win_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_win_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_round_win_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_round_win_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_round_win_list;
        if (input->ExpectTag(64)) goto parse_total_chi_num;
        break;
      }

      // optional int32 total_chi_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_chi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_chi_num_)));
          set_has_total_chi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_peng_num;
        break;
      }

      // optional int32 total_peng_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_peng_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_peng_num_)));
          set_has_total_peng_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_total_gang_list;
        break;
      }

      // repeated int32 total_gang_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_gang_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_total_gang_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_gang_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_total_gang_list;
        if (input->ExpectTag(88)) goto parse_total_hu_list;
        break;
      }

      // repeated int32 total_hu_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hu_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_total_hu_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_hu_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_hu_list;
        if (input->ExpectTag(96)) goto parse_total_win_list;
        break;
      }

      // repeated int32 total_win_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_win_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_total_win_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_win_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_total_win_list;
        if (input->ExpectTag(104)) goto parse_status;
        break;
      }

      // optional int32 status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_piaofen;
        break;
      }

      // optional int32 piaofen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaofen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaofen_)));
          set_has_piaofen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_shanghuo;
        break;
      }

      // optional int32 shanghuo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shanghuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shanghuo_)));
          set_has_shanghuo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bird_num;
        break;
      }

      // optional int32 bird_num = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bird_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bird_num_)));
          set_has_bird_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cards;
        if (input->ExpectTag(144)) goto parse_out_cards;
        break;
      }

      // repeated int32 out_cards = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_out_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_out_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_out_cards;
        if (input->ExpectTag(152)) goto parse_op_list;
        break;
      }

      // repeated int32 op_list = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_op_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_op_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_op_list;
        if (input->ExpectTag(160)) goto parse_round_win_chips;
        break;
      }

      // optional int32 round_win_chips = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_win_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_win_chips_)));
          set_has_round_win_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_over_chips_details;
        break;
      }

      // repeated int32 over_chips_details = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_chips_details:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_over_chips_details())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_over_chips_details())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_over_chips_details;
        if (input->ExpectTag(176)) goto parse_round_win_chips_before;
        break;
      }

      // optional int32 round_win_chips_before = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_win_chips_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_win_chips_before_)));
          set_has_round_win_chips_before();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameOverResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional int64 chips = 2;
  if (has_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chips(), output);
  }

  // optional int32 round_chi_num = 3;
  if (has_round_chi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->round_chi_num(), output);
  }

  // optional int32 round_peng_num = 4;
  if (has_round_peng_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->round_peng_num(), output);
  }

  // repeated int32 round_gang_list = 5;
  for (int i = 0; i < this->round_gang_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->round_gang_list(i), output);
  }

  // repeated int32 round_hu_list = 6;
  for (int i = 0; i < this->round_hu_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->round_hu_list(i), output);
  }

  // repeated int32 round_win_list = 7;
  for (int i = 0; i < this->round_win_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->round_win_list(i), output);
  }

  // optional int32 total_chi_num = 8;
  if (has_total_chi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->total_chi_num(), output);
  }

  // optional int32 total_peng_num = 9;
  if (has_total_peng_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->total_peng_num(), output);
  }

  // repeated int32 total_gang_list = 10;
  for (int i = 0; i < this->total_gang_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->total_gang_list(i), output);
  }

  // repeated int32 total_hu_list = 11;
  for (int i = 0; i < this->total_hu_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->total_hu_list(i), output);
  }

  // repeated int32 total_win_list = 12;
  for (int i = 0; i < this->total_win_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->total_win_list(i), output);
  }

  // optional int32 status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->status(), output);
  }

  // optional int32 piaofen = 14;
  if (has_piaofen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->piaofen(), output);
  }

  // optional int32 shanghuo = 15;
  if (has_shanghuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->shanghuo(), output);
  }

  // optional int32 bird_num = 16;
  if (has_bird_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bird_num(), output);
  }

  // repeated int32 cards = 17;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->cards(i), output);
  }

  // repeated int32 out_cards = 18;
  for (int i = 0; i < this->out_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->out_cards(i), output);
  }

  // repeated int32 op_list = 19;
  for (int i = 0; i < this->op_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->op_list(i), output);
  }

  // optional int32 round_win_chips = 20;
  if (has_round_win_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->round_win_chips(), output);
  }

  // repeated int32 over_chips_details = 21;
  for (int i = 0; i < this->over_chips_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->over_chips_details(i), output);
  }

  // optional int32 round_win_chips_before = 22;
  if (has_round_win_chips_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->round_win_chips_before(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameOverResultInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional int64 chips = 2;
  if (has_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chips(), target);
  }

  // optional int32 round_chi_num = 3;
  if (has_round_chi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->round_chi_num(), target);
  }

  // optional int32 round_peng_num = 4;
  if (has_round_peng_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->round_peng_num(), target);
  }

  // repeated int32 round_gang_list = 5;
  for (int i = 0; i < this->round_gang_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->round_gang_list(i), target);
  }

  // repeated int32 round_hu_list = 6;
  for (int i = 0; i < this->round_hu_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->round_hu_list(i), target);
  }

  // repeated int32 round_win_list = 7;
  for (int i = 0; i < this->round_win_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->round_win_list(i), target);
  }

  // optional int32 total_chi_num = 8;
  if (has_total_chi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->total_chi_num(), target);
  }

  // optional int32 total_peng_num = 9;
  if (has_total_peng_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->total_peng_num(), target);
  }

  // repeated int32 total_gang_list = 10;
  for (int i = 0; i < this->total_gang_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->total_gang_list(i), target);
  }

  // repeated int32 total_hu_list = 11;
  for (int i = 0; i < this->total_hu_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->total_hu_list(i), target);
  }

  // repeated int32 total_win_list = 12;
  for (int i = 0; i < this->total_win_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->total_win_list(i), target);
  }

  // optional int32 status = 13;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->status(), target);
  }

  // optional int32 piaofen = 14;
  if (has_piaofen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->piaofen(), target);
  }

  // optional int32 shanghuo = 15;
  if (has_shanghuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->shanghuo(), target);
  }

  // optional int32 bird_num = 16;
  if (has_bird_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->bird_num(), target);
  }

  // repeated int32 cards = 17;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->cards(i), target);
  }

  // repeated int32 out_cards = 18;
  for (int i = 0; i < this->out_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->out_cards(i), target);
  }

  // repeated int32 op_list = 19;
  for (int i = 0; i < this->op_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->op_list(i), target);
  }

  // optional int32 round_win_chips = 20;
  if (has_round_win_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->round_win_chips(), target);
  }

  // repeated int32 over_chips_details = 21;
  for (int i = 0; i < this->over_chips_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->over_chips_details(i), target);
  }

  // optional int32 round_win_chips_before = 22;
  if (has_round_win_chips_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->round_win_chips_before(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameOverResultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional int64 chips = 2;
    if (has_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chips());
    }

    // optional int32 round_chi_num = 3;
    if (has_round_chi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_chi_num());
    }

    // optional int32 round_peng_num = 4;
    if (has_round_peng_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_peng_num());
    }

    // optional int32 total_chi_num = 8;
    if (has_total_chi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_chi_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 total_peng_num = 9;
    if (has_total_peng_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_peng_num());
    }

    // optional int32 status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 piaofen = 14;
    if (has_piaofen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaofen());
    }

    // optional int32 shanghuo = 15;
    if (has_shanghuo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shanghuo());
    }

    // optional int32 bird_num = 16;
    if (has_bird_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bird_num());
    }

  }
  if (_has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    // optional int32 round_win_chips = 20;
    if (has_round_win_chips()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_win_chips());
    }

    // optional int32 round_win_chips_before = 22;
    if (has_round_win_chips_before()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_win_chips_before());
    }

  }
  // repeated int32 round_gang_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->round_gang_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->round_gang_list(i));
    }
    total_size += 1 * this->round_gang_list_size() + data_size;
  }

  // repeated int32 round_hu_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->round_hu_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->round_hu_list(i));
    }
    total_size += 1 * this->round_hu_list_size() + data_size;
  }

  // repeated int32 round_win_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->round_win_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->round_win_list(i));
    }
    total_size += 1 * this->round_win_list_size() + data_size;
  }

  // repeated int32 total_gang_list = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_gang_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_gang_list(i));
    }
    total_size += 1 * this->total_gang_list_size() + data_size;
  }

  // repeated int32 total_hu_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_hu_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_hu_list(i));
    }
    total_size += 1 * this->total_hu_list_size() + data_size;
  }

  // repeated int32 total_win_list = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_win_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_win_list(i));
    }
    total_size += 1 * this->total_win_list_size() + data_size;
  }

  // repeated int32 cards = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 2 * this->cards_size() + data_size;
  }

  // repeated int32 out_cards = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->out_cards(i));
    }
    total_size += 2 * this->out_cards_size() + data_size;
  }

  // repeated int32 op_list = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->op_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->op_list(i));
    }
    total_size += 2 * this->op_list_size() + data_size;
  }

  // repeated int32 over_chips_details = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->over_chips_details_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->over_chips_details(i));
    }
    total_size += 2 * this->over_chips_details_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameOverResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameOverResultInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameOverResultInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameOverResultInfo::MergeFrom(const GameOverResultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  round_gang_list_.MergeFrom(from.round_gang_list_);
  round_hu_list_.MergeFrom(from.round_hu_list_);
  round_win_list_.MergeFrom(from.round_win_list_);
  total_gang_list_.MergeFrom(from.total_gang_list_);
  total_hu_list_.MergeFrom(from.total_hu_list_);
  total_win_list_.MergeFrom(from.total_win_list_);
  cards_.MergeFrom(from.cards_);
  out_cards_.MergeFrom(from.out_cards_);
  op_list_.MergeFrom(from.op_list_);
  over_chips_details_.MergeFrom(from.over_chips_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_chips()) {
      set_chips(from.chips());
    }
    if (from.has_round_chi_num()) {
      set_round_chi_num(from.round_chi_num());
    }
    if (from.has_round_peng_num()) {
      set_round_peng_num(from.round_peng_num());
    }
    if (from.has_total_chi_num()) {
      set_total_chi_num(from.total_chi_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_peng_num()) {
      set_total_peng_num(from.total_peng_num());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_piaofen()) {
      set_piaofen(from.piaofen());
    }
    if (from.has_shanghuo()) {
      set_shanghuo(from.shanghuo());
    }
    if (from.has_bird_num()) {
      set_bird_num(from.bird_num());
    }
  }
  if (from._has_bits_[19 / 32] & (0xffu << (19 % 32))) {
    if (from.has_round_win_chips()) {
      set_round_win_chips(from.round_win_chips());
    }
    if (from.has_round_win_chips_before()) {
      set_round_win_chips_before(from.round_win_chips_before());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameOverResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameOverResultInfo::CopyFrom(const GameOverResultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverResultInfo::IsInitialized() const {

  return true;
}

void GameOverResultInfo::Swap(GameOverResultInfo* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(chips_, other->chips_);
    std::swap(round_chi_num_, other->round_chi_num_);
    std::swap(round_peng_num_, other->round_peng_num_);
    round_gang_list_.Swap(&other->round_gang_list_);
    round_hu_list_.Swap(&other->round_hu_list_);
    round_win_list_.Swap(&other->round_win_list_);
    std::swap(total_chi_num_, other->total_chi_num_);
    std::swap(total_peng_num_, other->total_peng_num_);
    total_gang_list_.Swap(&other->total_gang_list_);
    total_hu_list_.Swap(&other->total_hu_list_);
    total_win_list_.Swap(&other->total_win_list_);
    std::swap(status_, other->status_);
    std::swap(piaofen_, other->piaofen_);
    std::swap(shanghuo_, other->shanghuo_);
    std::swap(bird_num_, other->bird_num_);
    cards_.Swap(&other->cards_);
    out_cards_.Swap(&other->out_cards_);
    op_list_.Swap(&other->op_list_);
    std::swap(round_win_chips_, other->round_win_chips_);
    over_chips_details_.Swap(&other->over_chips_details_);
    std::swap(round_win_chips_before_, other->round_win_chips_before_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameOverResultInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameOverResultInfo_descriptor_;
  metadata.reflection = GameOverResultInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EvtGameOver::kWinnersFieldNumber;
const int EvtGameOver::kResultFieldNumber;
const int EvtGameOver::kDeskidFieldNumber;
const int EvtGameOver::kStatusFieldNumber;
const int EvtGameOver::kRemainRoundNumFieldNumber;
const int EvtGameOver::kBirdCardFieldNumber;
const int EvtGameOver::kTypeFieldNumber;
const int EvtGameOver::kSeatLimitFieldNumber;
const int EvtGameOver::kWinTypeFieldNumber;
const int EvtGameOver::kExtraTypeFieldNumber;
const int EvtGameOver::kLastRoundFieldNumber;
const int EvtGameOver::kOverTimeFieldNumber;
const int EvtGameOver::kOverReasonFieldNumber;
#endif  // !_MSC_VER

EvtGameOver::EvtGameOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EvtGameOver::InitAsDefaultInstance() {
  extra_type_ = const_cast< ::ExtraDeskTypeInfo*>(&::ExtraDeskTypeInfo::default_instance());
}

EvtGameOver::EvtGameOver(const EvtGameOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EvtGameOver::SharedCtor() {
  _cached_size_ = 0;
  deskid_ = 0;
  status_ = 0;
  remain_round_num_ = 0;
  type_ = 0;
  seat_limit_ = 0;
  win_type_ = 0;
  extra_type_ = NULL;
  last_round_ = false;
  over_time_ = 0;
  over_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvtGameOver::~EvtGameOver() {
  SharedDtor();
}

void EvtGameOver::SharedDtor() {
  if (this != default_instance_) {
    delete extra_type_;
  }
}

void EvtGameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvtGameOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvtGameOver_descriptor_;
}

const EvtGameOver& EvtGameOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

EvtGameOver* EvtGameOver::default_instance_ = NULL;

EvtGameOver* EvtGameOver::New() const {
  return new EvtGameOver;
}

void EvtGameOver::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    deskid_ = 0;
    status_ = 0;
    remain_round_num_ = 0;
    type_ = 0;
    seat_limit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    win_type_ = 0;
    if (has_extra_type()) {
      if (extra_type_ != NULL) extra_type_->::ExtraDeskTypeInfo::Clear();
    }
    last_round_ = false;
    over_time_ = 0;
    over_reason_ = 0;
  }
  winners_.Clear();
  result_.Clear();
  bird_card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvtGameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 winners = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winners())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_winners())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .GameOverResultInfo result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectTag(24)) goto parse_deskid;
        break;
      }

      // optional int32 deskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remain_round_num;
        break;
      }

      // optional int32 remain_round_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_round_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_round_num_)));
          set_has_remain_round_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bird_card;
        break;
      }

      // repeated int32 bird_card = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bird_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bird_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_bird_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seat_limit;
        break;
      }

      // optional int32 seat_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_limit_)));
          set_has_seat_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_win_type;
        break;
      }

      // optional int32 win_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_type_)));
          set_has_win_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_extra_type;
        break;
      }

      // optional .ExtraDeskTypeInfo extra_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_last_round;
        break;
      }

      // optional bool last_round = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_round_)));
          set_has_last_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_over_time;
        break;
      }

      // optional int32 over_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &over_time_)));
          set_has_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_over_reason;
        break;
      }

      // optional int32 over_reason = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &over_reason_)));
          set_has_over_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EvtGameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 winners = 1 [packed = true];
  if (this->winners_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_winners_cached_byte_size_);
  }
  for (int i = 0; i < this->winners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->winners(i), output);
  }

  // repeated .GameOverResultInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  // optional int32 deskid = 3;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deskid(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional int32 remain_round_num = 5;
  if (has_remain_round_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remain_round_num(), output);
  }

  // repeated int32 bird_card = 6 [packed = true];
  if (this->bird_card_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bird_card_cached_byte_size_);
  }
  for (int i = 0; i < this->bird_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->bird_card(i), output);
  }

  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  // optional int32 seat_limit = 8;
  if (has_seat_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->seat_limit(), output);
  }

  // optional int32 win_type = 9;
  if (has_win_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->win_type(), output);
  }

  // optional .ExtraDeskTypeInfo extra_type = 10;
  if (has_extra_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->extra_type(), output);
  }

  // optional bool last_round = 11;
  if (has_last_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->last_round(), output);
  }

  // optional int32 over_time = 12;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->over_time(), output);
  }

  // optional int32 over_reason = 13;
  if (has_over_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->over_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EvtGameOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 winners = 1 [packed = true];
  if (this->winners_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _winners_cached_byte_size_, target);
  }
  for (int i = 0; i < this->winners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->winners(i), target);
  }

  // repeated .GameOverResultInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  // optional int32 deskid = 3;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deskid(), target);
  }

  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // optional int32 remain_round_num = 5;
  if (has_remain_round_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remain_round_num(), target);
  }

  // repeated int32 bird_card = 6 [packed = true];
  if (this->bird_card_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bird_card_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bird_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bird_card(i), target);
  }

  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  // optional int32 seat_limit = 8;
  if (has_seat_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->seat_limit(), target);
  }

  // optional int32 win_type = 9;
  if (has_win_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->win_type(), target);
  }

  // optional .ExtraDeskTypeInfo extra_type = 10;
  if (has_extra_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->extra_type(), target);
  }

  // optional bool last_round = 11;
  if (has_last_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->last_round(), target);
  }

  // optional int32 over_time = 12;
  if (has_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->over_time(), target);
  }

  // optional int32 over_reason = 13;
  if (has_over_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->over_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EvtGameOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 deskid = 3;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 remain_round_num = 5;
    if (has_remain_round_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_round_num());
    }

    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 seat_limit = 8;
    if (has_seat_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_limit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 win_type = 9;
    if (has_win_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_type());
    }

    // optional .ExtraDeskTypeInfo extra_type = 10;
    if (has_extra_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_type());
    }

    // optional bool last_round = 11;
    if (has_last_round()) {
      total_size += 1 + 1;
    }

    // optional int32 over_time = 12;
    if (has_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->over_time());
    }

    // optional int32 over_reason = 13;
    if (has_over_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->over_reason());
    }

  }
  // repeated int32 winners = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->winners_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winners(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _winners_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .GameOverResultInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  // repeated int32 bird_card = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->bird_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bird_card(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bird_card_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvtGameOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvtGameOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvtGameOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvtGameOver::MergeFrom(const EvtGameOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  winners_.MergeFrom(from.winners_);
  result_.MergeFrom(from.result_);
  bird_card_.MergeFrom(from.bird_card_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_remain_round_num()) {
      set_remain_round_num(from.remain_round_num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_seat_limit()) {
      set_seat_limit(from.seat_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win_type()) {
      set_win_type(from.win_type());
    }
    if (from.has_extra_type()) {
      mutable_extra_type()->::ExtraDeskTypeInfo::MergeFrom(from.extra_type());
    }
    if (from.has_last_round()) {
      set_last_round(from.last_round());
    }
    if (from.has_over_time()) {
      set_over_time(from.over_time());
    }
    if (from.has_over_reason()) {
      set_over_reason(from.over_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvtGameOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvtGameOver::CopyFrom(const EvtGameOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvtGameOver::IsInitialized() const {

  return true;
}

void EvtGameOver::Swap(EvtGameOver* other) {
  if (other != this) {
    winners_.Swap(&other->winners_);
    result_.Swap(&other->result_);
    std::swap(deskid_, other->deskid_);
    std::swap(status_, other->status_);
    std::swap(remain_round_num_, other->remain_round_num_);
    bird_card_.Swap(&other->bird_card_);
    std::swap(type_, other->type_);
    std::swap(seat_limit_, other->seat_limit_);
    std::swap(win_type_, other->win_type_);
    std::swap(extra_type_, other->extra_type_);
    std::swap(last_round_, other->last_round_);
    std::swap(over_time_, other->over_time_);
    std::swap(over_reason_, other->over_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvtGameOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvtGameOver_descriptor_;
  metadata.reflection = EvtGameOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordInfo::kUinFieldNumber;
const int RecordInfo::kRoleFieldNumber;
const int RecordInfo::kChipsFieldNumber;
const int RecordInfo::kRoundWinChipsFieldNumber;
const int RecordInfo::kRoundChiNumFieldNumber;
const int RecordInfo::kRoundPengNumFieldNumber;
const int RecordInfo::kRoundGangListFieldNumber;
const int RecordInfo::kRoundHuListFieldNumber;
const int RecordInfo::kRoundWinListFieldNumber;
const int RecordInfo::kTotalChiNumFieldNumber;
const int RecordInfo::kTotalPengNumFieldNumber;
const int RecordInfo::kTotalGangListFieldNumber;
const int RecordInfo::kTotalHuListFieldNumber;
const int RecordInfo::kTotalWinListFieldNumber;
const int RecordInfo::kPiaofenFieldNumber;
const int RecordInfo::kShanghuoFieldNumber;
const int RecordInfo::kBirdNumFieldNumber;
const int RecordInfo::kCardsFieldNumber;
const int RecordInfo::kOutCardsFieldNumber;
const int RecordInfo::kOpListFieldNumber;
const int RecordInfo::kOverChipsDetailsFieldNumber;
const int RecordInfo::kRoundWinChipsBeforeFieldNumber;
const int RecordInfo::kNickFieldNumber;
const int RecordInfo::kSeatidFieldNumber;
const int RecordInfo::kSexFieldNumber;
const int RecordInfo::kPortraitFieldNumber;
#endif  // !_MSC_VER

RecordInfo::RecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordInfo::InitAsDefaultInstance() {
}

RecordInfo::RecordInfo(const RecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordInfo::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  role_ = 0;
  chips_ = GOOGLE_LONGLONG(0);
  round_win_chips_ = 0;
  round_chi_num_ = 0;
  round_peng_num_ = 0;
  total_chi_num_ = 0;
  total_peng_num_ = 0;
  piaofen_ = 0;
  shanghuo_ = 0;
  bird_num_ = 0;
  round_win_chips_before_ = 0;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seatid_ = 0;
  sex_ = 0;
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordInfo::~RecordInfo() {
  SharedDtor();
}

void RecordInfo::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (portrait_ != &::google::protobuf::internal::kEmptyString) {
    delete portrait_;
  }
  if (this != default_instance_) {
  }
}

void RecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordInfo_descriptor_;
}

const RecordInfo& RecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

RecordInfo* RecordInfo::default_instance_ = NULL;

RecordInfo* RecordInfo::New() const {
  return new RecordInfo;
}

void RecordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    role_ = 0;
    chips_ = GOOGLE_LONGLONG(0);
    round_win_chips_ = 0;
    round_chi_num_ = 0;
    round_peng_num_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    total_chi_num_ = 0;
    total_peng_num_ = 0;
    piaofen_ = 0;
    shanghuo_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bird_num_ = 0;
    round_win_chips_before_ = 0;
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    seatid_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sex_ = 0;
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::kEmptyString) {
        portrait_->clear();
      }
    }
  }
  round_gang_list_.Clear();
  round_hu_list_.Clear();
  round_win_list_.Clear();
  total_gang_list_.Clear();
  total_hu_list_.Clear();
  total_win_list_.Clear();
  cards_.Clear();
  out_cards_.Clear();
  op_list_.Clear();
  over_chips_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role;
        break;
      }

      // optional int32 role = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chips;
        break;
      }

      // optional int64 chips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chips_)));
          set_has_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_round_win_chips;
        break;
      }

      // optional int32 round_win_chips = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_win_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_win_chips_)));
          set_has_round_win_chips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_round_chi_num;
        break;
      }

      // optional int32 round_chi_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_chi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_chi_num_)));
          set_has_round_chi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_round_peng_num;
        break;
      }

      // optional int32 round_peng_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_peng_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_peng_num_)));
          set_has_round_peng_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_round_gang_list;
        break;
      }

      // repeated int32 round_gang_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_gang_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_round_gang_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_round_gang_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_round_gang_list;
        if (input->ExpectTag(64)) goto parse_round_hu_list;
        break;
      }

      // repeated int32 round_hu_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_hu_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_round_hu_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_round_hu_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_round_hu_list;
        if (input->ExpectTag(72)) goto parse_round_win_list;
        break;
      }

      // repeated int32 round_win_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_win_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_round_win_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_round_win_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_round_win_list;
        if (input->ExpectTag(80)) goto parse_total_chi_num;
        break;
      }

      // optional int32 total_chi_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_chi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_chi_num_)));
          set_has_total_chi_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_peng_num;
        break;
      }

      // optional int32 total_peng_num = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_peng_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_peng_num_)));
          set_has_total_peng_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_total_gang_list;
        break;
      }

      // repeated int32 total_gang_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_gang_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_total_gang_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_gang_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_total_gang_list;
        if (input->ExpectTag(104)) goto parse_total_hu_list;
        break;
      }

      // repeated int32 total_hu_list = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hu_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_total_hu_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_hu_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_total_hu_list;
        if (input->ExpectTag(112)) goto parse_total_win_list;
        break;
      }

      // repeated int32 total_win_list = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_win_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_total_win_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_win_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_total_win_list;
        if (input->ExpectTag(120)) goto parse_piaofen;
        break;
      }

      // optional int32 piaofen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piaofen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaofen_)));
          set_has_piaofen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_shanghuo;
        break;
      }

      // optional int32 shanghuo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shanghuo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shanghuo_)));
          set_has_shanghuo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bird_num;
        break;
      }

      // optional int32 bird_num = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bird_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bird_num_)));
          set_has_bird_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_cards;
        if (input->ExpectTag(152)) goto parse_out_cards;
        break;
      }

      // repeated int32 out_cards = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_out_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_out_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_out_cards;
        if (input->ExpectTag(160)) goto parse_op_list;
        break;
      }

      // repeated int32 op_list = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_op_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_op_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_op_list;
        if (input->ExpectTag(168)) goto parse_over_chips_details;
        break;
      }

      // repeated int32 over_chips_details = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_chips_details:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_over_chips_details())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_over_chips_details())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_over_chips_details;
        if (input->ExpectTag(176)) goto parse_round_win_chips_before;
        break;
      }

      // optional int32 round_win_chips_before = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_win_chips_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_win_chips_before_)));
          set_has_round_win_chips_before();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_nick;
        break;
      }

      // optional string nick = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_sex;
        break;
      }

      // optional int32 sex = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_portrait;
        break;
      }

      // optional string portrait = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional int32 role = 2;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role(), output);
  }

  // optional int64 chips = 3;
  if (has_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->chips(), output);
  }

  // optional int32 round_win_chips = 4;
  if (has_round_win_chips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->round_win_chips(), output);
  }

  // optional int32 round_chi_num = 5;
  if (has_round_chi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->round_chi_num(), output);
  }

  // optional int32 round_peng_num = 6;
  if (has_round_peng_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->round_peng_num(), output);
  }

  // repeated int32 round_gang_list = 7;
  for (int i = 0; i < this->round_gang_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->round_gang_list(i), output);
  }

  // repeated int32 round_hu_list = 8;
  for (int i = 0; i < this->round_hu_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->round_hu_list(i), output);
  }

  // repeated int32 round_win_list = 9;
  for (int i = 0; i < this->round_win_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->round_win_list(i), output);
  }

  // optional int32 total_chi_num = 10;
  if (has_total_chi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_chi_num(), output);
  }

  // optional int32 total_peng_num = 11;
  if (has_total_peng_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->total_peng_num(), output);
  }

  // repeated int32 total_gang_list = 12;
  for (int i = 0; i < this->total_gang_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->total_gang_list(i), output);
  }

  // repeated int32 total_hu_list = 13;
  for (int i = 0; i < this->total_hu_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->total_hu_list(i), output);
  }

  // repeated int32 total_win_list = 14;
  for (int i = 0; i < this->total_win_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->total_win_list(i), output);
  }

  // optional int32 piaofen = 15;
  if (has_piaofen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->piaofen(), output);
  }

  // optional int32 shanghuo = 16;
  if (has_shanghuo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->shanghuo(), output);
  }

  // optional int32 bird_num = 17;
  if (has_bird_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bird_num(), output);
  }

  // repeated int32 cards = 18;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->cards(i), output);
  }

  // repeated int32 out_cards = 19;
  for (int i = 0; i < this->out_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->out_cards(i), output);
  }

  // repeated int32 op_list = 20;
  for (int i = 0; i < this->op_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->op_list(i), output);
  }

  // repeated int32 over_chips_details = 21;
  for (int i = 0; i < this->over_chips_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->over_chips_details(i), output);
  }

  // optional int32 round_win_chips_before = 22;
  if (has_round_win_chips_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->round_win_chips_before(), output);
  }

  // optional string nick = 23;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->nick(), output);
  }

  // optional int32 seatid = 24;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->seatid(), output);
  }

  // optional int32 sex = 25;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->sex(), output);
  }

  // optional string portrait = 26;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->portrait(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional int32 role = 2;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role(), target);
  }

  // optional int64 chips = 3;
  if (has_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->chips(), target);
  }

  // optional int32 round_win_chips = 4;
  if (has_round_win_chips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->round_win_chips(), target);
  }

  // optional int32 round_chi_num = 5;
  if (has_round_chi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->round_chi_num(), target);
  }

  // optional int32 round_peng_num = 6;
  if (has_round_peng_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->round_peng_num(), target);
  }

  // repeated int32 round_gang_list = 7;
  for (int i = 0; i < this->round_gang_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->round_gang_list(i), target);
  }

  // repeated int32 round_hu_list = 8;
  for (int i = 0; i < this->round_hu_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->round_hu_list(i), target);
  }

  // repeated int32 round_win_list = 9;
  for (int i = 0; i < this->round_win_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->round_win_list(i), target);
  }

  // optional int32 total_chi_num = 10;
  if (has_total_chi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->total_chi_num(), target);
  }

  // optional int32 total_peng_num = 11;
  if (has_total_peng_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->total_peng_num(), target);
  }

  // repeated int32 total_gang_list = 12;
  for (int i = 0; i < this->total_gang_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->total_gang_list(i), target);
  }

  // repeated int32 total_hu_list = 13;
  for (int i = 0; i < this->total_hu_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->total_hu_list(i), target);
  }

  // repeated int32 total_win_list = 14;
  for (int i = 0; i < this->total_win_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->total_win_list(i), target);
  }

  // optional int32 piaofen = 15;
  if (has_piaofen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->piaofen(), target);
  }

  // optional int32 shanghuo = 16;
  if (has_shanghuo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->shanghuo(), target);
  }

  // optional int32 bird_num = 17;
  if (has_bird_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bird_num(), target);
  }

  // repeated int32 cards = 18;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->cards(i), target);
  }

  // repeated int32 out_cards = 19;
  for (int i = 0; i < this->out_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->out_cards(i), target);
  }

  // repeated int32 op_list = 20;
  for (int i = 0; i < this->op_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->op_list(i), target);
  }

  // repeated int32 over_chips_details = 21;
  for (int i = 0; i < this->over_chips_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->over_chips_details(i), target);
  }

  // optional int32 round_win_chips_before = 22;
  if (has_round_win_chips_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->round_win_chips_before(), target);
  }

  // optional string nick = 23;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->nick(), target);
  }

  // optional int32 seatid = 24;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->seatid(), target);
  }

  // optional int32 sex = 25;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->sex(), target);
  }

  // optional string portrait = 26;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->portrait(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional int32 role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

    // optional int64 chips = 3;
    if (has_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chips());
    }

    // optional int32 round_win_chips = 4;
    if (has_round_win_chips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_win_chips());
    }

    // optional int32 round_chi_num = 5;
    if (has_round_chi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_chi_num());
    }

    // optional int32 round_peng_num = 6;
    if (has_round_peng_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_peng_num());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 total_chi_num = 10;
    if (has_total_chi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_chi_num());
    }

    // optional int32 total_peng_num = 11;
    if (has_total_peng_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_peng_num());
    }

    // optional int32 piaofen = 15;
    if (has_piaofen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaofen());
    }

    // optional int32 shanghuo = 16;
    if (has_shanghuo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shanghuo());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 bird_num = 17;
    if (has_bird_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bird_num());
    }

    // optional int32 round_win_chips_before = 22;
    if (has_round_win_chips_before()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_win_chips_before());
    }

    // optional string nick = 23;
    if (has_nick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional int32 seatid = 24;
    if (has_seatid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 sex = 25;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string portrait = 26;
    if (has_portrait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

  }
  // repeated int32 round_gang_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->round_gang_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->round_gang_list(i));
    }
    total_size += 1 * this->round_gang_list_size() + data_size;
  }

  // repeated int32 round_hu_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->round_hu_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->round_hu_list(i));
    }
    total_size += 1 * this->round_hu_list_size() + data_size;
  }

  // repeated int32 round_win_list = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->round_win_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->round_win_list(i));
    }
    total_size += 1 * this->round_win_list_size() + data_size;
  }

  // repeated int32 total_gang_list = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_gang_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_gang_list(i));
    }
    total_size += 1 * this->total_gang_list_size() + data_size;
  }

  // repeated int32 total_hu_list = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_hu_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_hu_list(i));
    }
    total_size += 1 * this->total_hu_list_size() + data_size;
  }

  // repeated int32 total_win_list = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_win_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_win_list(i));
    }
    total_size += 1 * this->total_win_list_size() + data_size;
  }

  // repeated int32 cards = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 2 * this->cards_size() + data_size;
  }

  // repeated int32 out_cards = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->out_cards(i));
    }
    total_size += 2 * this->out_cards_size() + data_size;
  }

  // repeated int32 op_list = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->op_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->op_list(i));
    }
    total_size += 2 * this->op_list_size() + data_size;
  }

  // repeated int32 over_chips_details = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->over_chips_details_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->over_chips_details(i));
    }
    total_size += 2 * this->over_chips_details_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordInfo::MergeFrom(const RecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  round_gang_list_.MergeFrom(from.round_gang_list_);
  round_hu_list_.MergeFrom(from.round_hu_list_);
  round_win_list_.MergeFrom(from.round_win_list_);
  total_gang_list_.MergeFrom(from.total_gang_list_);
  total_hu_list_.MergeFrom(from.total_hu_list_);
  total_win_list_.MergeFrom(from.total_win_list_);
  cards_.MergeFrom(from.cards_);
  out_cards_.MergeFrom(from.out_cards_);
  op_list_.MergeFrom(from.op_list_);
  over_chips_details_.MergeFrom(from.over_chips_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_chips()) {
      set_chips(from.chips());
    }
    if (from.has_round_win_chips()) {
      set_round_win_chips(from.round_win_chips());
    }
    if (from.has_round_chi_num()) {
      set_round_chi_num(from.round_chi_num());
    }
    if (from.has_round_peng_num()) {
      set_round_peng_num(from.round_peng_num());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_total_chi_num()) {
      set_total_chi_num(from.total_chi_num());
    }
    if (from.has_total_peng_num()) {
      set_total_peng_num(from.total_peng_num());
    }
    if (from.has_piaofen()) {
      set_piaofen(from.piaofen());
    }
    if (from.has_shanghuo()) {
      set_shanghuo(from.shanghuo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bird_num()) {
      set_bird_num(from.bird_num());
    }
    if (from.has_round_win_chips_before()) {
      set_round_win_chips_before(from.round_win_chips_before());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordInfo::CopyFrom(const RecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordInfo::IsInitialized() const {

  return true;
}

void RecordInfo::Swap(RecordInfo* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(role_, other->role_);
    std::swap(chips_, other->chips_);
    std::swap(round_win_chips_, other->round_win_chips_);
    std::swap(round_chi_num_, other->round_chi_num_);
    std::swap(round_peng_num_, other->round_peng_num_);
    round_gang_list_.Swap(&other->round_gang_list_);
    round_hu_list_.Swap(&other->round_hu_list_);
    round_win_list_.Swap(&other->round_win_list_);
    std::swap(total_chi_num_, other->total_chi_num_);
    std::swap(total_peng_num_, other->total_peng_num_);
    total_gang_list_.Swap(&other->total_gang_list_);
    total_hu_list_.Swap(&other->total_hu_list_);
    total_win_list_.Swap(&other->total_win_list_);
    std::swap(piaofen_, other->piaofen_);
    std::swap(shanghuo_, other->shanghuo_);
    std::swap(bird_num_, other->bird_num_);
    cards_.Swap(&other->cards_);
    out_cards_.Swap(&other->out_cards_);
    op_list_.Swap(&other->op_list_);
    over_chips_details_.Swap(&other->over_chips_details_);
    std::swap(round_win_chips_before_, other->round_win_chips_before_);
    std::swap(nick_, other->nick_);
    std::swap(seatid_, other->seatid_);
    std::swap(sex_, other->sex_);
    std::swap(portrait_, other->portrait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordInfo_descriptor_;
  metadata.reflection = RecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PerPlayRecord::kRoundidFieldNumber;
const int PerPlayRecord::kResultFieldNumber;
const int PerPlayRecord::kDeskidFieldNumber;
const int PerPlayRecord::kGameRoundFieldNumber;
const int PerPlayRecord::kDeskRoundFieldNumber;
const int PerPlayRecord::kBirdCardFieldNumber;
const int PerPlayRecord::kTypeFieldNumber;
const int PerPlayRecord::kSeatLimitFieldNumber;
const int PerPlayRecord::kWinTypeFieldNumber;
const int PerPlayRecord::kExtraTypeFieldNumber;
const int PerPlayRecord::kOverTimeFieldNumber;
const int PerPlayRecord::kMasterUinFieldNumber;
const int PerPlayRecord::kWinnersFieldNumber;
#endif  // !_MSC_VER

PerPlayRecord::PerPlayRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PerPlayRecord::InitAsDefaultInstance() {
  extra_type_ = const_cast< ::ExtraDeskTypeInfo*>(&::ExtraDeskTypeInfo::default_instance());
}

PerPlayRecord::PerPlayRecord(const PerPlayRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PerPlayRecord::SharedCtor() {
  _cached_size_ = 0;
  roundid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deskid_ = 0;
  game_round_ = 0;
  desk_round_ = 0;
  type_ = 0;
  seat_limit_ = 0;
  win_type_ = 0;
  extra_type_ = NULL;
  over_time_ = 0;
  master_uin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerPlayRecord::~PerPlayRecord() {
  SharedDtor();
}

void PerPlayRecord::SharedDtor() {
  if (roundid_ != &::google::protobuf::internal::kEmptyString) {
    delete roundid_;
  }
  if (this != default_instance_) {
    delete extra_type_;
  }
}

void PerPlayRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerPlayRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerPlayRecord_descriptor_;
}

const PerPlayRecord& PerPlayRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

PerPlayRecord* PerPlayRecord::default_instance_ = NULL;

PerPlayRecord* PerPlayRecord::New() const {
  return new PerPlayRecord;
}

void PerPlayRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roundid()) {
      if (roundid_ != &::google::protobuf::internal::kEmptyString) {
        roundid_->clear();
      }
    }
    deskid_ = 0;
    game_round_ = 0;
    desk_round_ = 0;
    type_ = 0;
    seat_limit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    win_type_ = 0;
    if (has_extra_type()) {
      if (extra_type_ != NULL) extra_type_->::ExtraDeskTypeInfo::Clear();
    }
    over_time_ = 0;
    master_uin_ = 0;
  }
  result_.Clear();
  bird_card_.Clear();
  winners_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PerPlayRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roundid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roundid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roundid().data(), this->roundid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .RecordInfo result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectTag(24)) goto parse_deskid;
        break;
      }

      // optional int32 deskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_round;
        break;
      }

      // optional int32 game_round = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_desk_round;
        break;
      }

      // optional int32 desk_round = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_round_)));
          set_has_desk_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bird_card;
        break;
      }

      // repeated int32 bird_card = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bird_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bird_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_bird_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional int32 type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_seat_limit;
        break;
      }

      // optional int32 seat_limit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_limit_)));
          set_has_seat_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_win_type;
        break;
      }

      // optional int32 win_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_type_)));
          set_has_win_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_extra_type;
        break;
      }

      // optional .ExtraDeskTypeInfo extra_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_over_time;
        break;
      }

      // optional int32 over_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &over_time_)));
          set_has_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_master_uin;
        break;
      }

      // optional int32 master_uin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_uin_)));
          set_has_master_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_winners;
        break;
      }

      // repeated int32 winners = 14 [packed = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winners:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winners())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 114, input, this->mutable_winners())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PerPlayRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roundid = 1;
  if (has_roundid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roundid().data(), this->roundid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roundid(), output);
  }

  // repeated .RecordInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  // optional int32 deskid = 3;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deskid(), output);
  }

  // optional int32 game_round = 4;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_round(), output);
  }

  // optional int32 desk_round = 6;
  if (has_desk_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->desk_round(), output);
  }

  // repeated int32 bird_card = 7 [packed = true];
  if (this->bird_card_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bird_card_cached_byte_size_);
  }
  for (int i = 0; i < this->bird_card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->bird_card(i), output);
  }

  // optional int32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  // optional int32 seat_limit = 9;
  if (has_seat_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seat_limit(), output);
  }

  // optional int32 win_type = 10;
  if (has_win_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->win_type(), output);
  }

  // optional .ExtraDeskTypeInfo extra_type = 11;
  if (has_extra_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->extra_type(), output);
  }

  // optional int32 over_time = 12;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->over_time(), output);
  }

  // optional int32 master_uin = 13;
  if (has_master_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->master_uin(), output);
  }

  // repeated int32 winners = 14 [packed = true];
  if (this->winners_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_winners_cached_byte_size_);
  }
  for (int i = 0; i < this->winners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->winners(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PerPlayRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roundid = 1;
  if (has_roundid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roundid().data(), this->roundid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roundid(), target);
  }

  // repeated .RecordInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  // optional int32 deskid = 3;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deskid(), target);
  }

  // optional int32 game_round = 4;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_round(), target);
  }

  // optional int32 desk_round = 6;
  if (has_desk_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->desk_round(), target);
  }

  // repeated int32 bird_card = 7 [packed = true];
  if (this->bird_card_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _bird_card_cached_byte_size_, target);
  }
  for (int i = 0; i < this->bird_card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bird_card(i), target);
  }

  // optional int32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  // optional int32 seat_limit = 9;
  if (has_seat_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seat_limit(), target);
  }

  // optional int32 win_type = 10;
  if (has_win_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->win_type(), target);
  }

  // optional .ExtraDeskTypeInfo extra_type = 11;
  if (has_extra_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->extra_type(), target);
  }

  // optional int32 over_time = 12;
  if (has_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->over_time(), target);
  }

  // optional int32 master_uin = 13;
  if (has_master_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->master_uin(), target);
  }

  // repeated int32 winners = 14 [packed = true];
  if (this->winners_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _winners_cached_byte_size_, target);
  }
  for (int i = 0; i < this->winners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->winners(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PerPlayRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roundid = 1;
    if (has_roundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roundid());
    }

    // optional int32 deskid = 3;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 game_round = 4;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional int32 desk_round = 6;
    if (has_desk_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_round());
    }

    // optional int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 seat_limit = 9;
    if (has_seat_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_limit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 win_type = 10;
    if (has_win_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_type());
    }

    // optional .ExtraDeskTypeInfo extra_type = 11;
    if (has_extra_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_type());
    }

    // optional int32 over_time = 12;
    if (has_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->over_time());
    }

    // optional int32 master_uin = 13;
    if (has_master_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_uin());
    }

  }
  // repeated .RecordInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  // repeated int32 bird_card = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->bird_card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bird_card(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bird_card_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 winners = 14 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->winners_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winners(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _winners_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerPlayRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PerPlayRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PerPlayRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerPlayRecord::MergeFrom(const PerPlayRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  bird_card_.MergeFrom(from.bird_card_);
  winners_.MergeFrom(from.winners_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roundid()) {
      set_roundid(from.roundid());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_desk_round()) {
      set_desk_round(from.desk_round());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_seat_limit()) {
      set_seat_limit(from.seat_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win_type()) {
      set_win_type(from.win_type());
    }
    if (from.has_extra_type()) {
      mutable_extra_type()->::ExtraDeskTypeInfo::MergeFrom(from.extra_type());
    }
    if (from.has_over_time()) {
      set_over_time(from.over_time());
    }
    if (from.has_master_uin()) {
      set_master_uin(from.master_uin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PerPlayRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerPlayRecord::CopyFrom(const PerPlayRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerPlayRecord::IsInitialized() const {

  return true;
}

void PerPlayRecord::Swap(PerPlayRecord* other) {
  if (other != this) {
    std::swap(roundid_, other->roundid_);
    result_.Swap(&other->result_);
    std::swap(deskid_, other->deskid_);
    std::swap(game_round_, other->game_round_);
    std::swap(desk_round_, other->desk_round_);
    bird_card_.Swap(&other->bird_card_);
    std::swap(type_, other->type_);
    std::swap(seat_limit_, other->seat_limit_);
    std::swap(win_type_, other->win_type_);
    std::swap(extra_type_, other->extra_type_);
    std::swap(over_time_, other->over_time_);
    std::swap(master_uin_, other->master_uin_);
    winners_.Swap(&other->winners_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PerPlayRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerPlayRecord_descriptor_;
  metadata.reflection = PerPlayRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MyPlayRecordListReq::MyPlayRecordListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyPlayRecordListReq::InitAsDefaultInstance() {
}

MyPlayRecordListReq::MyPlayRecordListReq(const MyPlayRecordListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyPlayRecordListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyPlayRecordListReq::~MyPlayRecordListReq() {
  SharedDtor();
}

void MyPlayRecordListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyPlayRecordListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyPlayRecordListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyPlayRecordListReq_descriptor_;
}

const MyPlayRecordListReq& MyPlayRecordListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MyPlayRecordListReq* MyPlayRecordListReq::default_instance_ = NULL;

MyPlayRecordListReq* MyPlayRecordListReq::New() const {
  return new MyPlayRecordListReq;
}

void MyPlayRecordListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyPlayRecordListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MyPlayRecordListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyPlayRecordListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyPlayRecordListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyPlayRecordListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyPlayRecordListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyPlayRecordListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyPlayRecordListReq::MergeFrom(const MyPlayRecordListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyPlayRecordListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyPlayRecordListReq::CopyFrom(const MyPlayRecordListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyPlayRecordListReq::IsInitialized() const {

  return true;
}

void MyPlayRecordListReq::Swap(MyPlayRecordListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyPlayRecordListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyPlayRecordListReq_descriptor_;
  metadata.reflection = MyPlayRecordListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyPlayRecordListRsp::kRecordListFieldNumber;
const int MyPlayRecordListRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MyPlayRecordListRsp::MyPlayRecordListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyPlayRecordListRsp::InitAsDefaultInstance() {
}

MyPlayRecordListRsp::MyPlayRecordListRsp(const MyPlayRecordListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyPlayRecordListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyPlayRecordListRsp::~MyPlayRecordListRsp() {
  SharedDtor();
}

void MyPlayRecordListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyPlayRecordListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyPlayRecordListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyPlayRecordListRsp_descriptor_;
}

const MyPlayRecordListRsp& MyPlayRecordListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

MyPlayRecordListRsp* MyPlayRecordListRsp::default_instance_ = NULL;

MyPlayRecordListRsp* MyPlayRecordListRsp::New() const {
  return new MyPlayRecordListRsp;
}

void MyPlayRecordListRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ret_ = 0;
  }
  record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyPlayRecordListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PerPlayRecord record_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record_list;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyPlayRecordListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PerPlayRecord record_list = 1;
  for (int i = 0; i < this->record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_list(i), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyPlayRecordListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PerPlayRecord record_list = 1;
  for (int i = 0; i < this->record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_list(i), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyPlayRecordListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .PerPlayRecord record_list = 1;
  total_size += 1 * this->record_list_size();
  for (int i = 0; i < this->record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyPlayRecordListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyPlayRecordListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyPlayRecordListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyPlayRecordListRsp::MergeFrom(const MyPlayRecordListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_list_.MergeFrom(from.record_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyPlayRecordListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyPlayRecordListRsp::CopyFrom(const MyPlayRecordListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyPlayRecordListRsp::IsInitialized() const {

  return true;
}

void MyPlayRecordListRsp::Swap(MyPlayRecordListRsp* other) {
  if (other != this) {
    record_list_.Swap(&other->record_list_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyPlayRecordListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyPlayRecordListRsp_descriptor_;
  metadata.reflection = MyPlayRecordListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoundPlayRecordsReq::kRoundIdFieldNumber;
const int RoundPlayRecordsReq::kGameRoundIndexFieldNumber;
#endif  // !_MSC_VER

RoundPlayRecordsReq::RoundPlayRecordsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoundPlayRecordsReq::InitAsDefaultInstance() {
}

RoundPlayRecordsReq::RoundPlayRecordsReq(const RoundPlayRecordsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoundPlayRecordsReq::SharedCtor() {
  _cached_size_ = 0;
  round_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_round_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoundPlayRecordsReq::~RoundPlayRecordsReq() {
  SharedDtor();
}

void RoundPlayRecordsReq::SharedDtor() {
  if (round_id_ != &::google::protobuf::internal::kEmptyString) {
    delete round_id_;
  }
  if (this != default_instance_) {
  }
}

void RoundPlayRecordsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoundPlayRecordsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoundPlayRecordsReq_descriptor_;
}

const RoundPlayRecordsReq& RoundPlayRecordsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

RoundPlayRecordsReq* RoundPlayRecordsReq::default_instance_ = NULL;

RoundPlayRecordsReq* RoundPlayRecordsReq::New() const {
  return new RoundPlayRecordsReq;
}

void RoundPlayRecordsReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_round_id()) {
      if (round_id_ != &::google::protobuf::internal::kEmptyString) {
        round_id_->clear();
      }
    }
    game_round_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoundPlayRecordsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string round_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_round_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->round_id().data(), this->round_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_round_index;
        break;
      }

      // optional int32 game_round_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_round_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_index_)));
          set_has_game_round_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoundPlayRecordsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string round_id = 1;
  if (has_round_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->round_id().data(), this->round_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->round_id(), output);
  }

  // optional int32 game_round_index = 2;
  if (has_game_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_round_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoundPlayRecordsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string round_id = 1;
  if (has_round_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->round_id().data(), this->round_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->round_id(), target);
  }

  // optional int32 game_round_index = 2;
  if (has_game_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_round_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoundPlayRecordsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string round_id = 1;
    if (has_round_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->round_id());
    }

    // optional int32 game_round_index = 2;
    if (has_game_round_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoundPlayRecordsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoundPlayRecordsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoundPlayRecordsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoundPlayRecordsReq::MergeFrom(const RoundPlayRecordsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round_id()) {
      set_round_id(from.round_id());
    }
    if (from.has_game_round_index()) {
      set_game_round_index(from.game_round_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoundPlayRecordsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundPlayRecordsReq::CopyFrom(const RoundPlayRecordsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundPlayRecordsReq::IsInitialized() const {

  return true;
}

void RoundPlayRecordsReq::Swap(RoundPlayRecordsReq* other) {
  if (other != this) {
    std::swap(round_id_, other->round_id_);
    std::swap(game_round_index_, other->game_round_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoundPlayRecordsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoundPlayRecordsReq_descriptor_;
  metadata.reflection = RoundPlayRecordsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoundPlayRecordsRsp::kRecordListFieldNumber;
const int RoundPlayRecordsRsp::kRetFieldNumber;
#endif  // !_MSC_VER

RoundPlayRecordsRsp::RoundPlayRecordsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoundPlayRecordsRsp::InitAsDefaultInstance() {
}

RoundPlayRecordsRsp::RoundPlayRecordsRsp(const RoundPlayRecordsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoundPlayRecordsRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoundPlayRecordsRsp::~RoundPlayRecordsRsp() {
  SharedDtor();
}

void RoundPlayRecordsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoundPlayRecordsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoundPlayRecordsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoundPlayRecordsRsp_descriptor_;
}

const RoundPlayRecordsRsp& RoundPlayRecordsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

RoundPlayRecordsRsp* RoundPlayRecordsRsp::default_instance_ = NULL;

RoundPlayRecordsRsp* RoundPlayRecordsRsp::New() const {
  return new RoundPlayRecordsRsp;
}

void RoundPlayRecordsRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ret_ = 0;
  }
  record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoundPlayRecordsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PerPlayRecord record_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record_list;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoundPlayRecordsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PerPlayRecord record_list = 1;
  for (int i = 0; i < this->record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_list(i), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoundPlayRecordsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PerPlayRecord record_list = 1;
  for (int i = 0; i < this->record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_list(i), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoundPlayRecordsRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .PerPlayRecord record_list = 1;
  total_size += 1 * this->record_list_size();
  for (int i = 0; i < this->record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoundPlayRecordsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoundPlayRecordsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoundPlayRecordsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoundPlayRecordsRsp::MergeFrom(const RoundPlayRecordsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_list_.MergeFrom(from.record_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoundPlayRecordsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundPlayRecordsRsp::CopyFrom(const RoundPlayRecordsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundPlayRecordsRsp::IsInitialized() const {

  return true;
}

void RoundPlayRecordsRsp::Swap(RoundPlayRecordsRsp* other) {
  if (other != this) {
    record_list_.Swap(&other->record_list_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoundPlayRecordsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoundPlayRecordsRsp_descriptor_;
  metadata.reflection = RoundPlayRecordsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeskChatReq::kContentFieldNumber;
const int DeskChatReq::kTypeFieldNumber;
const int DeskChatReq::kIndexFieldNumber;
#endif  // !_MSC_VER

DeskChatReq::DeskChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeskChatReq::InitAsDefaultInstance() {
}

DeskChatReq::DeskChatReq(const DeskChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeskChatReq::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeskChatReq::~DeskChatReq() {
  SharedDtor();
}

void DeskChatReq::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DeskChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeskChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskChatReq_descriptor_;
}

const DeskChatReq& DeskChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

DeskChatReq* DeskChatReq::default_instance_ = NULL;

DeskChatReq* DeskChatReq::New() const {
  return new DeskChatReq;
}

void DeskChatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeskChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeskChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeskChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeskChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeskChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeskChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeskChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeskChatReq::MergeFrom(const DeskChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeskChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeskChatReq::CopyFrom(const DeskChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeskChatReq::IsInitialized() const {

  return true;
}

void DeskChatReq::Swap(DeskChatReq* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeskChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeskChatReq_descriptor_;
  metadata.reflection = DeskChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeskChatEvt::kRetFieldNumber;
const int DeskChatEvt::kOpUinFieldNumber;
const int DeskChatEvt::kSexFieldNumber;
const int DeskChatEvt::kIndexFieldNumber;
const int DeskChatEvt::kContentFieldNumber;
#endif  // !_MSC_VER

DeskChatEvt::DeskChatEvt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeskChatEvt::InitAsDefaultInstance() {
}

DeskChatEvt::DeskChatEvt(const DeskChatEvt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeskChatEvt::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  op_uin_ = 0;
  sex_ = false;
  index_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeskChatEvt::~DeskChatEvt() {
  SharedDtor();
}

void DeskChatEvt::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DeskChatEvt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeskChatEvt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskChatEvt_descriptor_;
}

const DeskChatEvt& DeskChatEvt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

DeskChatEvt* DeskChatEvt::default_instance_ = NULL;

DeskChatEvt* DeskChatEvt::New() const {
  return new DeskChatEvt;
}

void DeskChatEvt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    op_uin_ = 0;
    sex_ = false;
    index_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeskChatEvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op_uin;
        break;
      }

      // optional int32 op_uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_uin_)));
          set_has_op_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional bool sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeskChatEvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 op_uin = 2;
  if (has_op_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op_uin(), output);
  }

  // optional bool sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sex(), output);
  }

  // optional int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeskChatEvt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 op_uin = 2;
  if (has_op_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op_uin(), target);
  }

  // optional bool sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sex(), target);
  }

  // optional int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeskChatEvt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 op_uin = 2;
    if (has_op_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_uin());
    }

    // optional bool sex = 3;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // optional int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeskChatEvt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeskChatEvt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeskChatEvt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeskChatEvt::MergeFrom(const DeskChatEvt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_op_uin()) {
      set_op_uin(from.op_uin());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeskChatEvt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeskChatEvt::CopyFrom(const DeskChatEvt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeskChatEvt::IsInitialized() const {

  return true;
}

void DeskChatEvt::Swap(DeskChatEvt* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(op_uin_, other->op_uin_);
    std::swap(sex_, other->sex_);
    std::swap(index_, other->index_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeskChatEvt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeskChatEvt_descriptor_;
  metadata.reflection = DeskChatEvt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LogOutReq::LogOutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogOutReq::InitAsDefaultInstance() {
}

LogOutReq::LogOutReq(const LogOutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogOutReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogOutReq::~LogOutReq() {
  SharedDtor();
}

void LogOutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogOutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogOutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOutReq_descriptor_;
}

const LogOutReq& LogOutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

LogOutReq* LogOutReq::default_instance_ = NULL;

LogOutReq* LogOutReq::New() const {
  return new LogOutReq;
}

void LogOutReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogOutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LogOutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogOutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogOutReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogOutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogOutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogOutReq::MergeFrom(const LogOutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogOutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOutReq::CopyFrom(const LogOutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOutReq::IsInitialized() const {

  return true;
}

void LogOutReq::Swap(LogOutReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogOutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogOutReq_descriptor_;
  metadata.reflection = LogOutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LogOutRsp::LogOutRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogOutRsp::InitAsDefaultInstance() {
}

LogOutRsp::LogOutRsp(const LogOutRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogOutRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogOutRsp::~LogOutRsp() {
  SharedDtor();
}

void LogOutRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogOutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogOutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOutRsp_descriptor_;
}

const LogOutRsp& LogOutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

LogOutRsp* LogOutRsp::default_instance_ = NULL;

LogOutRsp* LogOutRsp::New() const {
  return new LogOutRsp;
}

void LogOutRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogOutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LogOutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogOutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogOutRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogOutRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogOutRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogOutRsp::MergeFrom(const LogOutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogOutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOutRsp::CopyFrom(const LogOutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOutRsp::IsInitialized() const {

  return true;
}

void LogOutRsp::Swap(LogOutRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogOutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogOutRsp_descriptor_;
  metadata.reflection = LogOutRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EvtBroadCast::kUinFieldNumber;
const int EvtBroadCast::kContentFieldNumber;
const int EvtBroadCast::kNickFieldNumber;
#endif  // !_MSC_VER

EvtBroadCast::EvtBroadCast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EvtBroadCast::InitAsDefaultInstance() {
}

EvtBroadCast::EvtBroadCast(const EvtBroadCast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EvtBroadCast::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvtBroadCast::~EvtBroadCast() {
  SharedDtor();
}

void EvtBroadCast::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (this != default_instance_) {
  }
}

void EvtBroadCast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvtBroadCast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvtBroadCast_descriptor_;
}

const EvtBroadCast& EvtBroadCast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

EvtBroadCast* EvtBroadCast::default_instance_ = NULL;

EvtBroadCast* EvtBroadCast::New() const {
  return new EvtBroadCast;
}

void EvtBroadCast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvtBroadCast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick;
        break;
      }

      // optional string nick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EvtBroadCast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EvtBroadCast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EvtBroadCast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvtBroadCast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvtBroadCast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvtBroadCast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvtBroadCast::MergeFrom(const EvtBroadCast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvtBroadCast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvtBroadCast::CopyFrom(const EvtBroadCast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvtBroadCast::IsInitialized() const {

  return true;
}

void EvtBroadCast::Swap(EvtBroadCast* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(content_, other->content_);
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvtBroadCast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvtBroadCast_descriptor_;
  metadata.reflection = EvtBroadCast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserCreatePreBill::kUinFieldNumber;
const int UserCreatePreBill::kNameFieldNumber;
const int UserCreatePreBill::kItemIdFieldNumber;
#endif  // !_MSC_VER

UserCreatePreBill::UserCreatePreBill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserCreatePreBill::InitAsDefaultInstance() {
}

UserCreatePreBill::UserCreatePreBill(const UserCreatePreBill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserCreatePreBill::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCreatePreBill::~UserCreatePreBill() {
  SharedDtor();
}

void UserCreatePreBill::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (item_id_ != &::google::protobuf::internal::kEmptyString) {
    delete item_id_;
  }
  if (this != default_instance_) {
  }
}

void UserCreatePreBill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCreatePreBill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCreatePreBill_descriptor_;
}

const UserCreatePreBill& UserCreatePreBill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

UserCreatePreBill* UserCreatePreBill::default_instance_ = NULL;

UserCreatePreBill* UserCreatePreBill::New() const {
  return new UserCreatePreBill;
}

void UserCreatePreBill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_item_id()) {
      if (item_id_ != &::google::protobuf::internal::kEmptyString) {
        item_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCreatePreBill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_id;
        break;
      }

      // optional string item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_id().data(), this->item_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserCreatePreBill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserCreatePreBill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserCreatePreBill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCreatePreBill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCreatePreBill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCreatePreBill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCreatePreBill::MergeFrom(const UserCreatePreBill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCreatePreBill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCreatePreBill::CopyFrom(const UserCreatePreBill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCreatePreBill::IsInitialized() const {

  return true;
}

void UserCreatePreBill::Swap(UserCreatePreBill* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(name_, other->name_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCreatePreBill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCreatePreBill_descriptor_;
  metadata.reflection = UserCreatePreBill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateFormalBill::kUinFieldNumber;
const int CreateFormalBill::kItemIdFieldNumber;
#endif  // !_MSC_VER

CreateFormalBill::CreateFormalBill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateFormalBill::InitAsDefaultInstance() {
}

CreateFormalBill::CreateFormalBill(const CreateFormalBill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateFormalBill::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateFormalBill::~CreateFormalBill() {
  SharedDtor();
}

void CreateFormalBill::SharedDtor() {
  if (item_id_ != &::google::protobuf::internal::kEmptyString) {
    delete item_id_;
  }
  if (this != default_instance_) {
  }
}

void CreateFormalBill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateFormalBill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateFormalBill_descriptor_;
}

const CreateFormalBill& CreateFormalBill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

CreateFormalBill* CreateFormalBill::default_instance_ = NULL;

CreateFormalBill* CreateFormalBill::New() const {
  return new CreateFormalBill;
}

void CreateFormalBill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    if (has_item_id()) {
      if (item_id_ != &::google::protobuf::internal::kEmptyString) {
        item_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateFormalBill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_id;
        break;
      }

      // optional string item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_id().data(), this->item_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateFormalBill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional string item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateFormalBill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional string item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateFormalBill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional string item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateFormalBill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateFormalBill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateFormalBill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateFormalBill::MergeFrom(const CreateFormalBill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateFormalBill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateFormalBill::CopyFrom(const CreateFormalBill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateFormalBill::IsInitialized() const {

  return true;
}

void CreateFormalBill::Swap(CreateFormalBill* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateFormalBill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateFormalBill_descriptor_;
  metadata.reflection = CreateFormalBill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetInviteUserReq::kUinFieldNumber;
#endif  // !_MSC_VER

SetInviteUserReq::SetInviteUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetInviteUserReq::InitAsDefaultInstance() {
}

SetInviteUserReq::SetInviteUserReq(const SetInviteUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetInviteUserReq::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetInviteUserReq::~SetInviteUserReq() {
  SharedDtor();
}

void SetInviteUserReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetInviteUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetInviteUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetInviteUserReq_descriptor_;
}

const SetInviteUserReq& SetInviteUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

SetInviteUserReq* SetInviteUserReq::default_instance_ = NULL;

SetInviteUserReq* SetInviteUserReq::New() const {
  return new SetInviteUserReq;
}

void SetInviteUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetInviteUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetInviteUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetInviteUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetInviteUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetInviteUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetInviteUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetInviteUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetInviteUserReq::MergeFrom(const SetInviteUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetInviteUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetInviteUserReq::CopyFrom(const SetInviteUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetInviteUserReq::IsInitialized() const {

  return true;
}

void SetInviteUserReq::Swap(SetInviteUserReq* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetInviteUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetInviteUserReq_descriptor_;
  metadata.reflection = SetInviteUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetInviteUserRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SetInviteUserRsp::SetInviteUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetInviteUserRsp::InitAsDefaultInstance() {
}

SetInviteUserRsp::SetInviteUserRsp(const SetInviteUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetInviteUserRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetInviteUserRsp::~SetInviteUserRsp() {
  SharedDtor();
}

void SetInviteUserRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetInviteUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetInviteUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetInviteUserRsp_descriptor_;
}

const SetInviteUserRsp& SetInviteUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

SetInviteUserRsp* SetInviteUserRsp::default_instance_ = NULL;

SetInviteUserRsp* SetInviteUserRsp::New() const {
  return new SetInviteUserRsp;
}

void SetInviteUserRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetInviteUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetInviteUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetInviteUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetInviteUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetInviteUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetInviteUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetInviteUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetInviteUserRsp::MergeFrom(const SetInviteUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetInviteUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetInviteUserRsp::CopyFrom(const SetInviteUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetInviteUserRsp::IsInitialized() const {

  return true;
}

void SetInviteUserRsp::Swap(SetInviteUserRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetInviteUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetInviteUserRsp_descriptor_;
  metadata.reflection = SetInviteUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeartBeatReq::HeartBeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatReq::InitAsDefaultInstance() {
}

HeartBeatReq::HeartBeatReq(const HeartBeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatReq::~HeartBeatReq() {
  SharedDtor();
}

void HeartBeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatReq_descriptor_;
}

const HeartBeatReq& HeartBeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

HeartBeatReq* HeartBeatReq::default_instance_ = NULL;

HeartBeatReq* HeartBeatReq::New() const {
  return new HeartBeatReq;
}

void HeartBeatReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HeartBeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatReq::MergeFrom(const HeartBeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatReq::CopyFrom(const HeartBeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatReq::IsInitialized() const {

  return true;
}

void HeartBeatReq::Swap(HeartBeatReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatReq_descriptor_;
  metadata.reflection = HeartBeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeartBeatRsp::HeartBeatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatRsp::InitAsDefaultInstance() {
}

HeartBeatRsp::HeartBeatRsp(const HeartBeatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatRsp::~HeartBeatRsp() {
  SharedDtor();
}

void HeartBeatRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatRsp_descriptor_;
}

const HeartBeatRsp& HeartBeatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

HeartBeatRsp* HeartBeatRsp::default_instance_ = NULL;

HeartBeatRsp* HeartBeatRsp::New() const {
  return new HeartBeatRsp;
}

void HeartBeatRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HeartBeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatRsp::MergeFrom(const HeartBeatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRsp::CopyFrom(const HeartBeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRsp::IsInitialized() const {

  return true;
}

void HeartBeatRsp::Swap(HeartBeatRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatRsp_descriptor_;
  metadata.reflection = HeartBeatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ws_msg::kMsOpIntFieldNumber;
#endif  // !_MSC_VER

ws_msg::ws_msg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ws_msg::InitAsDefaultInstance() {
}

ws_msg::ws_msg(const ws_msg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ws_msg::SharedCtor() {
  _cached_size_ = 0;
  ms_op_int_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ws_msg::~ws_msg() {
  SharedDtor();
}

void ws_msg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ws_msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ws_msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ws_msg_descriptor_;
}

const ws_msg& ws_msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

ws_msg* ws_msg::default_instance_ = NULL;

ws_msg* ws_msg::New() const {
  return new ws_msg;
}

void ws_msg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ms_op_int_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ws_msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ms_op_int = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ms_op_int_)));
          set_has_ms_op_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ws_msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ms_op_int = 1;
  if (has_ms_op_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ms_op_int(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ws_msg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ms_op_int = 1;
  if (has_ms_op_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ms_op_int(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ws_msg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ms_op_int = 1;
    if (has_ms_op_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ms_op_int());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ws_msg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ws_msg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ws_msg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ws_msg::MergeFrom(const ws_msg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ms_op_int()) {
      set_ms_op_int(from.ms_op_int());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ws_msg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ws_msg::CopyFrom(const ws_msg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ws_msg::IsInitialized() const {

  return true;
}

void ws_msg::Swap(ws_msg* other) {
  if (other != this) {
    std::swap(ms_op_int_, other->ms_op_int_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ws_msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ws_msg_descriptor_;
  metadata.reflection = ws_msg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WsProtoTest::kOpIntFieldNumber;
const int WsProtoTest::kReIntFieldNumber;
const int WsProtoTest::kOpStrFieldNumber;
const int WsProtoTest::kOpMsgFieldNumber;
const int WsProtoTest::kReMsgFieldNumber;
#endif  // !_MSC_VER

WsProtoTest::WsProtoTest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WsProtoTest::InitAsDefaultInstance() {
  op_msg_ = const_cast< ::ws_msg*>(&::ws_msg::default_instance());
}

WsProtoTest::WsProtoTest(const WsProtoTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WsProtoTest::SharedCtor() {
  _cached_size_ = 0;
  op_int_ = 0;
  op_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  op_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WsProtoTest::~WsProtoTest() {
  SharedDtor();
}

void WsProtoTest::SharedDtor() {
  if (op_str_ != &::google::protobuf::internal::kEmptyString) {
    delete op_str_;
  }
  if (this != default_instance_) {
    delete op_msg_;
  }
}

void WsProtoTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WsProtoTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WsProtoTest_descriptor_;
}

const WsProtoTest& WsProtoTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mahjong_2eproto();
  return *default_instance_;
}

WsProtoTest* WsProtoTest::default_instance_ = NULL;

WsProtoTest* WsProtoTest::New() const {
  return new WsProtoTest;
}

void WsProtoTest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_int_ = 0;
    if (has_op_str()) {
      if (op_str_ != &::google::protobuf::internal::kEmptyString) {
        op_str_->clear();
      }
    }
    if (has_op_msg()) {
      if (op_msg_ != NULL) op_msg_->::ws_msg::Clear();
    }
  }
  re_int_.Clear();
  re_msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WsProtoTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op_int = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_int_)));
          set_has_op_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_re_int;
        break;
      }

      // repeated int32 re_int = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_re_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_re_int())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_re_int())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_op_str;
        break;
      }

      // optional string op_str = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->op_str().data(), this->op_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_op_msg;
        break;
      }

      // optional .ws_msg op_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_re_msg;
        break;
      }

      // repeated .ws_msg re_msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_re_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_re_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_re_msg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WsProtoTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op_int = 1;
  if (has_op_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op_int(), output);
  }

  // repeated int32 re_int = 2 [packed = true];
  if (this->re_int_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_re_int_cached_byte_size_);
  }
  for (int i = 0; i < this->re_int_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->re_int(i), output);
  }

  // optional string op_str = 3;
  if (has_op_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->op_str().data(), this->op_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->op_str(), output);
  }

  // optional .ws_msg op_msg = 4;
  if (has_op_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->op_msg(), output);
  }

  // repeated .ws_msg re_msg = 5;
  for (int i = 0; i < this->re_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->re_msg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WsProtoTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op_int = 1;
  if (has_op_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op_int(), target);
  }

  // repeated int32 re_int = 2 [packed = true];
  if (this->re_int_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _re_int_cached_byte_size_, target);
  }
  for (int i = 0; i < this->re_int_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->re_int(i), target);
  }

  // optional string op_str = 3;
  if (has_op_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->op_str().data(), this->op_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->op_str(), target);
  }

  // optional .ws_msg op_msg = 4;
  if (has_op_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->op_msg(), target);
  }

  // repeated .ws_msg re_msg = 5;
  for (int i = 0; i < this->re_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->re_msg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WsProtoTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op_int = 1;
    if (has_op_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_int());
    }

    // optional string op_str = 3;
    if (has_op_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->op_str());
    }

    // optional .ws_msg op_msg = 4;
    if (has_op_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_msg());
    }

  }
  // repeated int32 re_int = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->re_int_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->re_int(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _re_int_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .ws_msg re_msg = 5;
  total_size += 1 * this->re_msg_size();
  for (int i = 0; i < this->re_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->re_msg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WsProtoTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WsProtoTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WsProtoTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WsProtoTest::MergeFrom(const WsProtoTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  re_int_.MergeFrom(from.re_int_);
  re_msg_.MergeFrom(from.re_msg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_int()) {
      set_op_int(from.op_int());
    }
    if (from.has_op_str()) {
      set_op_str(from.op_str());
    }
    if (from.has_op_msg()) {
      mutable_op_msg()->::ws_msg::MergeFrom(from.op_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WsProtoTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsProtoTest::CopyFrom(const WsProtoTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsProtoTest::IsInitialized() const {

  return true;
}

void WsProtoTest::Swap(WsProtoTest* other) {
  if (other != this) {
    std::swap(op_int_, other->op_int_);
    re_int_.Swap(&other->re_int_);
    std::swap(op_str_, other->op_str_);
    std::swap(op_msg_, other->op_msg_);
    re_msg_.Swap(&other->re_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WsProtoTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WsProtoTest_descriptor_;
  metadata.reflection = WsProtoTest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
