// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mahjong.proto

#ifndef PROTOBUF_mahjong_2eproto__INCLUDED
#define PROTOBUF_mahjong_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mahjong_2eproto();
void protobuf_AssignDesc_mahjong_2eproto();
void protobuf_ShutdownFile_mahjong_2eproto();

class LoginReq;
class WeChatLoginReq;
class LoginRsp;
class ExtraDeskTypeInfo;
class GameEnterDeskReq;
class GameEnterDeskRsp;
class UserRoomCardChange;
class GameUserInfo;
class UserCommonCards;
class MyOption;
class EvtDeskUserEnter;
class GameExitDeskReq;
class GameExitDeskRsp;
class DeskPlayInfo;
class EvtUserExit;
class ClientNotifyStartGameReq;
class ClientNotifyStartGameRsp;
class GameSendCardReq;
class GameSendCardRsp;
class GameOptionChiReq;
class GameOptionChiRsp;
class GameOptionPengReq;
class GameOptionPengRsp;
class GameOptionGangReq;
class GameOptionGangRsp;
class GameOptionHuReq;
class GameOptionHuRsp;
class GameOptionPassReq;
class GameOptionPassRsp;
class GamePlayerReadyReq;
class UserStatus;
class GamePlayerReadyEvt;
class GameOptionGangNotFirstReq;
class GameOptionGangNotFirstRsp;
class ApplyDeleteReq;
class ApplyDeleteEvt;
class UserOption;
class GameInfoEvt;
class GameOverResultInfo;
class EvtGameOver;
class RecordInfo;
class PerPlayRecord;
class MyPlayRecordListReq;
class MyPlayRecordListRsp;
class RoundPlayRecordsReq;
class RoundPlayRecordsRsp;
class DeskChatReq;
class DeskChatEvt;
class LogOutReq;
class LogOutRsp;
class EvtBroadCast;
class UserCreatePreBill;
class CreateFormalBill;
class SetInviteUserReq;
class SetInviteUserRsp;
class HeartBeatReq;
class HeartBeatRsp;
class ws_msg;
class WsProtoTest;

// ===================================================================

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nick = 1;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 1;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // optional string uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional string sign = 3;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 3;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional int32 version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional string os = 6;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 6;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // optional bool is_register = 7;
  inline bool has_is_register() const;
  inline void clear_is_register();
  static const int kIsRegisterFieldNumber = 7;
  inline bool is_register() const;
  inline void set_is_register(bool value);

  // optional string extra_username = 8;
  inline bool has_extra_username() const;
  inline void clear_extra_username();
  static const int kExtraUsernameFieldNumber = 8;
  inline const ::std::string& extra_username() const;
  inline void set_extra_username(const ::std::string& value);
  inline void set_extra_username(const char* value);
  inline void set_extra_username(const char* value, size_t size);
  inline ::std::string* mutable_extra_username();
  inline ::std::string* release_extra_username();
  inline void set_allocated_extra_username(::std::string* extra_username);

  // optional string extra_password = 9;
  inline bool has_extra_password() const;
  inline void clear_extra_password();
  static const int kExtraPasswordFieldNumber = 9;
  inline const ::std::string& extra_password() const;
  inline void set_extra_password(const ::std::string& value);
  inline void set_extra_password(const char* value);
  inline void set_extra_password(const char* value, size_t size);
  inline ::std::string* mutable_extra_password();
  inline ::std::string* release_extra_password();
  inline void set_allocated_extra_password(::std::string* extra_password);

  // @@protoc_insertion_point(class_scope:LoginReq)
 private:
  inline void set_has_nick();
  inline void clear_has_nick();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_is_register();
  inline void clear_has_is_register();
  inline void set_has_extra_username();
  inline void clear_has_extra_username();
  inline void set_has_extra_password();
  inline void clear_has_extra_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nick_;
  ::std::string* uuid_;
  ::std::string* sign_;
  ::std::string* channel_;
  ::std::string* os_;
  ::google::protobuf::int32 version_;
  bool is_register_;
  ::std::string* extra_username_;
  ::std::string* extra_password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class WeChatLoginReq : public ::google::protobuf::Message {
 public:
  WeChatLoginReq();
  virtual ~WeChatLoginReq();

  WeChatLoginReq(const WeChatLoginReq& from);

  inline WeChatLoginReq& operator=(const WeChatLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeChatLoginReq& default_instance();

  void Swap(WeChatLoginReq* other);

  // implements Message ----------------------------------------------

  WeChatLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeChatLoginReq& from);
  void MergeFrom(const WeChatLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sign = 1;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 1;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string expire_date = 4;
  inline bool has_expire_date() const;
  inline void clear_expire_date();
  static const int kExpireDateFieldNumber = 4;
  inline const ::std::string& expire_date() const;
  inline void set_expire_date(const ::std::string& value);
  inline void set_expire_date(const char* value);
  inline void set_expire_date(const char* value, size_t size);
  inline ::std::string* mutable_expire_date();
  inline ::std::string* release_expire_date();
  inline void set_allocated_expire_date(::std::string* expire_date);

  // optional string channel = 5;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 5;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional int32 version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional string os = 7;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 7;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // @@protoc_insertion_point(class_scope:WeChatLoginReq)
 private:
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_expire_date();
  inline void clear_has_expire_date();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_os();
  inline void clear_has_os();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sign_;
  ::std::string* openid_;
  ::std::string* token_;
  ::std::string* expire_date_;
  ::std::string* channel_;
  ::std::string* os_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static WeChatLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  LoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string nick = 3;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 3;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // optional int32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 old_deskid = 5;
  inline bool has_old_deskid() const;
  inline void clear_old_deskid();
  static const int kOldDeskidFieldNumber = 5;
  inline ::google::protobuf::int32 old_deskid() const;
  inline void set_old_deskid(::google::protobuf::int32 value);

  // optional string portrait = 7;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 7;
  inline const ::std::string& portrait() const;
  inline void set_portrait(const ::std::string& value);
  inline void set_portrait(const char* value);
  inline void set_portrait(const char* value, size_t size);
  inline ::std::string* mutable_portrait();
  inline ::std::string* release_portrait();
  inline void set_allocated_portrait(::std::string* portrait);

  // optional string wx_public_id = 8;
  inline bool has_wx_public_id() const;
  inline void clear_wx_public_id();
  static const int kWxPublicIdFieldNumber = 8;
  inline const ::std::string& wx_public_id() const;
  inline void set_wx_public_id(const ::std::string& value);
  inline void set_wx_public_id(const char* value);
  inline void set_wx_public_id(const char* value, size_t size);
  inline ::std::string* mutable_wx_public_id();
  inline ::std::string* release_wx_public_id();
  inline void set_allocated_wx_public_id(::std::string* wx_public_id);

  // optional string wx_agent_id = 9;
  inline bool has_wx_agent_id() const;
  inline void clear_wx_agent_id();
  static const int kWxAgentIdFieldNumber = 9;
  inline const ::std::string& wx_agent_id() const;
  inline void set_wx_agent_id(const ::std::string& value);
  inline void set_wx_agent_id(const char* value);
  inline void set_wx_agent_id(const char* value, size_t size);
  inline ::std::string* mutable_wx_agent_id();
  inline ::std::string* release_wx_agent_id();
  inline void set_allocated_wx_agent_id(::std::string* wx_agent_id);

  // optional string ip = 10;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 10;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 room_card = 11;
  inline bool has_room_card() const;
  inline void clear_room_card();
  static const int kRoomCardFieldNumber = 11;
  inline ::google::protobuf::int32 room_card() const;
  inline void set_room_card(::google::protobuf::int32 value);

  // optional int32 ret = 12;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 12;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional string wy_yunxin_token = 13;
  inline bool has_wy_yunxin_token() const;
  inline void clear_wy_yunxin_token();
  static const int kWyYunxinTokenFieldNumber = 13;
  inline const ::std::string& wy_yunxin_token() const;
  inline void set_wy_yunxin_token(const ::std::string& value);
  inline void set_wy_yunxin_token(const char* value);
  inline void set_wy_yunxin_token(const char* value, size_t size);
  inline ::std::string* mutable_wy_yunxin_token();
  inline ::std::string* release_wy_yunxin_token();
  inline void set_allocated_wy_yunxin_token(::std::string* wy_yunxin_token);

  // optional string hall_billband = 14;
  inline bool has_hall_billband() const;
  inline void clear_hall_billband();
  static const int kHallBillbandFieldNumber = 14;
  inline const ::std::string& hall_billband() const;
  inline void set_hall_billband(const ::std::string& value);
  inline void set_hall_billband(const char* value);
  inline void set_hall_billband(const char* value, size_t size);
  inline ::std::string* mutable_hall_billband();
  inline ::std::string* release_hall_billband();
  inline void set_allocated_hall_billband(::std::string* hall_billband);

  // @@protoc_insertion_point(class_scope:LoginRsp)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_nick();
  inline void clear_has_nick();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_old_deskid();
  inline void clear_has_old_deskid();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_wx_public_id();
  inline void clear_has_wx_public_id();
  inline void set_has_wx_agent_id();
  inline void clear_has_wx_agent_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_room_card();
  inline void clear_has_room_card();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_wy_yunxin_token();
  inline void clear_has_wy_yunxin_token();
  inline void set_has_hall_billband();
  inline void clear_has_hall_billband();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* password_;
  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 sex_;
  ::std::string* nick_;
  ::std::string* portrait_;
  ::std::string* wx_public_id_;
  ::google::protobuf::int32 old_deskid_;
  ::google::protobuf::int32 room_card_;
  ::std::string* wx_agent_id_;
  ::std::string* ip_;
  ::std::string* wy_yunxin_token_;
  ::std::string* hall_billband_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static LoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class ExtraDeskTypeInfo : public ::google::protobuf::Message {
 public:
  ExtraDeskTypeInfo();
  virtual ~ExtraDeskTypeInfo();

  ExtraDeskTypeInfo(const ExtraDeskTypeInfo& from);

  inline ExtraDeskTypeInfo& operator=(const ExtraDeskTypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtraDeskTypeInfo& default_instance();

  void Swap(ExtraDeskTypeInfo* other);

  // implements Message ----------------------------------------------

  ExtraDeskTypeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtraDeskTypeInfo& from);
  void MergeFrom(const ExtraDeskTypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool hongzhong = 1;
  inline bool has_hongzhong() const;
  inline void clear_hongzhong();
  static const int kHongzhongFieldNumber = 1;
  inline bool hongzhong() const;
  inline void set_hongzhong(bool value);

  // optional bool qidui = 2;
  inline bool has_qidui() const;
  inline void clear_qidui();
  static const int kQiduiFieldNumber = 2;
  inline bool qidui() const;
  inline void set_qidui(bool value);

  // optional int32 zhuaniao = 3;
  inline bool has_zhuaniao() const;
  inline void clear_zhuaniao();
  static const int kZhuaniaoFieldNumber = 3;
  inline ::google::protobuf::int32 zhuaniao() const;
  inline void set_zhuaniao(::google::protobuf::int32 value);

  // optional int32 piaofen = 4;
  inline bool has_piaofen() const;
  inline void clear_piaofen();
  static const int kPiaofenFieldNumber = 4;
  inline ::google::protobuf::int32 piaofen() const;
  inline void set_piaofen(::google::protobuf::int32 value);

  // optional bool shanghuo = 5;
  inline bool has_shanghuo() const;
  inline void clear_shanghuo();
  static const int kShanghuoFieldNumber = 5;
  inline bool shanghuo() const;
  inline void set_shanghuo(bool value);

  // @@protoc_insertion_point(class_scope:ExtraDeskTypeInfo)
 private:
  inline void set_has_hongzhong();
  inline void clear_has_hongzhong();
  inline void set_has_qidui();
  inline void clear_has_qidui();
  inline void set_has_zhuaniao();
  inline void clear_has_zhuaniao();
  inline void set_has_piaofen();
  inline void clear_has_piaofen();
  inline void set_has_shanghuo();
  inline void clear_has_shanghuo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool hongzhong_;
  bool qidui_;
  bool shanghuo_;
  ::google::protobuf::int32 zhuaniao_;
  ::google::protobuf::int32 piaofen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static ExtraDeskTypeInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameEnterDeskReq : public ::google::protobuf::Message {
 public:
  GameEnterDeskReq();
  virtual ~GameEnterDeskReq();

  GameEnterDeskReq(const GameEnterDeskReq& from);

  inline GameEnterDeskReq& operator=(const GameEnterDeskReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEnterDeskReq& default_instance();

  void Swap(GameEnterDeskReq* other);

  // implements Message ----------------------------------------------

  GameEnterDeskReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameEnterDeskReq& from);
  void MergeFrom(const GameEnterDeskReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dst_desk_id = 1;
  inline bool has_dst_desk_id() const;
  inline void clear_dst_desk_id();
  static const int kDstDeskIdFieldNumber = 1;
  inline ::google::protobuf::int32 dst_desk_id() const;
  inline void set_dst_desk_id(::google::protobuf::int32 value);

  // optional int32 new_desk = 2;
  inline bool has_new_desk() const;
  inline void clear_new_desk();
  static const int kNewDeskFieldNumber = 2;
  inline ::google::protobuf::int32 new_desk() const;
  inline void set_new_desk(::google::protobuf::int32 value);

  // optional int32 reconnect = 3;
  inline bool has_reconnect() const;
  inline void clear_reconnect();
  static const int kReconnectFieldNumber = 3;
  inline ::google::protobuf::int32 reconnect() const;
  inline void set_reconnect(::google::protobuf::int32 value);

  // optional int32 card_num = 4;
  inline bool has_card_num() const;
  inline void clear_card_num();
  static const int kCardNumFieldNumber = 4;
  inline ::google::protobuf::int32 card_num() const;
  inline void set_card_num(::google::protobuf::int32 value);

  // optional int32 desk_type = 5;
  inline bool has_desk_type() const;
  inline void clear_desk_type();
  static const int kDeskTypeFieldNumber = 5;
  inline ::google::protobuf::int32 desk_type() const;
  inline void set_desk_type(::google::protobuf::int32 value);

  // optional int32 seat_limit = 6;
  inline bool has_seat_limit() const;
  inline void clear_seat_limit();
  static const int kSeatLimitFieldNumber = 6;
  inline ::google::protobuf::int32 seat_limit() const;
  inline void set_seat_limit(::google::protobuf::int32 value);

  // optional int32 win_type = 7;
  inline bool has_win_type() const;
  inline void clear_win_type();
  static const int kWinTypeFieldNumber = 7;
  inline ::google::protobuf::int32 win_type() const;
  inline void set_win_type(::google::protobuf::int32 value);

  // optional .ExtraDeskTypeInfo extra_type = 8;
  inline bool has_extra_type() const;
  inline void clear_extra_type();
  static const int kExtraTypeFieldNumber = 8;
  inline const ::ExtraDeskTypeInfo& extra_type() const;
  inline ::ExtraDeskTypeInfo* mutable_extra_type();
  inline ::ExtraDeskTypeInfo* release_extra_type();
  inline void set_allocated_extra_type(::ExtraDeskTypeInfo* extra_type);

  // @@protoc_insertion_point(class_scope:GameEnterDeskReq)
 private:
  inline void set_has_dst_desk_id();
  inline void clear_has_dst_desk_id();
  inline void set_has_new_desk();
  inline void clear_has_new_desk();
  inline void set_has_reconnect();
  inline void clear_has_reconnect();
  inline void set_has_card_num();
  inline void clear_has_card_num();
  inline void set_has_desk_type();
  inline void clear_has_desk_type();
  inline void set_has_seat_limit();
  inline void clear_has_seat_limit();
  inline void set_has_win_type();
  inline void clear_has_win_type();
  inline void set_has_extra_type();
  inline void clear_has_extra_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dst_desk_id_;
  ::google::protobuf::int32 new_desk_;
  ::google::protobuf::int32 reconnect_;
  ::google::protobuf::int32 card_num_;
  ::google::protobuf::int32 desk_type_;
  ::google::protobuf::int32 seat_limit_;
  ::ExtraDeskTypeInfo* extra_type_;
  ::google::protobuf::int32 win_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameEnterDeskReq* default_instance_;
};
// -------------------------------------------------------------------

class GameEnterDeskRsp : public ::google::protobuf::Message {
 public:
  GameEnterDeskRsp();
  virtual ~GameEnterDeskRsp();

  GameEnterDeskRsp(const GameEnterDeskRsp& from);

  inline GameEnterDeskRsp& operator=(const GameEnterDeskRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEnterDeskRsp& default_instance();

  void Swap(GameEnterDeskRsp* other);

  // implements Message ----------------------------------------------

  GameEnterDeskRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameEnterDeskRsp& from);
  void MergeFrom(const GameEnterDeskRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameEnterDeskRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameEnterDeskRsp* default_instance_;
};
// -------------------------------------------------------------------

class UserRoomCardChange : public ::google::protobuf::Message {
 public:
  UserRoomCardChange();
  virtual ~UserRoomCardChange();

  UserRoomCardChange(const UserRoomCardChange& from);

  inline UserRoomCardChange& operator=(const UserRoomCardChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRoomCardChange& default_instance();

  void Swap(UserRoomCardChange* other);

  // implements Message ----------------------------------------------

  UserRoomCardChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRoomCardChange& from);
  void MergeFrom(const UserRoomCardChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 room_card = 1;
  inline bool has_room_card() const;
  inline void clear_room_card();
  static const int kRoomCardFieldNumber = 1;
  inline ::google::protobuf::int32 room_card() const;
  inline void set_room_card(::google::protobuf::int32 value);

  // optional int32 change_reason = 2;
  inline bool has_change_reason() const;
  inline void clear_change_reason();
  static const int kChangeReasonFieldNumber = 2;
  inline ::google::protobuf::int32 change_reason() const;
  inline void set_change_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserRoomCardChange)
 private:
  inline void set_has_room_card();
  inline void clear_has_room_card();
  inline void set_has_change_reason();
  inline void clear_has_change_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 room_card_;
  ::google::protobuf::int32 change_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static UserRoomCardChange* default_instance_;
};
// -------------------------------------------------------------------

class GameUserInfo : public ::google::protobuf::Message {
 public:
  GameUserInfo();
  virtual ~GameUserInfo();

  GameUserInfo(const GameUserInfo& from);

  inline GameUserInfo& operator=(const GameUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameUserInfo& default_instance();

  void Swap(GameUserInfo* other);

  // implements Message ----------------------------------------------

  GameUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameUserInfo& from);
  void MergeFrom(const GameUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional string nick = 3;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 3;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // optional int32 seatid = 4;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 4;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string portrait = 6;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 6;
  inline const ::std::string& portrait() const;
  inline void set_portrait(const ::std::string& value);
  inline void set_portrait(const char* value);
  inline void set_portrait(const char* value, size_t size);
  inline ::std::string* mutable_portrait();
  inline ::std::string* release_portrait();
  inline void set_allocated_portrait(::std::string* portrait);

  // optional int32 is_master = 7;
  inline bool has_is_master() const;
  inline void clear_is_master();
  static const int kIsMasterFieldNumber = 7;
  inline ::google::protobuf::int32 is_master() const;
  inline void set_is_master(::google::protobuf::int32 value);

  // optional int32 piaofen = 8;
  inline bool has_piaofen() const;
  inline void clear_piaofen();
  static const int kPiaofenFieldNumber = 8;
  inline ::google::protobuf::int32 piaofen() const;
  inline void set_piaofen(::google::protobuf::int32 value);

  // optional int32 shanghuo = 9;
  inline bool has_shanghuo() const;
  inline void clear_shanghuo();
  static const int kShanghuoFieldNumber = 9;
  inline ::google::protobuf::int32 shanghuo() const;
  inline void set_shanghuo(::google::protobuf::int32 value);

  // optional string ip = 10;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 10;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:GameUserInfo)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_nick();
  inline void clear_has_nick();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_is_master();
  inline void clear_has_is_master();
  inline void set_has_piaofen();
  inline void clear_has_piaofen();
  inline void set_has_shanghuo();
  inline void clear_has_shanghuo();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 uin_;
  ::std::string* nick_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 sex_;
  ::std::string* portrait_;
  ::google::protobuf::int32 is_master_;
  ::google::protobuf::int32 piaofen_;
  ::std::string* ip_;
  ::google::protobuf::int32 shanghuo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserCommonCards : public ::google::protobuf::Message {
 public:
  UserCommonCards();
  virtual ~UserCommonCards();

  UserCommonCards(const UserCommonCards& from);

  inline UserCommonCards& operator=(const UserCommonCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCommonCards& default_instance();

  void Swap(UserCommonCards* other);

  // implements Message ----------------------------------------------

  UserCommonCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserCommonCards& from);
  void MergeFrom(const UserCommonCards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional int32 card_len = 2;
  inline bool has_card_len() const;
  inline void clear_card_len();
  static const int kCardLenFieldNumber = 2;
  inline ::google::protobuf::int32 card_len() const;
  inline void set_card_len(::google::protobuf::int32 value);

  // repeated int32 out_cards = 3;
  inline int out_cards_size() const;
  inline void clear_out_cards();
  static const int kOutCardsFieldNumber = 3;
  inline ::google::protobuf::int32 out_cards(int index) const;
  inline void set_out_cards(int index, ::google::protobuf::int32 value);
  inline void add_out_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      out_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_out_cards();

  // repeated int32 discard = 4;
  inline int discard_size() const;
  inline void clear_discard();
  static const int kDiscardFieldNumber = 4;
  inline ::google::protobuf::int32 discard(int index) const;
  inline void set_discard(int index, ::google::protobuf::int32 value);
  inline void add_discard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      discard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_discard();

  // optional int32 seatid = 5;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 5;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // repeated int32 op_list = 7;
  inline int op_list_size() const;
  inline void clear_op_list();
  static const int kOpListFieldNumber = 7;
  inline ::google::protobuf::int32 op_list(int index) const;
  inline void set_op_list(int index, ::google::protobuf::int32 value);
  inline void add_op_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      op_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_op_list();

  // optional int32 chips = 8;
  inline bool has_chips() const;
  inline void clear_chips();
  static const int kChipsFieldNumber = 8;
  inline ::google::protobuf::int32 chips() const;
  inline void set_chips(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserCommonCards)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_card_len();
  inline void clear_has_card_len();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_chips();
  inline void clear_has_chips();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 card_len_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > out_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > discard_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > op_list_;
  ::google::protobuf::int32 chips_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static UserCommonCards* default_instance_;
};
// -------------------------------------------------------------------

class MyOption : public ::google::protobuf::Message {
 public:
  MyOption();
  virtual ~MyOption();

  MyOption(const MyOption& from);

  inline MyOption& operator=(const MyOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyOption& default_instance();

  void Swap(MyOption* other);

  // implements Message ----------------------------------------------

  MyOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyOption& from);
  void MergeFrom(const MyOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool op_chi = 1;
  inline bool has_op_chi() const;
  inline void clear_op_chi();
  static const int kOpChiFieldNumber = 1;
  inline bool op_chi() const;
  inline void set_op_chi(bool value);

  // optional bool op_peng = 2;
  inline bool has_op_peng() const;
  inline void clear_op_peng();
  static const int kOpPengFieldNumber = 2;
  inline bool op_peng() const;
  inline void set_op_peng(bool value);

  // optional bool op_gang = 3;
  inline bool has_op_gang() const;
  inline void clear_op_gang();
  static const int kOpGangFieldNumber = 3;
  inline bool op_gang() const;
  inline void set_op_gang(bool value);

  // optional bool op_hu = 4;
  inline bool has_op_hu() const;
  inline void clear_op_hu();
  static const int kOpHuFieldNumber = 4;
  inline bool op_hu() const;
  inline void set_op_hu(bool value);

  // optional bool need_wait = 5;
  inline bool has_need_wait() const;
  inline void clear_need_wait();
  static const int kNeedWaitFieldNumber = 5;
  inline bool need_wait() const;
  inline void set_need_wait(bool value);

  // repeated int32 chi_cards = 6;
  inline int chi_cards_size() const;
  inline void clear_chi_cards();
  static const int kChiCardsFieldNumber = 6;
  inline ::google::protobuf::int32 chi_cards(int index) const;
  inline void set_chi_cards(int index, ::google::protobuf::int32 value);
  inline void add_chi_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chi_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chi_cards();

  // @@protoc_insertion_point(class_scope:MyOption)
 private:
  inline void set_has_op_chi();
  inline void clear_has_op_chi();
  inline void set_has_op_peng();
  inline void clear_has_op_peng();
  inline void set_has_op_gang();
  inline void clear_has_op_gang();
  inline void set_has_op_hu();
  inline void clear_has_op_hu();
  inline void set_has_need_wait();
  inline void clear_has_need_wait();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool op_chi_;
  bool op_peng_;
  bool op_gang_;
  bool op_hu_;
  bool need_wait_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chi_cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MyOption* default_instance_;
};
// -------------------------------------------------------------------

class EvtDeskUserEnter : public ::google::protobuf::Message {
 public:
  EvtDeskUserEnter();
  virtual ~EvtDeskUserEnter();

  EvtDeskUserEnter(const EvtDeskUserEnter& from);

  inline EvtDeskUserEnter& operator=(const EvtDeskUserEnter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvtDeskUserEnter& default_instance();

  void Swap(EvtDeskUserEnter* other);

  // implements Message ----------------------------------------------

  EvtDeskUserEnter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvtDeskUserEnter& from);
  void MergeFrom(const EvtDeskUserEnter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 deskid = 1;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskidFieldNumber = 1;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 op_uin = 2;
  inline bool has_op_uin() const;
  inline void clear_op_uin();
  static const int kOpUinFieldNumber = 2;
  inline ::google::protobuf::int32 op_uin() const;
  inline void set_op_uin(::google::protobuf::int32 value);

  // optional int32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 max_round = 4;
  inline bool has_max_round() const;
  inline void clear_max_round();
  static const int kMaxRoundFieldNumber = 4;
  inline ::google::protobuf::int32 max_round() const;
  inline void set_max_round(::google::protobuf::int32 value);

  // repeated .GameUserInfo users = 5;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 5;
  inline const ::GameUserInfo& users(int index) const;
  inline ::GameUserInfo* mutable_users(int index);
  inline ::GameUserInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::GameUserInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::GameUserInfo >*
      mutable_users();

  // optional int32 next_uin = 6;
  inline bool has_next_uin() const;
  inline void clear_next_uin();
  static const int kNextUinFieldNumber = 6;
  inline ::google::protobuf::int32 next_uin() const;
  inline void set_next_uin(::google::protobuf::int32 value);

  // optional int32 dealer_seatid = 7;
  inline bool has_dealer_seatid() const;
  inline void clear_dealer_seatid();
  static const int kDealerSeatidFieldNumber = 7;
  inline ::google::protobuf::int32 dealer_seatid() const;
  inline void set_dealer_seatid(::google::protobuf::int32 value);

  // repeated int32 cards = 8 [packed = true];
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 8;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // repeated .UserCommonCards in_users = 9;
  inline int in_users_size() const;
  inline void clear_in_users();
  static const int kInUsersFieldNumber = 9;
  inline const ::UserCommonCards& in_users(int index) const;
  inline ::UserCommonCards* mutable_in_users(int index);
  inline ::UserCommonCards* add_in_users();
  inline const ::google::protobuf::RepeatedPtrField< ::UserCommonCards >&
      in_users() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserCommonCards >*
      mutable_in_users();

  // optional int32 share_cards_len = 10;
  inline bool has_share_cards_len() const;
  inline void clear_share_cards_len();
  static const int kShareCardsLenFieldNumber = 10;
  inline ::google::protobuf::int32 share_cards_len() const;
  inline void set_share_cards_len(::google::protobuf::int32 value);

  // optional int32 game_round = 11;
  inline bool has_game_round() const;
  inline void clear_game_round();
  static const int kGameRoundFieldNumber = 11;
  inline ::google::protobuf::int32 game_round() const;
  inline void set_game_round(::google::protobuf::int32 value);

  // optional .MyOption my_option = 12;
  inline bool has_my_option() const;
  inline void clear_my_option();
  static const int kMyOptionFieldNumber = 12;
  inline const ::MyOption& my_option() const;
  inline ::MyOption* mutable_my_option();
  inline ::MyOption* release_my_option();
  inline void set_allocated_my_option(::MyOption* my_option);

  // optional int32 recv_card_uin = 13;
  inline bool has_recv_card_uin() const;
  inline void clear_recv_card_uin();
  static const int kRecvCardUinFieldNumber = 13;
  inline ::google::protobuf::int32 recv_card_uin() const;
  inline void set_recv_card_uin(::google::protobuf::int32 value);

  // optional int32 desk_remain_round = 14;
  inline bool has_desk_remain_round() const;
  inline void clear_desk_remain_round();
  static const int kDeskRemainRoundFieldNumber = 14;
  inline ::google::protobuf::int32 desk_remain_round() const;
  inline void set_desk_remain_round(::google::protobuf::int32 value);

  // optional int32 seat_num = 15;
  inline bool has_seat_num() const;
  inline void clear_seat_num();
  static const int kSeatNumFieldNumber = 15;
  inline ::google::protobuf::int32 seat_num() const;
  inline void set_seat_num(::google::protobuf::int32 value);

  // optional int32 remain_time = 16;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 16;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // optional int32 apply_uin = 17;
  inline bool has_apply_uin() const;
  inline void clear_apply_uin();
  static const int kApplyUinFieldNumber = 17;
  inline ::google::protobuf::int32 apply_uin() const;
  inline void set_apply_uin(::google::protobuf::int32 value);

  // optional int32 win_type = 18;
  inline bool has_win_type() const;
  inline void clear_win_type();
  static const int kWinTypeFieldNumber = 18;
  inline ::google::protobuf::int32 win_type() const;
  inline void set_win_type(::google::protobuf::int32 value);

  // optional .ExtraDeskTypeInfo extra_type = 19;
  inline bool has_extra_type() const;
  inline void clear_extra_type();
  static const int kExtraTypeFieldNumber = 19;
  inline const ::ExtraDeskTypeInfo& extra_type() const;
  inline ::ExtraDeskTypeInfo* mutable_extra_type();
  inline ::ExtraDeskTypeInfo* release_extra_type();
  inline void set_allocated_extra_type(::ExtraDeskTypeInfo* extra_type);

  // optional int32 type = 20;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 20;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 pre_remain_time = 21;
  inline bool has_pre_remain_time() const;
  inline void clear_pre_remain_time();
  static const int kPreRemainTimeFieldNumber = 21;
  inline ::google::protobuf::int32 pre_remain_time() const;
  inline void set_pre_remain_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EvtDeskUserEnter)
 private:
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_op_uin();
  inline void clear_has_op_uin();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_max_round();
  inline void clear_has_max_round();
  inline void set_has_next_uin();
  inline void clear_has_next_uin();
  inline void set_has_dealer_seatid();
  inline void clear_has_dealer_seatid();
  inline void set_has_share_cards_len();
  inline void clear_has_share_cards_len();
  inline void set_has_game_round();
  inline void clear_has_game_round();
  inline void set_has_my_option();
  inline void clear_has_my_option();
  inline void set_has_recv_card_uin();
  inline void clear_has_recv_card_uin();
  inline void set_has_desk_remain_round();
  inline void clear_has_desk_remain_round();
  inline void set_has_seat_num();
  inline void clear_has_seat_num();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();
  inline void set_has_apply_uin();
  inline void clear_has_apply_uin();
  inline void set_has_win_type();
  inline void clear_has_win_type();
  inline void set_has_extra_type();
  inline void clear_has_extra_type();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pre_remain_time();
  inline void clear_has_pre_remain_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 op_uin_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 max_round_;
  ::google::protobuf::RepeatedPtrField< ::GameUserInfo > users_;
  ::google::protobuf::int32 next_uin_;
  ::google::protobuf::int32 dealer_seatid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  mutable int _cards_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::UserCommonCards > in_users_;
  ::google::protobuf::int32 share_cards_len_;
  ::google::protobuf::int32 game_round_;
  ::MyOption* my_option_;
  ::google::protobuf::int32 recv_card_uin_;
  ::google::protobuf::int32 desk_remain_round_;
  ::google::protobuf::int32 seat_num_;
  ::google::protobuf::int32 remain_time_;
  ::google::protobuf::int32 apply_uin_;
  ::google::protobuf::int32 win_type_;
  ::ExtraDeskTypeInfo* extra_type_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 pre_remain_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static EvtDeskUserEnter* default_instance_;
};
// -------------------------------------------------------------------

class GameExitDeskReq : public ::google::protobuf::Message {
 public:
  GameExitDeskReq();
  virtual ~GameExitDeskReq();

  GameExitDeskReq(const GameExitDeskReq& from);

  inline GameExitDeskReq& operator=(const GameExitDeskReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameExitDeskReq& default_instance();

  void Swap(GameExitDeskReq* other);

  // implements Message ----------------------------------------------

  GameExitDeskReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameExitDeskReq& from);
  void MergeFrom(const GameExitDeskReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameExitDeskReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameExitDeskReq* default_instance_;
};
// -------------------------------------------------------------------

class GameExitDeskRsp : public ::google::protobuf::Message {
 public:
  GameExitDeskRsp();
  virtual ~GameExitDeskRsp();

  GameExitDeskRsp(const GameExitDeskRsp& from);

  inline GameExitDeskRsp& operator=(const GameExitDeskRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameExitDeskRsp& default_instance();

  void Swap(GameExitDeskRsp* other);

  // implements Message ----------------------------------------------

  GameExitDeskRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameExitDeskRsp& from);
  void MergeFrom(const GameExitDeskRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameExitDeskRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameExitDeskRsp* default_instance_;
};
// -------------------------------------------------------------------

class DeskPlayInfo : public ::google::protobuf::Message {
 public:
  DeskPlayInfo();
  virtual ~DeskPlayInfo();

  DeskPlayInfo(const DeskPlayInfo& from);

  inline DeskPlayInfo& operator=(const DeskPlayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeskPlayInfo& default_instance();

  void Swap(DeskPlayInfo* other);

  // implements Message ----------------------------------------------

  DeskPlayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeskPlayInfo& from);
  void MergeFrom(const DeskPlayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cards = 1 [packed = true];
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional int32 card_len = 2;
  inline bool has_card_len() const;
  inline void clear_card_len();
  static const int kCardLenFieldNumber = 2;
  inline ::google::protobuf::int32 card_len() const;
  inline void set_card_len(::google::protobuf::int32 value);

  // repeated int32 out_cards = 3 [packed = true];
  inline int out_cards_size() const;
  inline void clear_out_cards();
  static const int kOutCardsFieldNumber = 3;
  inline ::google::protobuf::int32 out_cards(int index) const;
  inline void set_out_cards(int index, ::google::protobuf::int32 value);
  inline void add_out_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      out_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_out_cards();

  // optional int32 out_card_len = 4;
  inline bool has_out_card_len() const;
  inline void clear_out_card_len();
  static const int kOutCardLenFieldNumber = 4;
  inline ::google::protobuf::int32 out_card_len() const;
  inline void set_out_card_len(::google::protobuf::int32 value);

  // repeated int32 discards = 5 [packed = true];
  inline int discards_size() const;
  inline void clear_discards();
  static const int kDiscardsFieldNumber = 5;
  inline ::google::protobuf::int32 discards(int index) const;
  inline void set_discards(int index, ::google::protobuf::int32 value);
  inline void add_discards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      discards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_discards();

  // optional int32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 chips = 7;
  inline bool has_chips() const;
  inline void clear_chips();
  static const int kChipsFieldNumber = 7;
  inline ::google::protobuf::int32 chips() const;
  inline void set_chips(::google::protobuf::int32 value);

  // optional int32 round_win_chips = 8;
  inline bool has_round_win_chips() const;
  inline void clear_round_win_chips();
  static const int kRoundWinChipsFieldNumber = 8;
  inline ::google::protobuf::int32 round_win_chips() const;
  inline void set_round_win_chips(::google::protobuf::int32 value);

  // optional int32 total_chi_num = 9;
  inline bool has_total_chi_num() const;
  inline void clear_total_chi_num();
  static const int kTotalChiNumFieldNumber = 9;
  inline ::google::protobuf::int32 total_chi_num() const;
  inline void set_total_chi_num(::google::protobuf::int32 value);

  // optional int32 total_peng_num = 10;
  inline bool has_total_peng_num() const;
  inline void clear_total_peng_num();
  static const int kTotalPengNumFieldNumber = 10;
  inline ::google::protobuf::int32 total_peng_num() const;
  inline void set_total_peng_num(::google::protobuf::int32 value);

  // optional int32 total_gang_num = 11;
  inline bool has_total_gang_num() const;
  inline void clear_total_gang_num();
  static const int kTotalGangNumFieldNumber = 11;
  inline ::google::protobuf::int32 total_gang_num() const;
  inline void set_total_gang_num(::google::protobuf::int32 value);

  // optional int32 total_ganged_num = 12;
  inline bool has_total_ganged_num() const;
  inline void clear_total_ganged_num();
  static const int kTotalGangedNumFieldNumber = 12;
  inline ::google::protobuf::int32 total_ganged_num() const;
  inline void set_total_ganged_num(::google::protobuf::int32 value);

  // optional int32 total_hu_num = 13;
  inline bool has_total_hu_num() const;
  inline void clear_total_hu_num();
  static const int kTotalHuNumFieldNumber = 13;
  inline ::google::protobuf::int32 total_hu_num() const;
  inline void set_total_hu_num(::google::protobuf::int32 value);

  // optional int32 total_hued_num = 14;
  inline bool has_total_hued_num() const;
  inline void clear_total_hued_num();
  static const int kTotalHuedNumFieldNumber = 14;
  inline ::google::protobuf::int32 total_hued_num() const;
  inline void set_total_hued_num(::google::protobuf::int32 value);

  // optional int32 round_chi_num = 15;
  inline bool has_round_chi_num() const;
  inline void clear_round_chi_num();
  static const int kRoundChiNumFieldNumber = 15;
  inline ::google::protobuf::int32 round_chi_num() const;
  inline void set_round_chi_num(::google::protobuf::int32 value);

  // optional int32 round_peng_num = 16;
  inline bool has_round_peng_num() const;
  inline void clear_round_peng_num();
  static const int kRoundPengNumFieldNumber = 16;
  inline ::google::protobuf::int32 round_peng_num() const;
  inline void set_round_peng_num(::google::protobuf::int32 value);

  // optional int32 round_gang_num = 17;
  inline bool has_round_gang_num() const;
  inline void clear_round_gang_num();
  static const int kRoundGangNumFieldNumber = 17;
  inline ::google::protobuf::int32 round_gang_num() const;
  inline void set_round_gang_num(::google::protobuf::int32 value);

  // optional int32 round_ganged_num = 18;
  inline bool has_round_ganged_num() const;
  inline void clear_round_ganged_num();
  static const int kRoundGangedNumFieldNumber = 18;
  inline ::google::protobuf::int32 round_ganged_num() const;
  inline void set_round_ganged_num(::google::protobuf::int32 value);

  // optional int32 role = 19;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 19;
  inline ::google::protobuf::int32 role() const;
  inline void set_role(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeskPlayInfo)
 private:
  inline void set_has_card_len();
  inline void clear_has_card_len();
  inline void set_has_out_card_len();
  inline void clear_has_out_card_len();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_chips();
  inline void clear_has_chips();
  inline void set_has_round_win_chips();
  inline void clear_has_round_win_chips();
  inline void set_has_total_chi_num();
  inline void clear_has_total_chi_num();
  inline void set_has_total_peng_num();
  inline void clear_has_total_peng_num();
  inline void set_has_total_gang_num();
  inline void clear_has_total_gang_num();
  inline void set_has_total_ganged_num();
  inline void clear_has_total_ganged_num();
  inline void set_has_total_hu_num();
  inline void clear_has_total_hu_num();
  inline void set_has_total_hued_num();
  inline void clear_has_total_hued_num();
  inline void set_has_round_chi_num();
  inline void clear_has_round_chi_num();
  inline void set_has_round_peng_num();
  inline void clear_has_round_peng_num();
  inline void set_has_round_gang_num();
  inline void clear_has_round_gang_num();
  inline void set_has_round_ganged_num();
  inline void clear_has_round_ganged_num();
  inline void set_has_role();
  inline void clear_has_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  mutable int _cards_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > out_cards_;
  mutable int _out_cards_cached_byte_size_;
  ::google::protobuf::int32 card_len_;
  ::google::protobuf::int32 out_card_len_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > discards_;
  mutable int _discards_cached_byte_size_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 chips_;
  ::google::protobuf::int32 round_win_chips_;
  ::google::protobuf::int32 total_chi_num_;
  ::google::protobuf::int32 total_peng_num_;
  ::google::protobuf::int32 total_gang_num_;
  ::google::protobuf::int32 total_ganged_num_;
  ::google::protobuf::int32 total_hu_num_;
  ::google::protobuf::int32 total_hued_num_;
  ::google::protobuf::int32 round_chi_num_;
  ::google::protobuf::int32 round_peng_num_;
  ::google::protobuf::int32 round_gang_num_;
  ::google::protobuf::int32 round_ganged_num_;
  ::google::protobuf::int32 role_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static DeskPlayInfo* default_instance_;
};
// -------------------------------------------------------------------

class EvtUserExit : public ::google::protobuf::Message {
 public:
  EvtUserExit();
  virtual ~EvtUserExit();

  EvtUserExit(const EvtUserExit& from);

  inline EvtUserExit& operator=(const EvtUserExit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvtUserExit& default_instance();

  void Swap(EvtUserExit* other);

  // implements Message ----------------------------------------------

  EvtUserExit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvtUserExit& from);
  void MergeFrom(const EvtUserExit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 deskid = 1;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskidFieldNumber = 1;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 dealer = 2;
  inline bool has_dealer() const;
  inline void clear_dealer();
  static const int kDealerFieldNumber = 2;
  inline ::google::protobuf::int32 dealer() const;
  inline void set_dealer(::google::protobuf::int32 value);

  // optional int32 op_uin = 3;
  inline bool has_op_uin() const;
  inline void clear_op_uin();
  static const int kOpUinFieldNumber = 3;
  inline ::google::protobuf::int32 op_uin() const;
  inline void set_op_uin(::google::protobuf::int32 value);

  // optional int32 op_status = 4;
  inline bool has_op_status() const;
  inline void clear_op_status();
  static const int kOpStatusFieldNumber = 4;
  inline ::google::protobuf::int32 op_status() const;
  inline void set_op_status(::google::protobuf::int32 value);

  // optional int32 next_uin = 5;
  inline bool has_next_uin() const;
  inline void clear_next_uin();
  static const int kNextUinFieldNumber = 5;
  inline ::google::protobuf::int32 next_uin() const;
  inline void set_next_uin(::google::protobuf::int32 value);

  // optional .DeskPlayInfo play_info = 6;
  inline bool has_play_info() const;
  inline void clear_play_info();
  static const int kPlayInfoFieldNumber = 6;
  inline const ::DeskPlayInfo& play_info() const;
  inline ::DeskPlayInfo* mutable_play_info();
  inline ::DeskPlayInfo* release_play_info();
  inline void set_allocated_play_info(::DeskPlayInfo* play_info);

  // optional int64 player_op_past_time = 7;
  inline bool has_player_op_past_time() const;
  inline void clear_player_op_past_time();
  static const int kPlayerOpPastTimeFieldNumber = 7;
  inline ::google::protobuf::int64 player_op_past_time() const;
  inline void set_player_op_past_time(::google::protobuf::int64 value);

  // optional int32 dealer_seatid = 8;
  inline bool has_dealer_seatid() const;
  inline void clear_dealer_seatid();
  static const int kDealerSeatidFieldNumber = 8;
  inline ::google::protobuf::int32 dealer_seatid() const;
  inline void set_dealer_seatid(::google::protobuf::int32 value);

  // optional int32 reason = 9;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 9;
  inline ::google::protobuf::int32 reason() const;
  inline void set_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EvtUserExit)
 private:
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_dealer();
  inline void clear_has_dealer();
  inline void set_has_op_uin();
  inline void clear_has_op_uin();
  inline void set_has_op_status();
  inline void clear_has_op_status();
  inline void set_has_next_uin();
  inline void clear_has_next_uin();
  inline void set_has_play_info();
  inline void clear_has_play_info();
  inline void set_has_player_op_past_time();
  inline void clear_has_player_op_past_time();
  inline void set_has_dealer_seatid();
  inline void clear_has_dealer_seatid();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 dealer_;
  ::google::protobuf::int32 op_uin_;
  ::google::protobuf::int32 op_status_;
  ::DeskPlayInfo* play_info_;
  ::google::protobuf::int32 next_uin_;
  ::google::protobuf::int32 dealer_seatid_;
  ::google::protobuf::int64 player_op_past_time_;
  ::google::protobuf::int32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static EvtUserExit* default_instance_;
};
// -------------------------------------------------------------------

class ClientNotifyStartGameReq : public ::google::protobuf::Message {
 public:
  ClientNotifyStartGameReq();
  virtual ~ClientNotifyStartGameReq();

  ClientNotifyStartGameReq(const ClientNotifyStartGameReq& from);

  inline ClientNotifyStartGameReq& operator=(const ClientNotifyStartGameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientNotifyStartGameReq& default_instance();

  void Swap(ClientNotifyStartGameReq* other);

  // implements Message ----------------------------------------------

  ClientNotifyStartGameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientNotifyStartGameReq& from);
  void MergeFrom(const ClientNotifyStartGameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClientNotifyStartGameReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static ClientNotifyStartGameReq* default_instance_;
};
// -------------------------------------------------------------------

class ClientNotifyStartGameRsp : public ::google::protobuf::Message {
 public:
  ClientNotifyStartGameRsp();
  virtual ~ClientNotifyStartGameRsp();

  ClientNotifyStartGameRsp(const ClientNotifyStartGameRsp& from);

  inline ClientNotifyStartGameRsp& operator=(const ClientNotifyStartGameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientNotifyStartGameRsp& default_instance();

  void Swap(ClientNotifyStartGameRsp* other);

  // implements Message ----------------------------------------------

  ClientNotifyStartGameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientNotifyStartGameRsp& from);
  void MergeFrom(const ClientNotifyStartGameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClientNotifyStartGameRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static ClientNotifyStartGameRsp* default_instance_;
};
// -------------------------------------------------------------------

class GameSendCardReq : public ::google::protobuf::Message {
 public:
  GameSendCardReq();
  virtual ~GameSendCardReq();

  GameSendCardReq(const GameSendCardReq& from);

  inline GameSendCardReq& operator=(const GameSendCardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSendCardReq& default_instance();

  void Swap(GameSendCardReq* other);

  // implements Message ----------------------------------------------

  GameSendCardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameSendCardReq& from);
  void MergeFrom(const GameSendCardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameSendCardReq)
 private:
  inline void set_has_card();
  inline void clear_has_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameSendCardReq* default_instance_;
};
// -------------------------------------------------------------------

class GameSendCardRsp : public ::google::protobuf::Message {
 public:
  GameSendCardRsp();
  virtual ~GameSendCardRsp();

  GameSendCardRsp(const GameSendCardRsp& from);

  inline GameSendCardRsp& operator=(const GameSendCardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSendCardRsp& default_instance();

  void Swap(GameSendCardRsp* other);

  // implements Message ----------------------------------------------

  GameSendCardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameSendCardRsp& from);
  void MergeFrom(const GameSendCardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameSendCardRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameSendCardRsp* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionChiReq : public ::google::protobuf::Message {
 public:
  GameOptionChiReq();
  virtual ~GameOptionChiReq();

  GameOptionChiReq(const GameOptionChiReq& from);

  inline GameOptionChiReq& operator=(const GameOptionChiReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionChiReq& default_instance();

  void Swap(GameOptionChiReq* other);

  // implements Message ----------------------------------------------

  GameOptionChiReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionChiReq& from);
  void MergeFrom(const GameOptionChiReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameOptionChiReq)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionChiReq* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionChiRsp : public ::google::protobuf::Message {
 public:
  GameOptionChiRsp();
  virtual ~GameOptionChiRsp();

  GameOptionChiRsp(const GameOptionChiRsp& from);

  inline GameOptionChiRsp& operator=(const GameOptionChiRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionChiRsp& default_instance();

  void Swap(GameOptionChiRsp* other);

  // implements Message ----------------------------------------------

  GameOptionChiRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionChiRsp& from);
  void MergeFrom(const GameOptionChiRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameOptionChiRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionChiRsp* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionPengReq : public ::google::protobuf::Message {
 public:
  GameOptionPengReq();
  virtual ~GameOptionPengReq();

  GameOptionPengReq(const GameOptionPengReq& from);

  inline GameOptionPengReq& operator=(const GameOptionPengReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionPengReq& default_instance();

  void Swap(GameOptionPengReq* other);

  // implements Message ----------------------------------------------

  GameOptionPengReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionPengReq& from);
  void MergeFrom(const GameOptionPengReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameOptionPengReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionPengReq* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionPengRsp : public ::google::protobuf::Message {
 public:
  GameOptionPengRsp();
  virtual ~GameOptionPengRsp();

  GameOptionPengRsp(const GameOptionPengRsp& from);

  inline GameOptionPengRsp& operator=(const GameOptionPengRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionPengRsp& default_instance();

  void Swap(GameOptionPengRsp* other);

  // implements Message ----------------------------------------------

  GameOptionPengRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionPengRsp& from);
  void MergeFrom(const GameOptionPengRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameOptionPengRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionPengRsp* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionGangReq : public ::google::protobuf::Message {
 public:
  GameOptionGangReq();
  virtual ~GameOptionGangReq();

  GameOptionGangReq(const GameOptionGangReq& from);

  inline GameOptionGangReq& operator=(const GameOptionGangReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionGangReq& default_instance();

  void Swap(GameOptionGangReq* other);

  // implements Message ----------------------------------------------

  GameOptionGangReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionGangReq& from);
  void MergeFrom(const GameOptionGangReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameOptionGangReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionGangReq* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionGangRsp : public ::google::protobuf::Message {
 public:
  GameOptionGangRsp();
  virtual ~GameOptionGangRsp();

  GameOptionGangRsp(const GameOptionGangRsp& from);

  inline GameOptionGangRsp& operator=(const GameOptionGangRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionGangRsp& default_instance();

  void Swap(GameOptionGangRsp* other);

  // implements Message ----------------------------------------------

  GameOptionGangRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionGangRsp& from);
  void MergeFrom(const GameOptionGangRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameOptionGangRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionGangRsp* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionHuReq : public ::google::protobuf::Message {
 public:
  GameOptionHuReq();
  virtual ~GameOptionHuReq();

  GameOptionHuReq(const GameOptionHuReq& from);

  inline GameOptionHuReq& operator=(const GameOptionHuReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionHuReq& default_instance();

  void Swap(GameOptionHuReq* other);

  // implements Message ----------------------------------------------

  GameOptionHuReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionHuReq& from);
  void MergeFrom(const GameOptionHuReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameOptionHuReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionHuReq* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionHuRsp : public ::google::protobuf::Message {
 public:
  GameOptionHuRsp();
  virtual ~GameOptionHuRsp();

  GameOptionHuRsp(const GameOptionHuRsp& from);

  inline GameOptionHuRsp& operator=(const GameOptionHuRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionHuRsp& default_instance();

  void Swap(GameOptionHuRsp* other);

  // implements Message ----------------------------------------------

  GameOptionHuRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionHuRsp& from);
  void MergeFrom(const GameOptionHuRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameOptionHuRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionHuRsp* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionPassReq : public ::google::protobuf::Message {
 public:
  GameOptionPassReq();
  virtual ~GameOptionPassReq();

  GameOptionPassReq(const GameOptionPassReq& from);

  inline GameOptionPassReq& operator=(const GameOptionPassReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionPassReq& default_instance();

  void Swap(GameOptionPassReq* other);

  // implements Message ----------------------------------------------

  GameOptionPassReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionPassReq& from);
  void MergeFrom(const GameOptionPassReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GameOptionPassReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionPassReq* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionPassRsp : public ::google::protobuf::Message {
 public:
  GameOptionPassRsp();
  virtual ~GameOptionPassRsp();

  GameOptionPassRsp(const GameOptionPassRsp& from);

  inline GameOptionPassRsp& operator=(const GameOptionPassRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionPassRsp& default_instance();

  void Swap(GameOptionPassRsp* other);

  // implements Message ----------------------------------------------

  GameOptionPassRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionPassRsp& from);
  void MergeFrom(const GameOptionPassRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameOptionPassRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionPassRsp* default_instance_;
};
// -------------------------------------------------------------------

class GamePlayerReadyReq : public ::google::protobuf::Message {
 public:
  GamePlayerReadyReq();
  virtual ~GamePlayerReadyReq();

  GamePlayerReadyReq(const GamePlayerReadyReq& from);

  inline GamePlayerReadyReq& operator=(const GamePlayerReadyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamePlayerReadyReq& default_instance();

  void Swap(GamePlayerReadyReq* other);

  // implements Message ----------------------------------------------

  GamePlayerReadyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamePlayerReadyReq& from);
  void MergeFrom(const GamePlayerReadyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 piaofen = 2;
  inline bool has_piaofen() const;
  inline void clear_piaofen();
  static const int kPiaofenFieldNumber = 2;
  inline ::google::protobuf::int32 piaofen() const;
  inline void set_piaofen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GamePlayerReadyReq)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_piaofen();
  inline void clear_has_piaofen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 piaofen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GamePlayerReadyReq* default_instance_;
};
// -------------------------------------------------------------------

class UserStatus : public ::google::protobuf::Message {
 public:
  UserStatus();
  virtual ~UserStatus();

  UserStatus(const UserStatus& from);

  inline UserStatus& operator=(const UserStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStatus& default_instance();

  void Swap(UserStatus* other);

  // implements Message ----------------------------------------------

  UserStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserStatus& from);
  void MergeFrom(const UserStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 piaofen = 3;
  inline bool has_piaofen() const;
  inline void clear_piaofen();
  static const int kPiaofenFieldNumber = 3;
  inline ::google::protobuf::int32 piaofen() const;
  inline void set_piaofen(::google::protobuf::int32 value);

  // optional int32 shanghuo = 4;
  inline bool has_shanghuo() const;
  inline void clear_shanghuo();
  static const int kShanghuoFieldNumber = 4;
  inline ::google::protobuf::int32 shanghuo() const;
  inline void set_shanghuo(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserStatus)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_piaofen();
  inline void clear_has_piaofen();
  inline void set_has_shanghuo();
  inline void clear_has_shanghuo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 piaofen_;
  ::google::protobuf::int32 shanghuo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static UserStatus* default_instance_;
};
// -------------------------------------------------------------------

class GamePlayerReadyEvt : public ::google::protobuf::Message {
 public:
  GamePlayerReadyEvt();
  virtual ~GamePlayerReadyEvt();

  GamePlayerReadyEvt(const GamePlayerReadyEvt& from);

  inline GamePlayerReadyEvt& operator=(const GamePlayerReadyEvt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamePlayerReadyEvt& default_instance();

  void Swap(GamePlayerReadyEvt* other);

  // implements Message ----------------------------------------------

  GamePlayerReadyEvt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamePlayerReadyEvt& from);
  void MergeFrom(const GamePlayerReadyEvt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .UserStatus users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::UserStatus& users(int index) const;
  inline ::UserStatus* mutable_users(int index);
  inline ::UserStatus* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::UserStatus >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserStatus >*
      mutable_users();

  // optional int32 pre_remain_time = 2;
  inline bool has_pre_remain_time() const;
  inline void clear_pre_remain_time();
  static const int kPreRemainTimeFieldNumber = 2;
  inline ::google::protobuf::int32 pre_remain_time() const;
  inline void set_pre_remain_time(::google::protobuf::int32 value);

  // optional int32 deskid = 3;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskidFieldNumber = 3;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GamePlayerReadyEvt)
 private:
  inline void set_has_pre_remain_time();
  inline void clear_has_pre_remain_time();
  inline void set_has_deskid();
  inline void clear_has_deskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::UserStatus > users_;
  ::google::protobuf::int32 pre_remain_time_;
  ::google::protobuf::int32 deskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GamePlayerReadyEvt* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionGangNotFirstReq : public ::google::protobuf::Message {
 public:
  GameOptionGangNotFirstReq();
  virtual ~GameOptionGangNotFirstReq();

  GameOptionGangNotFirstReq(const GameOptionGangNotFirstReq& from);

  inline GameOptionGangNotFirstReq& operator=(const GameOptionGangNotFirstReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionGangNotFirstReq& default_instance();

  void Swap(GameOptionGangNotFirstReq* other);

  // implements Message ----------------------------------------------

  GameOptionGangNotFirstReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionGangNotFirstReq& from);
  void MergeFrom(const GameOptionGangNotFirstReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gang_card = 1;
  inline bool has_gang_card() const;
  inline void clear_gang_card();
  static const int kGangCardFieldNumber = 1;
  inline ::google::protobuf::int32 gang_card() const;
  inline void set_gang_card(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameOptionGangNotFirstReq)
 private:
  inline void set_has_gang_card();
  inline void clear_has_gang_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gang_card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionGangNotFirstReq* default_instance_;
};
// -------------------------------------------------------------------

class GameOptionGangNotFirstRsp : public ::google::protobuf::Message {
 public:
  GameOptionGangNotFirstRsp();
  virtual ~GameOptionGangNotFirstRsp();

  GameOptionGangNotFirstRsp(const GameOptionGangNotFirstRsp& from);

  inline GameOptionGangNotFirstRsp& operator=(const GameOptionGangNotFirstRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOptionGangNotFirstRsp& default_instance();

  void Swap(GameOptionGangNotFirstRsp* other);

  // implements Message ----------------------------------------------

  GameOptionGangNotFirstRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOptionGangNotFirstRsp& from);
  void MergeFrom(const GameOptionGangNotFirstRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameOptionGangNotFirstRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOptionGangNotFirstRsp* default_instance_;
};
// -------------------------------------------------------------------

class ApplyDeleteReq : public ::google::protobuf::Message {
 public:
  ApplyDeleteReq();
  virtual ~ApplyDeleteReq();

  ApplyDeleteReq(const ApplyDeleteReq& from);

  inline ApplyDeleteReq& operator=(const ApplyDeleteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyDeleteReq& default_instance();

  void Swap(ApplyDeleteReq* other);

  // implements Message ----------------------------------------------

  ApplyDeleteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyDeleteReq& from);
  void MergeFrom(const ApplyDeleteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ApplyDeleteReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static ApplyDeleteReq* default_instance_;
};
// -------------------------------------------------------------------

class ApplyDeleteEvt : public ::google::protobuf::Message {
 public:
  ApplyDeleteEvt();
  virtual ~ApplyDeleteEvt();

  ApplyDeleteEvt(const ApplyDeleteEvt& from);

  inline ApplyDeleteEvt& operator=(const ApplyDeleteEvt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyDeleteEvt& default_instance();

  void Swap(ApplyDeleteEvt* other);

  // implements Message ----------------------------------------------

  ApplyDeleteEvt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyDeleteEvt& from);
  void MergeFrom(const ApplyDeleteEvt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 apply_uin = 1;
  inline bool has_apply_uin() const;
  inline void clear_apply_uin();
  static const int kApplyUinFieldNumber = 1;
  inline ::google::protobuf::int32 apply_uin() const;
  inline void set_apply_uin(::google::protobuf::int32 value);

  // optional int32 game_status = 2;
  inline bool has_game_status() const;
  inline void clear_game_status();
  static const int kGameStatusFieldNumber = 2;
  inline ::google::protobuf::int32 game_status() const;
  inline void set_game_status(::google::protobuf::int32 value);

  // optional int32 remain_time = 3;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 3;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // optional int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 deskid = 5;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskidFieldNumber = 5;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ApplyDeleteEvt)
 private:
  inline void set_has_apply_uin();
  inline void clear_has_apply_uin();
  inline void set_has_game_status();
  inline void clear_has_game_status();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_deskid();
  inline void clear_has_deskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 apply_uin_;
  ::google::protobuf::int32 game_status_;
  ::google::protobuf::int32 remain_time_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 deskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static ApplyDeleteEvt* default_instance_;
};
// -------------------------------------------------------------------

class UserOption : public ::google::protobuf::Message {
 public:
  UserOption();
  virtual ~UserOption();

  UserOption(const UserOption& from);

  inline UserOption& operator=(const UserOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserOption& default_instance();

  void Swap(UserOption* other);

  // implements Message ----------------------------------------------

  UserOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserOption& from);
  void MergeFrom(const UserOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserOption)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static UserOption* default_instance_;
};
// -------------------------------------------------------------------

class GameInfoEvt : public ::google::protobuf::Message {
 public:
  GameInfoEvt();
  virtual ~GameInfoEvt();

  GameInfoEvt(const GameInfoEvt& from);

  inline GameInfoEvt& operator=(const GameInfoEvt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfoEvt& default_instance();

  void Swap(GameInfoEvt* other);

  // implements Message ----------------------------------------------

  GameInfoEvt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameInfoEvt& from);
  void MergeFrom(const GameInfoEvt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 deskid = 1;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskidFieldNumber = 1;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 next_uin = 2;
  inline bool has_next_uin() const;
  inline void clear_next_uin();
  static const int kNextUinFieldNumber = 2;
  inline ::google::protobuf::int32 next_uin() const;
  inline void set_next_uin(::google::protobuf::int32 value);

  // optional int32 max_round = 3;
  inline bool has_max_round() const;
  inline void clear_max_round();
  static const int kMaxRoundFieldNumber = 3;
  inline ::google::protobuf::int32 max_round() const;
  inline void set_max_round(::google::protobuf::int32 value);

  // repeated int32 cards = 4 [packed = true];
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 4;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // optional int32 dealer_seatid = 5;
  inline bool has_dealer_seatid() const;
  inline void clear_dealer_seatid();
  static const int kDealerSeatidFieldNumber = 5;
  inline ::google::protobuf::int32 dealer_seatid() const;
  inline void set_dealer_seatid(::google::protobuf::int32 value);

  // repeated .UserCommonCards users = 6;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 6;
  inline const ::UserCommonCards& users(int index) const;
  inline ::UserCommonCards* mutable_users(int index);
  inline ::UserCommonCards* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::UserCommonCards >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserCommonCards >*
      mutable_users();

  // optional .UserOption op_user = 7;
  inline bool has_op_user() const;
  inline void clear_op_user();
  static const int kOpUserFieldNumber = 7;
  inline const ::UserOption& op_user() const;
  inline ::UserOption* mutable_op_user();
  inline ::UserOption* release_op_user();
  inline void set_allocated_op_user(::UserOption* op_user);

  // optional int32 share_cards_len = 8;
  inline bool has_share_cards_len() const;
  inline void clear_share_cards_len();
  static const int kShareCardsLenFieldNumber = 8;
  inline ::google::protobuf::int32 share_cards_len() const;
  inline void set_share_cards_len(::google::protobuf::int32 value);

  // optional int32 game_round = 9;
  inline bool has_game_round() const;
  inline void clear_game_round();
  static const int kGameRoundFieldNumber = 9;
  inline ::google::protobuf::int32 game_round() const;
  inline void set_game_round(::google::protobuf::int32 value);

  // optional .MyOption my_option = 10;
  inline bool has_my_option() const;
  inline void clear_my_option();
  static const int kMyOptionFieldNumber = 10;
  inline const ::MyOption& my_option() const;
  inline ::MyOption* mutable_my_option();
  inline ::MyOption* release_my_option();
  inline void set_allocated_my_option(::MyOption* my_option);

  // optional int32 status = 11;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 11;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 recv_card_uin = 12;
  inline bool has_recv_card_uin() const;
  inline void clear_recv_card_uin();
  static const int kRecvCardUinFieldNumber = 12;
  inline ::google::protobuf::int32 recv_card_uin() const;
  inline void set_recv_card_uin(::google::protobuf::int32 value);

  // optional int32 desk_remain_round = 13;
  inline bool has_desk_remain_round() const;
  inline void clear_desk_remain_round();
  static const int kDeskRemainRoundFieldNumber = 13;
  inline ::google::protobuf::int32 desk_remain_round() const;
  inline void set_desk_remain_round(::google::protobuf::int32 value);

  // optional int32 seat_num = 14;
  inline bool has_seat_num() const;
  inline void clear_seat_num();
  static const int kSeatNumFieldNumber = 14;
  inline ::google::protobuf::int32 seat_num() const;
  inline void set_seat_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameInfoEvt)
 private:
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_next_uin();
  inline void clear_has_next_uin();
  inline void set_has_max_round();
  inline void clear_has_max_round();
  inline void set_has_dealer_seatid();
  inline void clear_has_dealer_seatid();
  inline void set_has_op_user();
  inline void clear_has_op_user();
  inline void set_has_share_cards_len();
  inline void clear_has_share_cards_len();
  inline void set_has_game_round();
  inline void clear_has_game_round();
  inline void set_has_my_option();
  inline void clear_has_my_option();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_recv_card_uin();
  inline void clear_has_recv_card_uin();
  inline void set_has_desk_remain_round();
  inline void clear_has_desk_remain_round();
  inline void set_has_seat_num();
  inline void clear_has_seat_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 next_uin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  mutable int _cards_cached_byte_size_;
  ::google::protobuf::int32 max_round_;
  ::google::protobuf::int32 dealer_seatid_;
  ::google::protobuf::RepeatedPtrField< ::UserCommonCards > users_;
  ::UserOption* op_user_;
  ::google::protobuf::int32 share_cards_len_;
  ::google::protobuf::int32 game_round_;
  ::MyOption* my_option_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 recv_card_uin_;
  ::google::protobuf::int32 desk_remain_round_;
  ::google::protobuf::int32 seat_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameInfoEvt* default_instance_;
};
// -------------------------------------------------------------------

class GameOverResultInfo : public ::google::protobuf::Message {
 public:
  GameOverResultInfo();
  virtual ~GameOverResultInfo();

  GameOverResultInfo(const GameOverResultInfo& from);

  inline GameOverResultInfo& operator=(const GameOverResultInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameOverResultInfo& default_instance();

  void Swap(GameOverResultInfo* other);

  // implements Message ----------------------------------------------

  GameOverResultInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameOverResultInfo& from);
  void MergeFrom(const GameOverResultInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional int64 chips = 2;
  inline bool has_chips() const;
  inline void clear_chips();
  static const int kChipsFieldNumber = 2;
  inline ::google::protobuf::int64 chips() const;
  inline void set_chips(::google::protobuf::int64 value);

  // optional int32 round_chi_num = 3;
  inline bool has_round_chi_num() const;
  inline void clear_round_chi_num();
  static const int kRoundChiNumFieldNumber = 3;
  inline ::google::protobuf::int32 round_chi_num() const;
  inline void set_round_chi_num(::google::protobuf::int32 value);

  // optional int32 round_peng_num = 4;
  inline bool has_round_peng_num() const;
  inline void clear_round_peng_num();
  static const int kRoundPengNumFieldNumber = 4;
  inline ::google::protobuf::int32 round_peng_num() const;
  inline void set_round_peng_num(::google::protobuf::int32 value);

  // repeated int32 round_gang_list = 5;
  inline int round_gang_list_size() const;
  inline void clear_round_gang_list();
  static const int kRoundGangListFieldNumber = 5;
  inline ::google::protobuf::int32 round_gang_list(int index) const;
  inline void set_round_gang_list(int index, ::google::protobuf::int32 value);
  inline void add_round_gang_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      round_gang_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_round_gang_list();

  // repeated int32 round_hu_list = 6;
  inline int round_hu_list_size() const;
  inline void clear_round_hu_list();
  static const int kRoundHuListFieldNumber = 6;
  inline ::google::protobuf::int32 round_hu_list(int index) const;
  inline void set_round_hu_list(int index, ::google::protobuf::int32 value);
  inline void add_round_hu_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      round_hu_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_round_hu_list();

  // repeated int32 round_win_list = 7;
  inline int round_win_list_size() const;
  inline void clear_round_win_list();
  static const int kRoundWinListFieldNumber = 7;
  inline ::google::protobuf::int32 round_win_list(int index) const;
  inline void set_round_win_list(int index, ::google::protobuf::int32 value);
  inline void add_round_win_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      round_win_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_round_win_list();

  // optional int32 total_chi_num = 8;
  inline bool has_total_chi_num() const;
  inline void clear_total_chi_num();
  static const int kTotalChiNumFieldNumber = 8;
  inline ::google::protobuf::int32 total_chi_num() const;
  inline void set_total_chi_num(::google::protobuf::int32 value);

  // optional int32 total_peng_num = 9;
  inline bool has_total_peng_num() const;
  inline void clear_total_peng_num();
  static const int kTotalPengNumFieldNumber = 9;
  inline ::google::protobuf::int32 total_peng_num() const;
  inline void set_total_peng_num(::google::protobuf::int32 value);

  // repeated int32 total_gang_list = 10;
  inline int total_gang_list_size() const;
  inline void clear_total_gang_list();
  static const int kTotalGangListFieldNumber = 10;
  inline ::google::protobuf::int32 total_gang_list(int index) const;
  inline void set_total_gang_list(int index, ::google::protobuf::int32 value);
  inline void add_total_gang_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_gang_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_gang_list();

  // repeated int32 total_hu_list = 11;
  inline int total_hu_list_size() const;
  inline void clear_total_hu_list();
  static const int kTotalHuListFieldNumber = 11;
  inline ::google::protobuf::int32 total_hu_list(int index) const;
  inline void set_total_hu_list(int index, ::google::protobuf::int32 value);
  inline void add_total_hu_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_hu_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_hu_list();

  // repeated int32 total_win_list = 12;
  inline int total_win_list_size() const;
  inline void clear_total_win_list();
  static const int kTotalWinListFieldNumber = 12;
  inline ::google::protobuf::int32 total_win_list(int index) const;
  inline void set_total_win_list(int index, ::google::protobuf::int32 value);
  inline void add_total_win_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_win_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_win_list();

  // optional int32 status = 13;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 13;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 piaofen = 14;
  inline bool has_piaofen() const;
  inline void clear_piaofen();
  static const int kPiaofenFieldNumber = 14;
  inline ::google::protobuf::int32 piaofen() const;
  inline void set_piaofen(::google::protobuf::int32 value);

  // optional int32 shanghuo = 15;
  inline bool has_shanghuo() const;
  inline void clear_shanghuo();
  static const int kShanghuoFieldNumber = 15;
  inline ::google::protobuf::int32 shanghuo() const;
  inline void set_shanghuo(::google::protobuf::int32 value);

  // optional int32 bird_num = 16;
  inline bool has_bird_num() const;
  inline void clear_bird_num();
  static const int kBirdNumFieldNumber = 16;
  inline ::google::protobuf::int32 bird_num() const;
  inline void set_bird_num(::google::protobuf::int32 value);

  // repeated int32 cards = 17;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 17;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // repeated int32 out_cards = 18;
  inline int out_cards_size() const;
  inline void clear_out_cards();
  static const int kOutCardsFieldNumber = 18;
  inline ::google::protobuf::int32 out_cards(int index) const;
  inline void set_out_cards(int index, ::google::protobuf::int32 value);
  inline void add_out_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      out_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_out_cards();

  // repeated int32 op_list = 19;
  inline int op_list_size() const;
  inline void clear_op_list();
  static const int kOpListFieldNumber = 19;
  inline ::google::protobuf::int32 op_list(int index) const;
  inline void set_op_list(int index, ::google::protobuf::int32 value);
  inline void add_op_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      op_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_op_list();

  // optional int32 round_win_chips = 20;
  inline bool has_round_win_chips() const;
  inline void clear_round_win_chips();
  static const int kRoundWinChipsFieldNumber = 20;
  inline ::google::protobuf::int32 round_win_chips() const;
  inline void set_round_win_chips(::google::protobuf::int32 value);

  // repeated int32 over_chips_details = 21;
  inline int over_chips_details_size() const;
  inline void clear_over_chips_details();
  static const int kOverChipsDetailsFieldNumber = 21;
  inline ::google::protobuf::int32 over_chips_details(int index) const;
  inline void set_over_chips_details(int index, ::google::protobuf::int32 value);
  inline void add_over_chips_details(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      over_chips_details() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_over_chips_details();

  // optional int32 round_win_chips_before = 22;
  inline bool has_round_win_chips_before() const;
  inline void clear_round_win_chips_before();
  static const int kRoundWinChipsBeforeFieldNumber = 22;
  inline ::google::protobuf::int32 round_win_chips_before() const;
  inline void set_round_win_chips_before(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameOverResultInfo)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_chips();
  inline void clear_has_chips();
  inline void set_has_round_chi_num();
  inline void clear_has_round_chi_num();
  inline void set_has_round_peng_num();
  inline void clear_has_round_peng_num();
  inline void set_has_total_chi_num();
  inline void clear_has_total_chi_num();
  inline void set_has_total_peng_num();
  inline void clear_has_total_peng_num();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_piaofen();
  inline void clear_has_piaofen();
  inline void set_has_shanghuo();
  inline void clear_has_shanghuo();
  inline void set_has_bird_num();
  inline void clear_has_bird_num();
  inline void set_has_round_win_chips();
  inline void clear_has_round_win_chips();
  inline void set_has_round_win_chips_before();
  inline void clear_has_round_win_chips_before();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 chips_;
  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 round_chi_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > round_gang_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > round_hu_list_;
  ::google::protobuf::int32 round_peng_num_;
  ::google::protobuf::int32 total_chi_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > round_win_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_gang_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_hu_list_;
  ::google::protobuf::int32 total_peng_num_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_win_list_;
  ::google::protobuf::int32 piaofen_;
  ::google::protobuf::int32 shanghuo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > out_cards_;
  ::google::protobuf::int32 bird_num_;
  ::google::protobuf::int32 round_win_chips_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > op_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > over_chips_details_;
  ::google::protobuf::int32 round_win_chips_before_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static GameOverResultInfo* default_instance_;
};
// -------------------------------------------------------------------

class EvtGameOver : public ::google::protobuf::Message {
 public:
  EvtGameOver();
  virtual ~EvtGameOver();

  EvtGameOver(const EvtGameOver& from);

  inline EvtGameOver& operator=(const EvtGameOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvtGameOver& default_instance();

  void Swap(EvtGameOver* other);

  // implements Message ----------------------------------------------

  EvtGameOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvtGameOver& from);
  void MergeFrom(const EvtGameOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 winners = 1 [packed = true];
  inline int winners_size() const;
  inline void clear_winners();
  static const int kWinnersFieldNumber = 1;
  inline ::google::protobuf::int32 winners(int index) const;
  inline void set_winners(int index, ::google::protobuf::int32 value);
  inline void add_winners(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winners() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winners();

  // repeated .GameOverResultInfo result = 2;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::GameOverResultInfo& result(int index) const;
  inline ::GameOverResultInfo* mutable_result(int index);
  inline ::GameOverResultInfo* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::GameOverResultInfo >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::GameOverResultInfo >*
      mutable_result();

  // optional int32 deskid = 3;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskidFieldNumber = 3;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 remain_round_num = 5;
  inline bool has_remain_round_num() const;
  inline void clear_remain_round_num();
  static const int kRemainRoundNumFieldNumber = 5;
  inline ::google::protobuf::int32 remain_round_num() const;
  inline void set_remain_round_num(::google::protobuf::int32 value);

  // repeated int32 bird_card = 6 [packed = true];
  inline int bird_card_size() const;
  inline void clear_bird_card();
  static const int kBirdCardFieldNumber = 6;
  inline ::google::protobuf::int32 bird_card(int index) const;
  inline void set_bird_card(int index, ::google::protobuf::int32 value);
  inline void add_bird_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bird_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bird_card();

  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 seat_limit = 8;
  inline bool has_seat_limit() const;
  inline void clear_seat_limit();
  static const int kSeatLimitFieldNumber = 8;
  inline ::google::protobuf::int32 seat_limit() const;
  inline void set_seat_limit(::google::protobuf::int32 value);

  // optional int32 win_type = 9;
  inline bool has_win_type() const;
  inline void clear_win_type();
  static const int kWinTypeFieldNumber = 9;
  inline ::google::protobuf::int32 win_type() const;
  inline void set_win_type(::google::protobuf::int32 value);

  // optional .ExtraDeskTypeInfo extra_type = 10;
  inline bool has_extra_type() const;
  inline void clear_extra_type();
  static const int kExtraTypeFieldNumber = 10;
  inline const ::ExtraDeskTypeInfo& extra_type() const;
  inline ::ExtraDeskTypeInfo* mutable_extra_type();
  inline ::ExtraDeskTypeInfo* release_extra_type();
  inline void set_allocated_extra_type(::ExtraDeskTypeInfo* extra_type);

  // optional bool last_round = 11;
  inline bool has_last_round() const;
  inline void clear_last_round();
  static const int kLastRoundFieldNumber = 11;
  inline bool last_round() const;
  inline void set_last_round(bool value);

  // optional int32 over_time = 12;
  inline bool has_over_time() const;
  inline void clear_over_time();
  static const int kOverTimeFieldNumber = 12;
  inline ::google::protobuf::int32 over_time() const;
  inline void set_over_time(::google::protobuf::int32 value);

  // optional int32 over_reason = 13;
  inline bool has_over_reason() const;
  inline void clear_over_reason();
  static const int kOverReasonFieldNumber = 13;
  inline ::google::protobuf::int32 over_reason() const;
  inline void set_over_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:EvtGameOver)
 private:
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_remain_round_num();
  inline void clear_has_remain_round_num();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_seat_limit();
  inline void clear_has_seat_limit();
  inline void set_has_win_type();
  inline void clear_has_win_type();
  inline void set_has_extra_type();
  inline void clear_has_extra_type();
  inline void set_has_last_round();
  inline void clear_has_last_round();
  inline void set_has_over_time();
  inline void clear_has_over_time();
  inline void set_has_over_reason();
  inline void clear_has_over_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winners_;
  mutable int _winners_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::GameOverResultInfo > result_;
  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bird_card_;
  mutable int _bird_card_cached_byte_size_;
  ::google::protobuf::int32 remain_round_num_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 seat_limit_;
  ::google::protobuf::int32 win_type_;
  ::ExtraDeskTypeInfo* extra_type_;
  bool last_round_;
  ::google::protobuf::int32 over_time_;
  ::google::protobuf::int32 over_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static EvtGameOver* default_instance_;
};
// -------------------------------------------------------------------

class RecordInfo : public ::google::protobuf::Message {
 public:
  RecordInfo();
  virtual ~RecordInfo();

  RecordInfo(const RecordInfo& from);

  inline RecordInfo& operator=(const RecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordInfo& default_instance();

  void Swap(RecordInfo* other);

  // implements Message ----------------------------------------------

  RecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordInfo& from);
  void MergeFrom(const RecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional int32 role = 2;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 2;
  inline ::google::protobuf::int32 role() const;
  inline void set_role(::google::protobuf::int32 value);

  // optional int64 chips = 3;
  inline bool has_chips() const;
  inline void clear_chips();
  static const int kChipsFieldNumber = 3;
  inline ::google::protobuf::int64 chips() const;
  inline void set_chips(::google::protobuf::int64 value);

  // optional int32 round_win_chips = 4;
  inline bool has_round_win_chips() const;
  inline void clear_round_win_chips();
  static const int kRoundWinChipsFieldNumber = 4;
  inline ::google::protobuf::int32 round_win_chips() const;
  inline void set_round_win_chips(::google::protobuf::int32 value);

  // optional int32 round_chi_num = 5;
  inline bool has_round_chi_num() const;
  inline void clear_round_chi_num();
  static const int kRoundChiNumFieldNumber = 5;
  inline ::google::protobuf::int32 round_chi_num() const;
  inline void set_round_chi_num(::google::protobuf::int32 value);

  // optional int32 round_peng_num = 6;
  inline bool has_round_peng_num() const;
  inline void clear_round_peng_num();
  static const int kRoundPengNumFieldNumber = 6;
  inline ::google::protobuf::int32 round_peng_num() const;
  inline void set_round_peng_num(::google::protobuf::int32 value);

  // repeated int32 round_gang_list = 7;
  inline int round_gang_list_size() const;
  inline void clear_round_gang_list();
  static const int kRoundGangListFieldNumber = 7;
  inline ::google::protobuf::int32 round_gang_list(int index) const;
  inline void set_round_gang_list(int index, ::google::protobuf::int32 value);
  inline void add_round_gang_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      round_gang_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_round_gang_list();

  // repeated int32 round_hu_list = 8;
  inline int round_hu_list_size() const;
  inline void clear_round_hu_list();
  static const int kRoundHuListFieldNumber = 8;
  inline ::google::protobuf::int32 round_hu_list(int index) const;
  inline void set_round_hu_list(int index, ::google::protobuf::int32 value);
  inline void add_round_hu_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      round_hu_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_round_hu_list();

  // repeated int32 round_win_list = 9;
  inline int round_win_list_size() const;
  inline void clear_round_win_list();
  static const int kRoundWinListFieldNumber = 9;
  inline ::google::protobuf::int32 round_win_list(int index) const;
  inline void set_round_win_list(int index, ::google::protobuf::int32 value);
  inline void add_round_win_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      round_win_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_round_win_list();

  // optional int32 total_chi_num = 10;
  inline bool has_total_chi_num() const;
  inline void clear_total_chi_num();
  static const int kTotalChiNumFieldNumber = 10;
  inline ::google::protobuf::int32 total_chi_num() const;
  inline void set_total_chi_num(::google::protobuf::int32 value);

  // optional int32 total_peng_num = 11;
  inline bool has_total_peng_num() const;
  inline void clear_total_peng_num();
  static const int kTotalPengNumFieldNumber = 11;
  inline ::google::protobuf::int32 total_peng_num() const;
  inline void set_total_peng_num(::google::protobuf::int32 value);

  // repeated int32 total_gang_list = 12;
  inline int total_gang_list_size() const;
  inline void clear_total_gang_list();
  static const int kTotalGangListFieldNumber = 12;
  inline ::google::protobuf::int32 total_gang_list(int index) const;
  inline void set_total_gang_list(int index, ::google::protobuf::int32 value);
  inline void add_total_gang_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_gang_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_gang_list();

  // repeated int32 total_hu_list = 13;
  inline int total_hu_list_size() const;
  inline void clear_total_hu_list();
  static const int kTotalHuListFieldNumber = 13;
  inline ::google::protobuf::int32 total_hu_list(int index) const;
  inline void set_total_hu_list(int index, ::google::protobuf::int32 value);
  inline void add_total_hu_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_hu_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_hu_list();

  // repeated int32 total_win_list = 14;
  inline int total_win_list_size() const;
  inline void clear_total_win_list();
  static const int kTotalWinListFieldNumber = 14;
  inline ::google::protobuf::int32 total_win_list(int index) const;
  inline void set_total_win_list(int index, ::google::protobuf::int32 value);
  inline void add_total_win_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_win_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_win_list();

  // optional int32 piaofen = 15;
  inline bool has_piaofen() const;
  inline void clear_piaofen();
  static const int kPiaofenFieldNumber = 15;
  inline ::google::protobuf::int32 piaofen() const;
  inline void set_piaofen(::google::protobuf::int32 value);

  // optional int32 shanghuo = 16;
  inline bool has_shanghuo() const;
  inline void clear_shanghuo();
  static const int kShanghuoFieldNumber = 16;
  inline ::google::protobuf::int32 shanghuo() const;
  inline void set_shanghuo(::google::protobuf::int32 value);

  // optional int32 bird_num = 17;
  inline bool has_bird_num() const;
  inline void clear_bird_num();
  static const int kBirdNumFieldNumber = 17;
  inline ::google::protobuf::int32 bird_num() const;
  inline void set_bird_num(::google::protobuf::int32 value);

  // repeated int32 cards = 18;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 18;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // repeated int32 out_cards = 19;
  inline int out_cards_size() const;
  inline void clear_out_cards();
  static const int kOutCardsFieldNumber = 19;
  inline ::google::protobuf::int32 out_cards(int index) const;
  inline void set_out_cards(int index, ::google::protobuf::int32 value);
  inline void add_out_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      out_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_out_cards();

  // repeated int32 op_list = 20;
  inline int op_list_size() const;
  inline void clear_op_list();
  static const int kOpListFieldNumber = 20;
  inline ::google::protobuf::int32 op_list(int index) const;
  inline void set_op_list(int index, ::google::protobuf::int32 value);
  inline void add_op_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      op_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_op_list();

  // repeated int32 over_chips_details = 21;
  inline int over_chips_details_size() const;
  inline void clear_over_chips_details();
  static const int kOverChipsDetailsFieldNumber = 21;
  inline ::google::protobuf::int32 over_chips_details(int index) const;
  inline void set_over_chips_details(int index, ::google::protobuf::int32 value);
  inline void add_over_chips_details(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      over_chips_details() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_over_chips_details();

  // optional int32 round_win_chips_before = 22;
  inline bool has_round_win_chips_before() const;
  inline void clear_round_win_chips_before();
  static const int kRoundWinChipsBeforeFieldNumber = 22;
  inline ::google::protobuf::int32 round_win_chips_before() const;
  inline void set_round_win_chips_before(::google::protobuf::int32 value);

  // optional string nick = 23;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 23;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // optional int32 seatid = 24;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 24;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 sex = 25;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 25;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string portrait = 26;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 26;
  inline const ::std::string& portrait() const;
  inline void set_portrait(const ::std::string& value);
  inline void set_portrait(const char* value);
  inline void set_portrait(const char* value, size_t size);
  inline ::std::string* mutable_portrait();
  inline ::std::string* release_portrait();
  inline void set_allocated_portrait(::std::string* portrait);

  // @@protoc_insertion_point(class_scope:RecordInfo)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_chips();
  inline void clear_has_chips();
  inline void set_has_round_win_chips();
  inline void clear_has_round_win_chips();
  inline void set_has_round_chi_num();
  inline void clear_has_round_chi_num();
  inline void set_has_round_peng_num();
  inline void clear_has_round_peng_num();
  inline void set_has_total_chi_num();
  inline void clear_has_total_chi_num();
  inline void set_has_total_peng_num();
  inline void clear_has_total_peng_num();
  inline void set_has_piaofen();
  inline void clear_has_piaofen();
  inline void set_has_shanghuo();
  inline void clear_has_shanghuo();
  inline void set_has_bird_num();
  inline void clear_has_bird_num();
  inline void set_has_round_win_chips_before();
  inline void clear_has_round_win_chips_before();
  inline void set_has_nick();
  inline void clear_has_nick();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_portrait();
  inline void clear_has_portrait();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uin_;
  ::google::protobuf::int32 role_;
  ::google::protobuf::int64 chips_;
  ::google::protobuf::int32 round_win_chips_;
  ::google::protobuf::int32 round_chi_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > round_gang_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > round_hu_list_;
  ::google::protobuf::int32 round_peng_num_;
  ::google::protobuf::int32 total_chi_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > round_win_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_gang_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_hu_list_;
  ::google::protobuf::int32 total_peng_num_;
  ::google::protobuf::int32 piaofen_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_win_list_;
  ::google::protobuf::int32 shanghuo_;
  ::google::protobuf::int32 bird_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > out_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > op_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > over_chips_details_;
  ::std::string* nick_;
  ::google::protobuf::int32 round_win_chips_before_;
  ::google::protobuf::int32 seatid_;
  ::std::string* portrait_;
  ::google::protobuf::int32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static RecordInfo* default_instance_;
};
// -------------------------------------------------------------------

class PerPlayRecord : public ::google::protobuf::Message {
 public:
  PerPlayRecord();
  virtual ~PerPlayRecord();

  PerPlayRecord(const PerPlayRecord& from);

  inline PerPlayRecord& operator=(const PerPlayRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerPlayRecord& default_instance();

  void Swap(PerPlayRecord* other);

  // implements Message ----------------------------------------------

  PerPlayRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerPlayRecord& from);
  void MergeFrom(const PerPlayRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string roundid = 1;
  inline bool has_roundid() const;
  inline void clear_roundid();
  static const int kRoundidFieldNumber = 1;
  inline const ::std::string& roundid() const;
  inline void set_roundid(const ::std::string& value);
  inline void set_roundid(const char* value);
  inline void set_roundid(const char* value, size_t size);
  inline ::std::string* mutable_roundid();
  inline ::std::string* release_roundid();
  inline void set_allocated_roundid(::std::string* roundid);

  // repeated .RecordInfo result = 2;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::RecordInfo& result(int index) const;
  inline ::RecordInfo* mutable_result(int index);
  inline ::RecordInfo* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
      mutable_result();

  // optional int32 deskid = 3;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskidFieldNumber = 3;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 game_round = 4;
  inline bool has_game_round() const;
  inline void clear_game_round();
  static const int kGameRoundFieldNumber = 4;
  inline ::google::protobuf::int32 game_round() const;
  inline void set_game_round(::google::protobuf::int32 value);

  // optional int32 desk_round = 6;
  inline bool has_desk_round() const;
  inline void clear_desk_round();
  static const int kDeskRoundFieldNumber = 6;
  inline ::google::protobuf::int32 desk_round() const;
  inline void set_desk_round(::google::protobuf::int32 value);

  // repeated int32 bird_card = 7 [packed = true];
  inline int bird_card_size() const;
  inline void clear_bird_card();
  static const int kBirdCardFieldNumber = 7;
  inline ::google::protobuf::int32 bird_card(int index) const;
  inline void set_bird_card(int index, ::google::protobuf::int32 value);
  inline void add_bird_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bird_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bird_card();

  // optional int32 type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 seat_limit = 9;
  inline bool has_seat_limit() const;
  inline void clear_seat_limit();
  static const int kSeatLimitFieldNumber = 9;
  inline ::google::protobuf::int32 seat_limit() const;
  inline void set_seat_limit(::google::protobuf::int32 value);

  // optional int32 win_type = 10;
  inline bool has_win_type() const;
  inline void clear_win_type();
  static const int kWinTypeFieldNumber = 10;
  inline ::google::protobuf::int32 win_type() const;
  inline void set_win_type(::google::protobuf::int32 value);

  // optional .ExtraDeskTypeInfo extra_type = 11;
  inline bool has_extra_type() const;
  inline void clear_extra_type();
  static const int kExtraTypeFieldNumber = 11;
  inline const ::ExtraDeskTypeInfo& extra_type() const;
  inline ::ExtraDeskTypeInfo* mutable_extra_type();
  inline ::ExtraDeskTypeInfo* release_extra_type();
  inline void set_allocated_extra_type(::ExtraDeskTypeInfo* extra_type);

  // optional int32 over_time = 12;
  inline bool has_over_time() const;
  inline void clear_over_time();
  static const int kOverTimeFieldNumber = 12;
  inline ::google::protobuf::int32 over_time() const;
  inline void set_over_time(::google::protobuf::int32 value);

  // optional int32 master_uin = 13;
  inline bool has_master_uin() const;
  inline void clear_master_uin();
  static const int kMasterUinFieldNumber = 13;
  inline ::google::protobuf::int32 master_uin() const;
  inline void set_master_uin(::google::protobuf::int32 value);

  // repeated int32 winners = 14 [packed = true];
  inline int winners_size() const;
  inline void clear_winners();
  static const int kWinnersFieldNumber = 14;
  inline ::google::protobuf::int32 winners(int index) const;
  inline void set_winners(int index, ::google::protobuf::int32 value);
  inline void add_winners(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winners() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winners();

  // @@protoc_insertion_point(class_scope:PerPlayRecord)
 private:
  inline void set_has_roundid();
  inline void clear_has_roundid();
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_game_round();
  inline void clear_has_game_round();
  inline void set_has_desk_round();
  inline void clear_has_desk_round();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_seat_limit();
  inline void clear_has_seat_limit();
  inline void set_has_win_type();
  inline void clear_has_win_type();
  inline void set_has_extra_type();
  inline void clear_has_extra_type();
  inline void set_has_over_time();
  inline void clear_has_over_time();
  inline void set_has_master_uin();
  inline void clear_has_master_uin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* roundid_;
  ::google::protobuf::RepeatedPtrField< ::RecordInfo > result_;
  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 game_round_;
  ::google::protobuf::int32 desk_round_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bird_card_;
  mutable int _bird_card_cached_byte_size_;
  ::google::protobuf::int32 seat_limit_;
  ::google::protobuf::int32 win_type_;
  ::ExtraDeskTypeInfo* extra_type_;
  ::google::protobuf::int32 over_time_;
  ::google::protobuf::int32 master_uin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winners_;
  mutable int _winners_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static PerPlayRecord* default_instance_;
};
// -------------------------------------------------------------------

class MyPlayRecordListReq : public ::google::protobuf::Message {
 public:
  MyPlayRecordListReq();
  virtual ~MyPlayRecordListReq();

  MyPlayRecordListReq(const MyPlayRecordListReq& from);

  inline MyPlayRecordListReq& operator=(const MyPlayRecordListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyPlayRecordListReq& default_instance();

  void Swap(MyPlayRecordListReq* other);

  // implements Message ----------------------------------------------

  MyPlayRecordListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyPlayRecordListReq& from);
  void MergeFrom(const MyPlayRecordListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:MyPlayRecordListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MyPlayRecordListReq* default_instance_;
};
// -------------------------------------------------------------------

class MyPlayRecordListRsp : public ::google::protobuf::Message {
 public:
  MyPlayRecordListRsp();
  virtual ~MyPlayRecordListRsp();

  MyPlayRecordListRsp(const MyPlayRecordListRsp& from);

  inline MyPlayRecordListRsp& operator=(const MyPlayRecordListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyPlayRecordListRsp& default_instance();

  void Swap(MyPlayRecordListRsp* other);

  // implements Message ----------------------------------------------

  MyPlayRecordListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyPlayRecordListRsp& from);
  void MergeFrom(const MyPlayRecordListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PerPlayRecord record_list = 1;
  inline int record_list_size() const;
  inline void clear_record_list();
  static const int kRecordListFieldNumber = 1;
  inline const ::PerPlayRecord& record_list(int index) const;
  inline ::PerPlayRecord* mutable_record_list(int index);
  inline ::PerPlayRecord* add_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PerPlayRecord >&
      record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PerPlayRecord >*
      mutable_record_list();

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MyPlayRecordListRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PerPlayRecord > record_list_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static MyPlayRecordListRsp* default_instance_;
};
// -------------------------------------------------------------------

class RoundPlayRecordsReq : public ::google::protobuf::Message {
 public:
  RoundPlayRecordsReq();
  virtual ~RoundPlayRecordsReq();

  RoundPlayRecordsReq(const RoundPlayRecordsReq& from);

  inline RoundPlayRecordsReq& operator=(const RoundPlayRecordsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoundPlayRecordsReq& default_instance();

  void Swap(RoundPlayRecordsReq* other);

  // implements Message ----------------------------------------------

  RoundPlayRecordsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoundPlayRecordsReq& from);
  void MergeFrom(const RoundPlayRecordsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string round_id = 1;
  inline bool has_round_id() const;
  inline void clear_round_id();
  static const int kRoundIdFieldNumber = 1;
  inline const ::std::string& round_id() const;
  inline void set_round_id(const ::std::string& value);
  inline void set_round_id(const char* value);
  inline void set_round_id(const char* value, size_t size);
  inline ::std::string* mutable_round_id();
  inline ::std::string* release_round_id();
  inline void set_allocated_round_id(::std::string* round_id);

  // optional int32 game_round_index = 2;
  inline bool has_game_round_index() const;
  inline void clear_game_round_index();
  static const int kGameRoundIndexFieldNumber = 2;
  inline ::google::protobuf::int32 game_round_index() const;
  inline void set_game_round_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RoundPlayRecordsReq)
 private:
  inline void set_has_round_id();
  inline void clear_has_round_id();
  inline void set_has_game_round_index();
  inline void clear_has_game_round_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* round_id_;
  ::google::protobuf::int32 game_round_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static RoundPlayRecordsReq* default_instance_;
};
// -------------------------------------------------------------------

class RoundPlayRecordsRsp : public ::google::protobuf::Message {
 public:
  RoundPlayRecordsRsp();
  virtual ~RoundPlayRecordsRsp();

  RoundPlayRecordsRsp(const RoundPlayRecordsRsp& from);

  inline RoundPlayRecordsRsp& operator=(const RoundPlayRecordsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoundPlayRecordsRsp& default_instance();

  void Swap(RoundPlayRecordsRsp* other);

  // implements Message ----------------------------------------------

  RoundPlayRecordsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoundPlayRecordsRsp& from);
  void MergeFrom(const RoundPlayRecordsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PerPlayRecord record_list = 1;
  inline int record_list_size() const;
  inline void clear_record_list();
  static const int kRecordListFieldNumber = 1;
  inline const ::PerPlayRecord& record_list(int index) const;
  inline ::PerPlayRecord* mutable_record_list(int index);
  inline ::PerPlayRecord* add_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PerPlayRecord >&
      record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PerPlayRecord >*
      mutable_record_list();

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RoundPlayRecordsRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PerPlayRecord > record_list_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static RoundPlayRecordsRsp* default_instance_;
};
// -------------------------------------------------------------------

class DeskChatReq : public ::google::protobuf::Message {
 public:
  DeskChatReq();
  virtual ~DeskChatReq();

  DeskChatReq(const DeskChatReq& from);

  inline DeskChatReq& operator=(const DeskChatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeskChatReq& default_instance();

  void Swap(DeskChatReq* other);

  // implements Message ----------------------------------------------

  DeskChatReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeskChatReq& from);
  void MergeFrom(const DeskChatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeskChatReq)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static DeskChatReq* default_instance_;
};
// -------------------------------------------------------------------

class DeskChatEvt : public ::google::protobuf::Message {
 public:
  DeskChatEvt();
  virtual ~DeskChatEvt();

  DeskChatEvt(const DeskChatEvt& from);

  inline DeskChatEvt& operator=(const DeskChatEvt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeskChatEvt& default_instance();

  void Swap(DeskChatEvt* other);

  // implements Message ----------------------------------------------

  DeskChatEvt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeskChatEvt& from);
  void MergeFrom(const DeskChatEvt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 op_uin = 2;
  inline bool has_op_uin() const;
  inline void clear_op_uin();
  static const int kOpUinFieldNumber = 2;
  inline ::google::protobuf::int32 op_uin() const;
  inline void set_op_uin(::google::protobuf::int32 value);

  // optional bool sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline bool sex() const;
  inline void set_sex(bool value);

  // optional int32 index = 4;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:DeskChatEvt)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_op_uin();
  inline void clear_has_op_uin();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 op_uin_;
  bool sex_;
  ::google::protobuf::int32 index_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static DeskChatEvt* default_instance_;
};
// -------------------------------------------------------------------

class LogOutReq : public ::google::protobuf::Message {
 public:
  LogOutReq();
  virtual ~LogOutReq();

  LogOutReq(const LogOutReq& from);

  inline LogOutReq& operator=(const LogOutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogOutReq& default_instance();

  void Swap(LogOutReq* other);

  // implements Message ----------------------------------------------

  LogOutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogOutReq& from);
  void MergeFrom(const LogOutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogOutReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static LogOutReq* default_instance_;
};
// -------------------------------------------------------------------

class LogOutRsp : public ::google::protobuf::Message {
 public:
  LogOutRsp();
  virtual ~LogOutRsp();

  LogOutRsp(const LogOutRsp& from);

  inline LogOutRsp& operator=(const LogOutRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogOutRsp& default_instance();

  void Swap(LogOutRsp* other);

  // implements Message ----------------------------------------------

  LogOutRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogOutRsp& from);
  void MergeFrom(const LogOutRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LogOutRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static LogOutRsp* default_instance_;
};
// -------------------------------------------------------------------

class EvtBroadCast : public ::google::protobuf::Message {
 public:
  EvtBroadCast();
  virtual ~EvtBroadCast();

  EvtBroadCast(const EvtBroadCast& from);

  inline EvtBroadCast& operator=(const EvtBroadCast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvtBroadCast& default_instance();

  void Swap(EvtBroadCast* other);

  // implements Message ----------------------------------------------

  EvtBroadCast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvtBroadCast& from);
  void MergeFrom(const EvtBroadCast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string nick = 3;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 3;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // @@protoc_insertion_point(class_scope:EvtBroadCast)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_nick();
  inline void clear_has_nick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::std::string* nick_;
  ::google::protobuf::int32 uin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static EvtBroadCast* default_instance_;
};
// -------------------------------------------------------------------

class UserCreatePreBill : public ::google::protobuf::Message {
 public:
  UserCreatePreBill();
  virtual ~UserCreatePreBill();

  UserCreatePreBill(const UserCreatePreBill& from);

  inline UserCreatePreBill& operator=(const UserCreatePreBill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCreatePreBill& default_instance();

  void Swap(UserCreatePreBill* other);

  // implements Message ----------------------------------------------

  UserCreatePreBill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserCreatePreBill& from);
  void MergeFrom(const UserCreatePreBill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline const ::std::string& item_id() const;
  inline void set_item_id(const ::std::string& value);
  inline void set_item_id(const char* value);
  inline void set_item_id(const char* value, size_t size);
  inline ::std::string* mutable_item_id();
  inline ::std::string* release_item_id();
  inline void set_allocated_item_id(::std::string* item_id);

  // @@protoc_insertion_point(class_scope:UserCreatePreBill)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* item_id_;
  ::google::protobuf::int32 uin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static UserCreatePreBill* default_instance_;
};
// -------------------------------------------------------------------

class CreateFormalBill : public ::google::protobuf::Message {
 public:
  CreateFormalBill();
  virtual ~CreateFormalBill();

  CreateFormalBill(const CreateFormalBill& from);

  inline CreateFormalBill& operator=(const CreateFormalBill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateFormalBill& default_instance();

  void Swap(CreateFormalBill* other);

  // implements Message ----------------------------------------------

  CreateFormalBill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateFormalBill& from);
  void MergeFrom(const CreateFormalBill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // optional string item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline const ::std::string& item_id() const;
  inline void set_item_id(const ::std::string& value);
  inline void set_item_id(const char* value);
  inline void set_item_id(const char* value, size_t size);
  inline ::std::string* mutable_item_id();
  inline ::std::string* release_item_id();
  inline void set_allocated_item_id(::std::string* item_id);

  // @@protoc_insertion_point(class_scope:CreateFormalBill)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* item_id_;
  ::google::protobuf::int32 uin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static CreateFormalBill* default_instance_;
};
// -------------------------------------------------------------------

class SetInviteUserReq : public ::google::protobuf::Message {
 public:
  SetInviteUserReq();
  virtual ~SetInviteUserReq();

  SetInviteUserReq(const SetInviteUserReq& from);

  inline SetInviteUserReq& operator=(const SetInviteUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetInviteUserReq& default_instance();

  void Swap(SetInviteUserReq* other);

  // implements Message ----------------------------------------------

  SetInviteUserReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetInviteUserReq& from);
  void MergeFrom(const SetInviteUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::int32 uin() const;
  inline void set_uin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SetInviteUserReq)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static SetInviteUserReq* default_instance_;
};
// -------------------------------------------------------------------

class SetInviteUserRsp : public ::google::protobuf::Message {
 public:
  SetInviteUserRsp();
  virtual ~SetInviteUserRsp();

  SetInviteUserRsp(const SetInviteUserRsp& from);

  inline SetInviteUserRsp& operator=(const SetInviteUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetInviteUserRsp& default_instance();

  void Swap(SetInviteUserRsp* other);

  // implements Message ----------------------------------------------

  SetInviteUserRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetInviteUserRsp& from);
  void MergeFrom(const SetInviteUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SetInviteUserRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static SetInviteUserRsp* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatReq : public ::google::protobuf::Message {
 public:
  HeartBeatReq();
  virtual ~HeartBeatReq();

  HeartBeatReq(const HeartBeatReq& from);

  inline HeartBeatReq& operator=(const HeartBeatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatReq& default_instance();

  void Swap(HeartBeatReq* other);

  // implements Message ----------------------------------------------

  HeartBeatReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatReq& from);
  void MergeFrom(const HeartBeatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HeartBeatReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatReq* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeatRsp : public ::google::protobuf::Message {
 public:
  HeartBeatRsp();
  virtual ~HeartBeatRsp();

  HeartBeatRsp(const HeartBeatRsp& from);

  inline HeartBeatRsp& operator=(const HeartBeatRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatRsp& default_instance();

  void Swap(HeartBeatRsp* other);

  // implements Message ----------------------------------------------

  HeartBeatRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeatRsp& from);
  void MergeFrom(const HeartBeatRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HeartBeatRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static HeartBeatRsp* default_instance_;
};
// -------------------------------------------------------------------

class ws_msg : public ::google::protobuf::Message {
 public:
  ws_msg();
  virtual ~ws_msg();

  ws_msg(const ws_msg& from);

  inline ws_msg& operator=(const ws_msg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ws_msg& default_instance();

  void Swap(ws_msg* other);

  // implements Message ----------------------------------------------

  ws_msg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ws_msg& from);
  void MergeFrom(const ws_msg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ms_op_int = 1;
  inline bool has_ms_op_int() const;
  inline void clear_ms_op_int();
  static const int kMsOpIntFieldNumber = 1;
  inline ::google::protobuf::int32 ms_op_int() const;
  inline void set_ms_op_int(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ws_msg)
 private:
  inline void set_has_ms_op_int();
  inline void clear_has_ms_op_int();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ms_op_int_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static ws_msg* default_instance_;
};
// -------------------------------------------------------------------

class WsProtoTest : public ::google::protobuf::Message {
 public:
  WsProtoTest();
  virtual ~WsProtoTest();

  WsProtoTest(const WsProtoTest& from);

  inline WsProtoTest& operator=(const WsProtoTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WsProtoTest& default_instance();

  void Swap(WsProtoTest* other);

  // implements Message ----------------------------------------------

  WsProtoTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WsProtoTest& from);
  void MergeFrom(const WsProtoTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 op_int = 1;
  inline bool has_op_int() const;
  inline void clear_op_int();
  static const int kOpIntFieldNumber = 1;
  inline ::google::protobuf::int32 op_int() const;
  inline void set_op_int(::google::protobuf::int32 value);

  // repeated int32 re_int = 2 [packed = true];
  inline int re_int_size() const;
  inline void clear_re_int();
  static const int kReIntFieldNumber = 2;
  inline ::google::protobuf::int32 re_int(int index) const;
  inline void set_re_int(int index, ::google::protobuf::int32 value);
  inline void add_re_int(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      re_int() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_re_int();

  // optional string op_str = 3;
  inline bool has_op_str() const;
  inline void clear_op_str();
  static const int kOpStrFieldNumber = 3;
  inline const ::std::string& op_str() const;
  inline void set_op_str(const ::std::string& value);
  inline void set_op_str(const char* value);
  inline void set_op_str(const char* value, size_t size);
  inline ::std::string* mutable_op_str();
  inline ::std::string* release_op_str();
  inline void set_allocated_op_str(::std::string* op_str);

  // optional .ws_msg op_msg = 4;
  inline bool has_op_msg() const;
  inline void clear_op_msg();
  static const int kOpMsgFieldNumber = 4;
  inline const ::ws_msg& op_msg() const;
  inline ::ws_msg* mutable_op_msg();
  inline ::ws_msg* release_op_msg();
  inline void set_allocated_op_msg(::ws_msg* op_msg);

  // repeated .ws_msg re_msg = 5;
  inline int re_msg_size() const;
  inline void clear_re_msg();
  static const int kReMsgFieldNumber = 5;
  inline const ::ws_msg& re_msg(int index) const;
  inline ::ws_msg* mutable_re_msg(int index);
  inline ::ws_msg* add_re_msg();
  inline const ::google::protobuf::RepeatedPtrField< ::ws_msg >&
      re_msg() const;
  inline ::google::protobuf::RepeatedPtrField< ::ws_msg >*
      mutable_re_msg();

  // @@protoc_insertion_point(class_scope:WsProtoTest)
 private:
  inline void set_has_op_int();
  inline void clear_has_op_int();
  inline void set_has_op_str();
  inline void clear_has_op_str();
  inline void set_has_op_msg();
  inline void clear_has_op_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > re_int_;
  mutable int _re_int_cached_byte_size_;
  ::std::string* op_str_;
  ::ws_msg* op_msg_;
  ::google::protobuf::RepeatedPtrField< ::ws_msg > re_msg_;
  ::google::protobuf::int32 op_int_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_mahjong_2eproto();
  friend void protobuf_AssignDesc_mahjong_2eproto();
  friend void protobuf_ShutdownFile_mahjong_2eproto();

  void InitAsDefaultInstance();
  static WsProtoTest* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginReq

// optional string nick = 1;
inline bool LoginReq::has_nick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_nick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_nick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_nick() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& LoginReq::nick() const {
  return *nick_;
}
inline void LoginReq::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void LoginReq::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void LoginReq::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  return nick_;
}
inline ::std::string* LoginReq::release_nick() {
  clear_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 2;
inline bool LoginReq::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& LoginReq::uuid() const {
  return *uuid_;
}
inline void LoginReq::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LoginReq::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LoginReq::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* LoginReq::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 3;
inline bool LoginReq::has_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginReq::set_has_sign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginReq::clear_has_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginReq::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& LoginReq::sign() const {
  return *sign_;
}
inline void LoginReq::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void LoginReq::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void LoginReq::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* LoginReq::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 4;
inline bool LoginReq::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginReq::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginReq::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginReq::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& LoginReq::channel() const {
  return *channel_;
}
inline void LoginReq::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void LoginReq::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void LoginReq::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* LoginReq::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 version = 5;
inline bool LoginReq::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginReq::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 LoginReq::version() const {
  return version_;
}
inline void LoginReq::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional string os = 6;
inline bool LoginReq::has_os() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginReq::set_has_os() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginReq::clear_has_os() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginReq::clear_os() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& LoginReq::os() const {
  return *os_;
}
inline void LoginReq::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void LoginReq::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void LoginReq::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  return os_;
}
inline ::std::string* LoginReq::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_register = 7;
inline bool LoginReq::has_is_register() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoginReq::set_has_is_register() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoginReq::clear_has_is_register() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoginReq::clear_is_register() {
  is_register_ = false;
  clear_has_is_register();
}
inline bool LoginReq::is_register() const {
  return is_register_;
}
inline void LoginReq::set_is_register(bool value) {
  set_has_is_register();
  is_register_ = value;
}

// optional string extra_username = 8;
inline bool LoginReq::has_extra_username() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LoginReq::set_has_extra_username() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LoginReq::clear_has_extra_username() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LoginReq::clear_extra_username() {
  if (extra_username_ != &::google::protobuf::internal::kEmptyString) {
    extra_username_->clear();
  }
  clear_has_extra_username();
}
inline const ::std::string& LoginReq::extra_username() const {
  return *extra_username_;
}
inline void LoginReq::set_extra_username(const ::std::string& value) {
  set_has_extra_username();
  if (extra_username_ == &::google::protobuf::internal::kEmptyString) {
    extra_username_ = new ::std::string;
  }
  extra_username_->assign(value);
}
inline void LoginReq::set_extra_username(const char* value) {
  set_has_extra_username();
  if (extra_username_ == &::google::protobuf::internal::kEmptyString) {
    extra_username_ = new ::std::string;
  }
  extra_username_->assign(value);
}
inline void LoginReq::set_extra_username(const char* value, size_t size) {
  set_has_extra_username();
  if (extra_username_ == &::google::protobuf::internal::kEmptyString) {
    extra_username_ = new ::std::string;
  }
  extra_username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_extra_username() {
  set_has_extra_username();
  if (extra_username_ == &::google::protobuf::internal::kEmptyString) {
    extra_username_ = new ::std::string;
  }
  return extra_username_;
}
inline ::std::string* LoginReq::release_extra_username() {
  clear_has_extra_username();
  if (extra_username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extra_username_;
    extra_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_extra_username(::std::string* extra_username) {
  if (extra_username_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_username_;
  }
  if (extra_username) {
    set_has_extra_username();
    extra_username_ = extra_username;
  } else {
    clear_has_extra_username();
    extra_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string extra_password = 9;
inline bool LoginReq::has_extra_password() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LoginReq::set_has_extra_password() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LoginReq::clear_has_extra_password() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LoginReq::clear_extra_password() {
  if (extra_password_ != &::google::protobuf::internal::kEmptyString) {
    extra_password_->clear();
  }
  clear_has_extra_password();
}
inline const ::std::string& LoginReq::extra_password() const {
  return *extra_password_;
}
inline void LoginReq::set_extra_password(const ::std::string& value) {
  set_has_extra_password();
  if (extra_password_ == &::google::protobuf::internal::kEmptyString) {
    extra_password_ = new ::std::string;
  }
  extra_password_->assign(value);
}
inline void LoginReq::set_extra_password(const char* value) {
  set_has_extra_password();
  if (extra_password_ == &::google::protobuf::internal::kEmptyString) {
    extra_password_ = new ::std::string;
  }
  extra_password_->assign(value);
}
inline void LoginReq::set_extra_password(const char* value, size_t size) {
  set_has_extra_password();
  if (extra_password_ == &::google::protobuf::internal::kEmptyString) {
    extra_password_ = new ::std::string;
  }
  extra_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginReq::mutable_extra_password() {
  set_has_extra_password();
  if (extra_password_ == &::google::protobuf::internal::kEmptyString) {
    extra_password_ = new ::std::string;
  }
  return extra_password_;
}
inline ::std::string* LoginReq::release_extra_password() {
  clear_has_extra_password();
  if (extra_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extra_password_;
    extra_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginReq::set_allocated_extra_password(::std::string* extra_password) {
  if (extra_password_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_password_;
  }
  if (extra_password) {
    set_has_extra_password();
    extra_password_ = extra_password;
  } else {
    clear_has_extra_password();
    extra_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WeChatLoginReq

// optional string sign = 1;
inline bool WeChatLoginReq::has_sign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeChatLoginReq::set_has_sign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeChatLoginReq::clear_has_sign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeChatLoginReq::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& WeChatLoginReq::sign() const {
  return *sign_;
}
inline void WeChatLoginReq::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void WeChatLoginReq::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void WeChatLoginReq::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeChatLoginReq::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* WeChatLoginReq::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeChatLoginReq::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string openid = 2;
inline bool WeChatLoginReq::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeChatLoginReq::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeChatLoginReq::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeChatLoginReq::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& WeChatLoginReq::openid() const {
  return *openid_;
}
inline void WeChatLoginReq::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void WeChatLoginReq::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void WeChatLoginReq::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeChatLoginReq::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* WeChatLoginReq::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeChatLoginReq::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 3;
inline bool WeChatLoginReq::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeChatLoginReq::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeChatLoginReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeChatLoginReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& WeChatLoginReq::token() const {
  return *token_;
}
inline void WeChatLoginReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void WeChatLoginReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void WeChatLoginReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeChatLoginReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* WeChatLoginReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeChatLoginReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string expire_date = 4;
inline bool WeChatLoginReq::has_expire_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeChatLoginReq::set_has_expire_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeChatLoginReq::clear_has_expire_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeChatLoginReq::clear_expire_date() {
  if (expire_date_ != &::google::protobuf::internal::kEmptyString) {
    expire_date_->clear();
  }
  clear_has_expire_date();
}
inline const ::std::string& WeChatLoginReq::expire_date() const {
  return *expire_date_;
}
inline void WeChatLoginReq::set_expire_date(const ::std::string& value) {
  set_has_expire_date();
  if (expire_date_ == &::google::protobuf::internal::kEmptyString) {
    expire_date_ = new ::std::string;
  }
  expire_date_->assign(value);
}
inline void WeChatLoginReq::set_expire_date(const char* value) {
  set_has_expire_date();
  if (expire_date_ == &::google::protobuf::internal::kEmptyString) {
    expire_date_ = new ::std::string;
  }
  expire_date_->assign(value);
}
inline void WeChatLoginReq::set_expire_date(const char* value, size_t size) {
  set_has_expire_date();
  if (expire_date_ == &::google::protobuf::internal::kEmptyString) {
    expire_date_ = new ::std::string;
  }
  expire_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeChatLoginReq::mutable_expire_date() {
  set_has_expire_date();
  if (expire_date_ == &::google::protobuf::internal::kEmptyString) {
    expire_date_ = new ::std::string;
  }
  return expire_date_;
}
inline ::std::string* WeChatLoginReq::release_expire_date() {
  clear_has_expire_date();
  if (expire_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expire_date_;
    expire_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeChatLoginReq::set_allocated_expire_date(::std::string* expire_date) {
  if (expire_date_ != &::google::protobuf::internal::kEmptyString) {
    delete expire_date_;
  }
  if (expire_date) {
    set_has_expire_date();
    expire_date_ = expire_date;
  } else {
    clear_has_expire_date();
    expire_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 5;
inline bool WeChatLoginReq::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeChatLoginReq::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeChatLoginReq::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeChatLoginReq::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& WeChatLoginReq::channel() const {
  return *channel_;
}
inline void WeChatLoginReq::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void WeChatLoginReq::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void WeChatLoginReq::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeChatLoginReq::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* WeChatLoginReq::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeChatLoginReq::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 version = 6;
inline bool WeChatLoginReq::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeChatLoginReq::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeChatLoginReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeChatLoginReq::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 WeChatLoginReq::version() const {
  return version_;
}
inline void WeChatLoginReq::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional string os = 7;
inline bool WeChatLoginReq::has_os() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WeChatLoginReq::set_has_os() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WeChatLoginReq::clear_has_os() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WeChatLoginReq::clear_os() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& WeChatLoginReq::os() const {
  return *os_;
}
inline void WeChatLoginReq::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void WeChatLoginReq::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void WeChatLoginReq::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeChatLoginReq::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  return os_;
}
inline ::std::string* WeChatLoginReq::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeChatLoginReq::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LoginRsp

// optional int32 uin = 1;
inline bool LoginRsp::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRsp::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRsp::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRsp::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 LoginRsp::uin() const {
  return uin_;
}
inline void LoginRsp::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional string password = 2;
inline bool LoginRsp::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRsp::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRsp::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRsp::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginRsp::password() const {
  return *password_;
}
inline void LoginRsp::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRsp::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginRsp::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginRsp::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nick = 3;
inline bool LoginRsp::has_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRsp::set_has_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRsp::clear_has_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRsp::clear_nick() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& LoginRsp::nick() const {
  return *nick_;
}
inline void LoginRsp::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void LoginRsp::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void LoginRsp::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  return nick_;
}
inline ::std::string* LoginRsp::release_nick() {
  clear_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 4;
inline bool LoginRsp::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRsp::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRsp::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRsp::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 LoginRsp::sex() const {
  return sex_;
}
inline void LoginRsp::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 old_deskid = 5;
inline bool LoginRsp::has_old_deskid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginRsp::set_has_old_deskid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginRsp::clear_has_old_deskid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginRsp::clear_old_deskid() {
  old_deskid_ = 0;
  clear_has_old_deskid();
}
inline ::google::protobuf::int32 LoginRsp::old_deskid() const {
  return old_deskid_;
}
inline void LoginRsp::set_old_deskid(::google::protobuf::int32 value) {
  set_has_old_deskid();
  old_deskid_ = value;
}

// optional string portrait = 7;
inline bool LoginRsp::has_portrait() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginRsp::set_has_portrait() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginRsp::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginRsp::clear_portrait() {
  if (portrait_ != &::google::protobuf::internal::kEmptyString) {
    portrait_->clear();
  }
  clear_has_portrait();
}
inline const ::std::string& LoginRsp::portrait() const {
  return *portrait_;
}
inline void LoginRsp::set_portrait(const ::std::string& value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
}
inline void LoginRsp::set_portrait(const char* value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
}
inline void LoginRsp::set_portrait(const char* value, size_t size) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_portrait() {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  return portrait_;
}
inline ::std::string* LoginRsp::release_portrait() {
  clear_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = portrait_;
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_portrait(::std::string* portrait) {
  if (portrait_ != &::google::protobuf::internal::kEmptyString) {
    delete portrait_;
  }
  if (portrait) {
    set_has_portrait();
    portrait_ = portrait;
  } else {
    clear_has_portrait();
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wx_public_id = 8;
inline bool LoginRsp::has_wx_public_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoginRsp::set_has_wx_public_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoginRsp::clear_has_wx_public_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoginRsp::clear_wx_public_id() {
  if (wx_public_id_ != &::google::protobuf::internal::kEmptyString) {
    wx_public_id_->clear();
  }
  clear_has_wx_public_id();
}
inline const ::std::string& LoginRsp::wx_public_id() const {
  return *wx_public_id_;
}
inline void LoginRsp::set_wx_public_id(const ::std::string& value) {
  set_has_wx_public_id();
  if (wx_public_id_ == &::google::protobuf::internal::kEmptyString) {
    wx_public_id_ = new ::std::string;
  }
  wx_public_id_->assign(value);
}
inline void LoginRsp::set_wx_public_id(const char* value) {
  set_has_wx_public_id();
  if (wx_public_id_ == &::google::protobuf::internal::kEmptyString) {
    wx_public_id_ = new ::std::string;
  }
  wx_public_id_->assign(value);
}
inline void LoginRsp::set_wx_public_id(const char* value, size_t size) {
  set_has_wx_public_id();
  if (wx_public_id_ == &::google::protobuf::internal::kEmptyString) {
    wx_public_id_ = new ::std::string;
  }
  wx_public_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_wx_public_id() {
  set_has_wx_public_id();
  if (wx_public_id_ == &::google::protobuf::internal::kEmptyString) {
    wx_public_id_ = new ::std::string;
  }
  return wx_public_id_;
}
inline ::std::string* LoginRsp::release_wx_public_id() {
  clear_has_wx_public_id();
  if (wx_public_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wx_public_id_;
    wx_public_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_wx_public_id(::std::string* wx_public_id) {
  if (wx_public_id_ != &::google::protobuf::internal::kEmptyString) {
    delete wx_public_id_;
  }
  if (wx_public_id) {
    set_has_wx_public_id();
    wx_public_id_ = wx_public_id;
  } else {
    clear_has_wx_public_id();
    wx_public_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wx_agent_id = 9;
inline bool LoginRsp::has_wx_agent_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LoginRsp::set_has_wx_agent_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LoginRsp::clear_has_wx_agent_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LoginRsp::clear_wx_agent_id() {
  if (wx_agent_id_ != &::google::protobuf::internal::kEmptyString) {
    wx_agent_id_->clear();
  }
  clear_has_wx_agent_id();
}
inline const ::std::string& LoginRsp::wx_agent_id() const {
  return *wx_agent_id_;
}
inline void LoginRsp::set_wx_agent_id(const ::std::string& value) {
  set_has_wx_agent_id();
  if (wx_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    wx_agent_id_ = new ::std::string;
  }
  wx_agent_id_->assign(value);
}
inline void LoginRsp::set_wx_agent_id(const char* value) {
  set_has_wx_agent_id();
  if (wx_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    wx_agent_id_ = new ::std::string;
  }
  wx_agent_id_->assign(value);
}
inline void LoginRsp::set_wx_agent_id(const char* value, size_t size) {
  set_has_wx_agent_id();
  if (wx_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    wx_agent_id_ = new ::std::string;
  }
  wx_agent_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_wx_agent_id() {
  set_has_wx_agent_id();
  if (wx_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    wx_agent_id_ = new ::std::string;
  }
  return wx_agent_id_;
}
inline ::std::string* LoginRsp::release_wx_agent_id() {
  clear_has_wx_agent_id();
  if (wx_agent_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wx_agent_id_;
    wx_agent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_wx_agent_id(::std::string* wx_agent_id) {
  if (wx_agent_id_ != &::google::protobuf::internal::kEmptyString) {
    delete wx_agent_id_;
  }
  if (wx_agent_id) {
    set_has_wx_agent_id();
    wx_agent_id_ = wx_agent_id;
  } else {
    clear_has_wx_agent_id();
    wx_agent_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 10;
inline bool LoginRsp::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LoginRsp::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LoginRsp::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LoginRsp::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& LoginRsp::ip() const {
  return *ip_;
}
inline void LoginRsp::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LoginRsp::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LoginRsp::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* LoginRsp::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 room_card = 11;
inline bool LoginRsp::has_room_card() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LoginRsp::set_has_room_card() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LoginRsp::clear_has_room_card() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LoginRsp::clear_room_card() {
  room_card_ = 0;
  clear_has_room_card();
}
inline ::google::protobuf::int32 LoginRsp::room_card() const {
  return room_card_;
}
inline void LoginRsp::set_room_card(::google::protobuf::int32 value) {
  set_has_room_card();
  room_card_ = value;
}

// optional int32 ret = 12;
inline bool LoginRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LoginRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LoginRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LoginRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 LoginRsp::ret() const {
  return ret_;
}
inline void LoginRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional string wy_yunxin_token = 13;
inline bool LoginRsp::has_wy_yunxin_token() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LoginRsp::set_has_wy_yunxin_token() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LoginRsp::clear_has_wy_yunxin_token() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LoginRsp::clear_wy_yunxin_token() {
  if (wy_yunxin_token_ != &::google::protobuf::internal::kEmptyString) {
    wy_yunxin_token_->clear();
  }
  clear_has_wy_yunxin_token();
}
inline const ::std::string& LoginRsp::wy_yunxin_token() const {
  return *wy_yunxin_token_;
}
inline void LoginRsp::set_wy_yunxin_token(const ::std::string& value) {
  set_has_wy_yunxin_token();
  if (wy_yunxin_token_ == &::google::protobuf::internal::kEmptyString) {
    wy_yunxin_token_ = new ::std::string;
  }
  wy_yunxin_token_->assign(value);
}
inline void LoginRsp::set_wy_yunxin_token(const char* value) {
  set_has_wy_yunxin_token();
  if (wy_yunxin_token_ == &::google::protobuf::internal::kEmptyString) {
    wy_yunxin_token_ = new ::std::string;
  }
  wy_yunxin_token_->assign(value);
}
inline void LoginRsp::set_wy_yunxin_token(const char* value, size_t size) {
  set_has_wy_yunxin_token();
  if (wy_yunxin_token_ == &::google::protobuf::internal::kEmptyString) {
    wy_yunxin_token_ = new ::std::string;
  }
  wy_yunxin_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_wy_yunxin_token() {
  set_has_wy_yunxin_token();
  if (wy_yunxin_token_ == &::google::protobuf::internal::kEmptyString) {
    wy_yunxin_token_ = new ::std::string;
  }
  return wy_yunxin_token_;
}
inline ::std::string* LoginRsp::release_wy_yunxin_token() {
  clear_has_wy_yunxin_token();
  if (wy_yunxin_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wy_yunxin_token_;
    wy_yunxin_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_wy_yunxin_token(::std::string* wy_yunxin_token) {
  if (wy_yunxin_token_ != &::google::protobuf::internal::kEmptyString) {
    delete wy_yunxin_token_;
  }
  if (wy_yunxin_token) {
    set_has_wy_yunxin_token();
    wy_yunxin_token_ = wy_yunxin_token;
  } else {
    clear_has_wy_yunxin_token();
    wy_yunxin_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hall_billband = 14;
inline bool LoginRsp::has_hall_billband() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LoginRsp::set_has_hall_billband() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LoginRsp::clear_has_hall_billband() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LoginRsp::clear_hall_billband() {
  if (hall_billband_ != &::google::protobuf::internal::kEmptyString) {
    hall_billband_->clear();
  }
  clear_has_hall_billband();
}
inline const ::std::string& LoginRsp::hall_billband() const {
  return *hall_billband_;
}
inline void LoginRsp::set_hall_billband(const ::std::string& value) {
  set_has_hall_billband();
  if (hall_billband_ == &::google::protobuf::internal::kEmptyString) {
    hall_billband_ = new ::std::string;
  }
  hall_billband_->assign(value);
}
inline void LoginRsp::set_hall_billband(const char* value) {
  set_has_hall_billband();
  if (hall_billband_ == &::google::protobuf::internal::kEmptyString) {
    hall_billband_ = new ::std::string;
  }
  hall_billband_->assign(value);
}
inline void LoginRsp::set_hall_billband(const char* value, size_t size) {
  set_has_hall_billband();
  if (hall_billband_ == &::google::protobuf::internal::kEmptyString) {
    hall_billband_ = new ::std::string;
  }
  hall_billband_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRsp::mutable_hall_billband() {
  set_has_hall_billband();
  if (hall_billband_ == &::google::protobuf::internal::kEmptyString) {
    hall_billband_ = new ::std::string;
  }
  return hall_billband_;
}
inline ::std::string* LoginRsp::release_hall_billband() {
  clear_has_hall_billband();
  if (hall_billband_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hall_billband_;
    hall_billband_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRsp::set_allocated_hall_billband(::std::string* hall_billband) {
  if (hall_billband_ != &::google::protobuf::internal::kEmptyString) {
    delete hall_billband_;
  }
  if (hall_billband) {
    set_has_hall_billband();
    hall_billband_ = hall_billband;
  } else {
    clear_has_hall_billband();
    hall_billband_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExtraDeskTypeInfo

// optional bool hongzhong = 1;
inline bool ExtraDeskTypeInfo::has_hongzhong() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtraDeskTypeInfo::set_has_hongzhong() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtraDeskTypeInfo::clear_has_hongzhong() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtraDeskTypeInfo::clear_hongzhong() {
  hongzhong_ = false;
  clear_has_hongzhong();
}
inline bool ExtraDeskTypeInfo::hongzhong() const {
  return hongzhong_;
}
inline void ExtraDeskTypeInfo::set_hongzhong(bool value) {
  set_has_hongzhong();
  hongzhong_ = value;
}

// optional bool qidui = 2;
inline bool ExtraDeskTypeInfo::has_qidui() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtraDeskTypeInfo::set_has_qidui() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtraDeskTypeInfo::clear_has_qidui() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtraDeskTypeInfo::clear_qidui() {
  qidui_ = false;
  clear_has_qidui();
}
inline bool ExtraDeskTypeInfo::qidui() const {
  return qidui_;
}
inline void ExtraDeskTypeInfo::set_qidui(bool value) {
  set_has_qidui();
  qidui_ = value;
}

// optional int32 zhuaniao = 3;
inline bool ExtraDeskTypeInfo::has_zhuaniao() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExtraDeskTypeInfo::set_has_zhuaniao() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExtraDeskTypeInfo::clear_has_zhuaniao() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExtraDeskTypeInfo::clear_zhuaniao() {
  zhuaniao_ = 0;
  clear_has_zhuaniao();
}
inline ::google::protobuf::int32 ExtraDeskTypeInfo::zhuaniao() const {
  return zhuaniao_;
}
inline void ExtraDeskTypeInfo::set_zhuaniao(::google::protobuf::int32 value) {
  set_has_zhuaniao();
  zhuaniao_ = value;
}

// optional int32 piaofen = 4;
inline bool ExtraDeskTypeInfo::has_piaofen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExtraDeskTypeInfo::set_has_piaofen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExtraDeskTypeInfo::clear_has_piaofen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExtraDeskTypeInfo::clear_piaofen() {
  piaofen_ = 0;
  clear_has_piaofen();
}
inline ::google::protobuf::int32 ExtraDeskTypeInfo::piaofen() const {
  return piaofen_;
}
inline void ExtraDeskTypeInfo::set_piaofen(::google::protobuf::int32 value) {
  set_has_piaofen();
  piaofen_ = value;
}

// optional bool shanghuo = 5;
inline bool ExtraDeskTypeInfo::has_shanghuo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtraDeskTypeInfo::set_has_shanghuo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExtraDeskTypeInfo::clear_has_shanghuo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExtraDeskTypeInfo::clear_shanghuo() {
  shanghuo_ = false;
  clear_has_shanghuo();
}
inline bool ExtraDeskTypeInfo::shanghuo() const {
  return shanghuo_;
}
inline void ExtraDeskTypeInfo::set_shanghuo(bool value) {
  set_has_shanghuo();
  shanghuo_ = value;
}

// -------------------------------------------------------------------

// GameEnterDeskReq

// optional int32 dst_desk_id = 1;
inline bool GameEnterDeskReq::has_dst_desk_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEnterDeskReq::set_has_dst_desk_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEnterDeskReq::clear_has_dst_desk_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEnterDeskReq::clear_dst_desk_id() {
  dst_desk_id_ = 0;
  clear_has_dst_desk_id();
}
inline ::google::protobuf::int32 GameEnterDeskReq::dst_desk_id() const {
  return dst_desk_id_;
}
inline void GameEnterDeskReq::set_dst_desk_id(::google::protobuf::int32 value) {
  set_has_dst_desk_id();
  dst_desk_id_ = value;
}

// optional int32 new_desk = 2;
inline bool GameEnterDeskReq::has_new_desk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameEnterDeskReq::set_has_new_desk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameEnterDeskReq::clear_has_new_desk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameEnterDeskReq::clear_new_desk() {
  new_desk_ = 0;
  clear_has_new_desk();
}
inline ::google::protobuf::int32 GameEnterDeskReq::new_desk() const {
  return new_desk_;
}
inline void GameEnterDeskReq::set_new_desk(::google::protobuf::int32 value) {
  set_has_new_desk();
  new_desk_ = value;
}

// optional int32 reconnect = 3;
inline bool GameEnterDeskReq::has_reconnect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameEnterDeskReq::set_has_reconnect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameEnterDeskReq::clear_has_reconnect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameEnterDeskReq::clear_reconnect() {
  reconnect_ = 0;
  clear_has_reconnect();
}
inline ::google::protobuf::int32 GameEnterDeskReq::reconnect() const {
  return reconnect_;
}
inline void GameEnterDeskReq::set_reconnect(::google::protobuf::int32 value) {
  set_has_reconnect();
  reconnect_ = value;
}

// optional int32 card_num = 4;
inline bool GameEnterDeskReq::has_card_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEnterDeskReq::set_has_card_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEnterDeskReq::clear_has_card_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEnterDeskReq::clear_card_num() {
  card_num_ = 0;
  clear_has_card_num();
}
inline ::google::protobuf::int32 GameEnterDeskReq::card_num() const {
  return card_num_;
}
inline void GameEnterDeskReq::set_card_num(::google::protobuf::int32 value) {
  set_has_card_num();
  card_num_ = value;
}

// optional int32 desk_type = 5;
inline bool GameEnterDeskReq::has_desk_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEnterDeskReq::set_has_desk_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEnterDeskReq::clear_has_desk_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEnterDeskReq::clear_desk_type() {
  desk_type_ = 0;
  clear_has_desk_type();
}
inline ::google::protobuf::int32 GameEnterDeskReq::desk_type() const {
  return desk_type_;
}
inline void GameEnterDeskReq::set_desk_type(::google::protobuf::int32 value) {
  set_has_desk_type();
  desk_type_ = value;
}

// optional int32 seat_limit = 6;
inline bool GameEnterDeskReq::has_seat_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameEnterDeskReq::set_has_seat_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameEnterDeskReq::clear_has_seat_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameEnterDeskReq::clear_seat_limit() {
  seat_limit_ = 0;
  clear_has_seat_limit();
}
inline ::google::protobuf::int32 GameEnterDeskReq::seat_limit() const {
  return seat_limit_;
}
inline void GameEnterDeskReq::set_seat_limit(::google::protobuf::int32 value) {
  set_has_seat_limit();
  seat_limit_ = value;
}

// optional int32 win_type = 7;
inline bool GameEnterDeskReq::has_win_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameEnterDeskReq::set_has_win_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameEnterDeskReq::clear_has_win_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameEnterDeskReq::clear_win_type() {
  win_type_ = 0;
  clear_has_win_type();
}
inline ::google::protobuf::int32 GameEnterDeskReq::win_type() const {
  return win_type_;
}
inline void GameEnterDeskReq::set_win_type(::google::protobuf::int32 value) {
  set_has_win_type();
  win_type_ = value;
}

// optional .ExtraDeskTypeInfo extra_type = 8;
inline bool GameEnterDeskReq::has_extra_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameEnterDeskReq::set_has_extra_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameEnterDeskReq::clear_has_extra_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameEnterDeskReq::clear_extra_type() {
  if (extra_type_ != NULL) extra_type_->::ExtraDeskTypeInfo::Clear();
  clear_has_extra_type();
}
inline const ::ExtraDeskTypeInfo& GameEnterDeskReq::extra_type() const {
  return extra_type_ != NULL ? *extra_type_ : *default_instance_->extra_type_;
}
inline ::ExtraDeskTypeInfo* GameEnterDeskReq::mutable_extra_type() {
  set_has_extra_type();
  if (extra_type_ == NULL) extra_type_ = new ::ExtraDeskTypeInfo;
  return extra_type_;
}
inline ::ExtraDeskTypeInfo* GameEnterDeskReq::release_extra_type() {
  clear_has_extra_type();
  ::ExtraDeskTypeInfo* temp = extra_type_;
  extra_type_ = NULL;
  return temp;
}
inline void GameEnterDeskReq::set_allocated_extra_type(::ExtraDeskTypeInfo* extra_type) {
  delete extra_type_;
  extra_type_ = extra_type;
  if (extra_type) {
    set_has_extra_type();
  } else {
    clear_has_extra_type();
  }
}

// -------------------------------------------------------------------

// GameEnterDeskRsp

// optional int32 ret = 1;
inline bool GameEnterDeskRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameEnterDeskRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameEnterDeskRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameEnterDeskRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GameEnterDeskRsp::ret() const {
  return ret_;
}
inline void GameEnterDeskRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// UserRoomCardChange

// optional int32 room_card = 1;
inline bool UserRoomCardChange::has_room_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRoomCardChange::set_has_room_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRoomCardChange::clear_has_room_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRoomCardChange::clear_room_card() {
  room_card_ = 0;
  clear_has_room_card();
}
inline ::google::protobuf::int32 UserRoomCardChange::room_card() const {
  return room_card_;
}
inline void UserRoomCardChange::set_room_card(::google::protobuf::int32 value) {
  set_has_room_card();
  room_card_ = value;
}

// optional int32 change_reason = 2;
inline bool UserRoomCardChange::has_change_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRoomCardChange::set_has_change_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRoomCardChange::clear_has_change_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRoomCardChange::clear_change_reason() {
  change_reason_ = 0;
  clear_has_change_reason();
}
inline ::google::protobuf::int32 UserRoomCardChange::change_reason() const {
  return change_reason_;
}
inline void UserRoomCardChange::set_change_reason(::google::protobuf::int32 value) {
  set_has_change_reason();
  change_reason_ = value;
}

// -------------------------------------------------------------------

// GameUserInfo

// optional int32 status = 1;
inline bool GameUserInfo::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameUserInfo::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameUserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameUserInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GameUserInfo::status() const {
  return status_;
}
inline void GameUserInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 uin = 2;
inline bool GameUserInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameUserInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameUserInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameUserInfo::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 GameUserInfo::uin() const {
  return uin_;
}
inline void GameUserInfo::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional string nick = 3;
inline bool GameUserInfo::has_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameUserInfo::set_has_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameUserInfo::clear_has_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameUserInfo::clear_nick() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& GameUserInfo::nick() const {
  return *nick_;
}
inline void GameUserInfo::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void GameUserInfo::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void GameUserInfo::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  return nick_;
}
inline ::std::string* GameUserInfo::release_nick() {
  clear_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 seatid = 4;
inline bool GameUserInfo::has_seatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameUserInfo::set_has_seatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameUserInfo::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameUserInfo::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 GameUserInfo::seatid() const {
  return seatid_;
}
inline void GameUserInfo::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 sex = 5;
inline bool GameUserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameUserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameUserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameUserInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 GameUserInfo::sex() const {
  return sex_;
}
inline void GameUserInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string portrait = 6;
inline bool GameUserInfo::has_portrait() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameUserInfo::set_has_portrait() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameUserInfo::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameUserInfo::clear_portrait() {
  if (portrait_ != &::google::protobuf::internal::kEmptyString) {
    portrait_->clear();
  }
  clear_has_portrait();
}
inline const ::std::string& GameUserInfo::portrait() const {
  return *portrait_;
}
inline void GameUserInfo::set_portrait(const ::std::string& value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
}
inline void GameUserInfo::set_portrait(const char* value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
}
inline void GameUserInfo::set_portrait(const char* value, size_t size) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_portrait() {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  return portrait_;
}
inline ::std::string* GameUserInfo::release_portrait() {
  clear_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = portrait_;
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_portrait(::std::string* portrait) {
  if (portrait_ != &::google::protobuf::internal::kEmptyString) {
    delete portrait_;
  }
  if (portrait) {
    set_has_portrait();
    portrait_ = portrait;
  } else {
    clear_has_portrait();
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 is_master = 7;
inline bool GameUserInfo::has_is_master() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameUserInfo::set_has_is_master() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameUserInfo::clear_has_is_master() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameUserInfo::clear_is_master() {
  is_master_ = 0;
  clear_has_is_master();
}
inline ::google::protobuf::int32 GameUserInfo::is_master() const {
  return is_master_;
}
inline void GameUserInfo::set_is_master(::google::protobuf::int32 value) {
  set_has_is_master();
  is_master_ = value;
}

// optional int32 piaofen = 8;
inline bool GameUserInfo::has_piaofen() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameUserInfo::set_has_piaofen() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameUserInfo::clear_has_piaofen() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameUserInfo::clear_piaofen() {
  piaofen_ = 0;
  clear_has_piaofen();
}
inline ::google::protobuf::int32 GameUserInfo::piaofen() const {
  return piaofen_;
}
inline void GameUserInfo::set_piaofen(::google::protobuf::int32 value) {
  set_has_piaofen();
  piaofen_ = value;
}

// optional int32 shanghuo = 9;
inline bool GameUserInfo::has_shanghuo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameUserInfo::set_has_shanghuo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameUserInfo::clear_has_shanghuo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameUserInfo::clear_shanghuo() {
  shanghuo_ = 0;
  clear_has_shanghuo();
}
inline ::google::protobuf::int32 GameUserInfo::shanghuo() const {
  return shanghuo_;
}
inline void GameUserInfo::set_shanghuo(::google::protobuf::int32 value) {
  set_has_shanghuo();
  shanghuo_ = value;
}

// optional string ip = 10;
inline bool GameUserInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameUserInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameUserInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameUserInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GameUserInfo::ip() const {
  return *ip_;
}
inline void GameUserInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GameUserInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GameUserInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameUserInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GameUserInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameUserInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserCommonCards

// optional int32 uin = 1;
inline bool UserCommonCards::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserCommonCards::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserCommonCards::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserCommonCards::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 UserCommonCards::uin() const {
  return uin_;
}
inline void UserCommonCards::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int32 card_len = 2;
inline bool UserCommonCards::has_card_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserCommonCards::set_has_card_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserCommonCards::clear_has_card_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserCommonCards::clear_card_len() {
  card_len_ = 0;
  clear_has_card_len();
}
inline ::google::protobuf::int32 UserCommonCards::card_len() const {
  return card_len_;
}
inline void UserCommonCards::set_card_len(::google::protobuf::int32 value) {
  set_has_card_len();
  card_len_ = value;
}

// repeated int32 out_cards = 3;
inline int UserCommonCards::out_cards_size() const {
  return out_cards_.size();
}
inline void UserCommonCards::clear_out_cards() {
  out_cards_.Clear();
}
inline ::google::protobuf::int32 UserCommonCards::out_cards(int index) const {
  return out_cards_.Get(index);
}
inline void UserCommonCards::set_out_cards(int index, ::google::protobuf::int32 value) {
  out_cards_.Set(index, value);
}
inline void UserCommonCards::add_out_cards(::google::protobuf::int32 value) {
  out_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserCommonCards::out_cards() const {
  return out_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserCommonCards::mutable_out_cards() {
  return &out_cards_;
}

// repeated int32 discard = 4;
inline int UserCommonCards::discard_size() const {
  return discard_.size();
}
inline void UserCommonCards::clear_discard() {
  discard_.Clear();
}
inline ::google::protobuf::int32 UserCommonCards::discard(int index) const {
  return discard_.Get(index);
}
inline void UserCommonCards::set_discard(int index, ::google::protobuf::int32 value) {
  discard_.Set(index, value);
}
inline void UserCommonCards::add_discard(::google::protobuf::int32 value) {
  discard_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserCommonCards::discard() const {
  return discard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserCommonCards::mutable_discard() {
  return &discard_;
}

// optional int32 seatid = 5;
inline bool UserCommonCards::has_seatid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserCommonCards::set_has_seatid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserCommonCards::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserCommonCards::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 UserCommonCards::seatid() const {
  return seatid_;
}
inline void UserCommonCards::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 status = 6;
inline bool UserCommonCards::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserCommonCards::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserCommonCards::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserCommonCards::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 UserCommonCards::status() const {
  return status_;
}
inline void UserCommonCards::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// repeated int32 op_list = 7;
inline int UserCommonCards::op_list_size() const {
  return op_list_.size();
}
inline void UserCommonCards::clear_op_list() {
  op_list_.Clear();
}
inline ::google::protobuf::int32 UserCommonCards::op_list(int index) const {
  return op_list_.Get(index);
}
inline void UserCommonCards::set_op_list(int index, ::google::protobuf::int32 value) {
  op_list_.Set(index, value);
}
inline void UserCommonCards::add_op_list(::google::protobuf::int32 value) {
  op_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserCommonCards::op_list() const {
  return op_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserCommonCards::mutable_op_list() {
  return &op_list_;
}

// optional int32 chips = 8;
inline bool UserCommonCards::has_chips() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserCommonCards::set_has_chips() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserCommonCards::clear_has_chips() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserCommonCards::clear_chips() {
  chips_ = 0;
  clear_has_chips();
}
inline ::google::protobuf::int32 UserCommonCards::chips() const {
  return chips_;
}
inline void UserCommonCards::set_chips(::google::protobuf::int32 value) {
  set_has_chips();
  chips_ = value;
}

// -------------------------------------------------------------------

// MyOption

// optional bool op_chi = 1;
inline bool MyOption::has_op_chi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyOption::set_has_op_chi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyOption::clear_has_op_chi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyOption::clear_op_chi() {
  op_chi_ = false;
  clear_has_op_chi();
}
inline bool MyOption::op_chi() const {
  return op_chi_;
}
inline void MyOption::set_op_chi(bool value) {
  set_has_op_chi();
  op_chi_ = value;
}

// optional bool op_peng = 2;
inline bool MyOption::has_op_peng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyOption::set_has_op_peng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyOption::clear_has_op_peng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyOption::clear_op_peng() {
  op_peng_ = false;
  clear_has_op_peng();
}
inline bool MyOption::op_peng() const {
  return op_peng_;
}
inline void MyOption::set_op_peng(bool value) {
  set_has_op_peng();
  op_peng_ = value;
}

// optional bool op_gang = 3;
inline bool MyOption::has_op_gang() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MyOption::set_has_op_gang() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MyOption::clear_has_op_gang() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MyOption::clear_op_gang() {
  op_gang_ = false;
  clear_has_op_gang();
}
inline bool MyOption::op_gang() const {
  return op_gang_;
}
inline void MyOption::set_op_gang(bool value) {
  set_has_op_gang();
  op_gang_ = value;
}

// optional bool op_hu = 4;
inline bool MyOption::has_op_hu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MyOption::set_has_op_hu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MyOption::clear_has_op_hu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MyOption::clear_op_hu() {
  op_hu_ = false;
  clear_has_op_hu();
}
inline bool MyOption::op_hu() const {
  return op_hu_;
}
inline void MyOption::set_op_hu(bool value) {
  set_has_op_hu();
  op_hu_ = value;
}

// optional bool need_wait = 5;
inline bool MyOption::has_need_wait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MyOption::set_has_need_wait() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MyOption::clear_has_need_wait() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MyOption::clear_need_wait() {
  need_wait_ = false;
  clear_has_need_wait();
}
inline bool MyOption::need_wait() const {
  return need_wait_;
}
inline void MyOption::set_need_wait(bool value) {
  set_has_need_wait();
  need_wait_ = value;
}

// repeated int32 chi_cards = 6;
inline int MyOption::chi_cards_size() const {
  return chi_cards_.size();
}
inline void MyOption::clear_chi_cards() {
  chi_cards_.Clear();
}
inline ::google::protobuf::int32 MyOption::chi_cards(int index) const {
  return chi_cards_.Get(index);
}
inline void MyOption::set_chi_cards(int index, ::google::protobuf::int32 value) {
  chi_cards_.Set(index, value);
}
inline void MyOption::add_chi_cards(::google::protobuf::int32 value) {
  chi_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MyOption::chi_cards() const {
  return chi_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MyOption::mutable_chi_cards() {
  return &chi_cards_;
}

// -------------------------------------------------------------------

// EvtDeskUserEnter

// optional int32 deskid = 1;
inline bool EvtDeskUserEnter::has_deskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvtDeskUserEnter::set_has_deskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvtDeskUserEnter::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvtDeskUserEnter::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::deskid() const {
  return deskid_;
}
inline void EvtDeskUserEnter::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
}

// optional int32 op_uin = 2;
inline bool EvtDeskUserEnter::has_op_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EvtDeskUserEnter::set_has_op_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EvtDeskUserEnter::clear_has_op_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EvtDeskUserEnter::clear_op_uin() {
  op_uin_ = 0;
  clear_has_op_uin();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::op_uin() const {
  return op_uin_;
}
inline void EvtDeskUserEnter::set_op_uin(::google::protobuf::int32 value) {
  set_has_op_uin();
  op_uin_ = value;
}

// optional int32 status = 3;
inline bool EvtDeskUserEnter::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EvtDeskUserEnter::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EvtDeskUserEnter::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EvtDeskUserEnter::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::status() const {
  return status_;
}
inline void EvtDeskUserEnter::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 max_round = 4;
inline bool EvtDeskUserEnter::has_max_round() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EvtDeskUserEnter::set_has_max_round() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EvtDeskUserEnter::clear_has_max_round() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EvtDeskUserEnter::clear_max_round() {
  max_round_ = 0;
  clear_has_max_round();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::max_round() const {
  return max_round_;
}
inline void EvtDeskUserEnter::set_max_round(::google::protobuf::int32 value) {
  set_has_max_round();
  max_round_ = value;
}

// repeated .GameUserInfo users = 5;
inline int EvtDeskUserEnter::users_size() const {
  return users_.size();
}
inline void EvtDeskUserEnter::clear_users() {
  users_.Clear();
}
inline const ::GameUserInfo& EvtDeskUserEnter::users(int index) const {
  return users_.Get(index);
}
inline ::GameUserInfo* EvtDeskUserEnter::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::GameUserInfo* EvtDeskUserEnter::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameUserInfo >&
EvtDeskUserEnter::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::GameUserInfo >*
EvtDeskUserEnter::mutable_users() {
  return &users_;
}

// optional int32 next_uin = 6;
inline bool EvtDeskUserEnter::has_next_uin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EvtDeskUserEnter::set_has_next_uin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EvtDeskUserEnter::clear_has_next_uin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EvtDeskUserEnter::clear_next_uin() {
  next_uin_ = 0;
  clear_has_next_uin();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::next_uin() const {
  return next_uin_;
}
inline void EvtDeskUserEnter::set_next_uin(::google::protobuf::int32 value) {
  set_has_next_uin();
  next_uin_ = value;
}

// optional int32 dealer_seatid = 7;
inline bool EvtDeskUserEnter::has_dealer_seatid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EvtDeskUserEnter::set_has_dealer_seatid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EvtDeskUserEnter::clear_has_dealer_seatid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EvtDeskUserEnter::clear_dealer_seatid() {
  dealer_seatid_ = 0;
  clear_has_dealer_seatid();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::dealer_seatid() const {
  return dealer_seatid_;
}
inline void EvtDeskUserEnter::set_dealer_seatid(::google::protobuf::int32 value) {
  set_has_dealer_seatid();
  dealer_seatid_ = value;
}

// repeated int32 cards = 8 [packed = true];
inline int EvtDeskUserEnter::cards_size() const {
  return cards_.size();
}
inline void EvtDeskUserEnter::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::cards(int index) const {
  return cards_.Get(index);
}
inline void EvtDeskUserEnter::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void EvtDeskUserEnter::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EvtDeskUserEnter::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EvtDeskUserEnter::mutable_cards() {
  return &cards_;
}

// repeated .UserCommonCards in_users = 9;
inline int EvtDeskUserEnter::in_users_size() const {
  return in_users_.size();
}
inline void EvtDeskUserEnter::clear_in_users() {
  in_users_.Clear();
}
inline const ::UserCommonCards& EvtDeskUserEnter::in_users(int index) const {
  return in_users_.Get(index);
}
inline ::UserCommonCards* EvtDeskUserEnter::mutable_in_users(int index) {
  return in_users_.Mutable(index);
}
inline ::UserCommonCards* EvtDeskUserEnter::add_in_users() {
  return in_users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserCommonCards >&
EvtDeskUserEnter::in_users() const {
  return in_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserCommonCards >*
EvtDeskUserEnter::mutable_in_users() {
  return &in_users_;
}

// optional int32 share_cards_len = 10;
inline bool EvtDeskUserEnter::has_share_cards_len() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EvtDeskUserEnter::set_has_share_cards_len() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EvtDeskUserEnter::clear_has_share_cards_len() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EvtDeskUserEnter::clear_share_cards_len() {
  share_cards_len_ = 0;
  clear_has_share_cards_len();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::share_cards_len() const {
  return share_cards_len_;
}
inline void EvtDeskUserEnter::set_share_cards_len(::google::protobuf::int32 value) {
  set_has_share_cards_len();
  share_cards_len_ = value;
}

// optional int32 game_round = 11;
inline bool EvtDeskUserEnter::has_game_round() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EvtDeskUserEnter::set_has_game_round() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EvtDeskUserEnter::clear_has_game_round() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EvtDeskUserEnter::clear_game_round() {
  game_round_ = 0;
  clear_has_game_round();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::game_round() const {
  return game_round_;
}
inline void EvtDeskUserEnter::set_game_round(::google::protobuf::int32 value) {
  set_has_game_round();
  game_round_ = value;
}

// optional .MyOption my_option = 12;
inline bool EvtDeskUserEnter::has_my_option() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EvtDeskUserEnter::set_has_my_option() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EvtDeskUserEnter::clear_has_my_option() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EvtDeskUserEnter::clear_my_option() {
  if (my_option_ != NULL) my_option_->::MyOption::Clear();
  clear_has_my_option();
}
inline const ::MyOption& EvtDeskUserEnter::my_option() const {
  return my_option_ != NULL ? *my_option_ : *default_instance_->my_option_;
}
inline ::MyOption* EvtDeskUserEnter::mutable_my_option() {
  set_has_my_option();
  if (my_option_ == NULL) my_option_ = new ::MyOption;
  return my_option_;
}
inline ::MyOption* EvtDeskUserEnter::release_my_option() {
  clear_has_my_option();
  ::MyOption* temp = my_option_;
  my_option_ = NULL;
  return temp;
}
inline void EvtDeskUserEnter::set_allocated_my_option(::MyOption* my_option) {
  delete my_option_;
  my_option_ = my_option;
  if (my_option) {
    set_has_my_option();
  } else {
    clear_has_my_option();
  }
}

// optional int32 recv_card_uin = 13;
inline bool EvtDeskUserEnter::has_recv_card_uin() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EvtDeskUserEnter::set_has_recv_card_uin() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EvtDeskUserEnter::clear_has_recv_card_uin() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EvtDeskUserEnter::clear_recv_card_uin() {
  recv_card_uin_ = 0;
  clear_has_recv_card_uin();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::recv_card_uin() const {
  return recv_card_uin_;
}
inline void EvtDeskUserEnter::set_recv_card_uin(::google::protobuf::int32 value) {
  set_has_recv_card_uin();
  recv_card_uin_ = value;
}

// optional int32 desk_remain_round = 14;
inline bool EvtDeskUserEnter::has_desk_remain_round() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EvtDeskUserEnter::set_has_desk_remain_round() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EvtDeskUserEnter::clear_has_desk_remain_round() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EvtDeskUserEnter::clear_desk_remain_round() {
  desk_remain_round_ = 0;
  clear_has_desk_remain_round();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::desk_remain_round() const {
  return desk_remain_round_;
}
inline void EvtDeskUserEnter::set_desk_remain_round(::google::protobuf::int32 value) {
  set_has_desk_remain_round();
  desk_remain_round_ = value;
}

// optional int32 seat_num = 15;
inline bool EvtDeskUserEnter::has_seat_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EvtDeskUserEnter::set_has_seat_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EvtDeskUserEnter::clear_has_seat_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EvtDeskUserEnter::clear_seat_num() {
  seat_num_ = 0;
  clear_has_seat_num();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::seat_num() const {
  return seat_num_;
}
inline void EvtDeskUserEnter::set_seat_num(::google::protobuf::int32 value) {
  set_has_seat_num();
  seat_num_ = value;
}

// optional int32 remain_time = 16;
inline bool EvtDeskUserEnter::has_remain_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EvtDeskUserEnter::set_has_remain_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EvtDeskUserEnter::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EvtDeskUserEnter::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::remain_time() const {
  return remain_time_;
}
inline void EvtDeskUserEnter::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// optional int32 apply_uin = 17;
inline bool EvtDeskUserEnter::has_apply_uin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EvtDeskUserEnter::set_has_apply_uin() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EvtDeskUserEnter::clear_has_apply_uin() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EvtDeskUserEnter::clear_apply_uin() {
  apply_uin_ = 0;
  clear_has_apply_uin();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::apply_uin() const {
  return apply_uin_;
}
inline void EvtDeskUserEnter::set_apply_uin(::google::protobuf::int32 value) {
  set_has_apply_uin();
  apply_uin_ = value;
}

// optional int32 win_type = 18;
inline bool EvtDeskUserEnter::has_win_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EvtDeskUserEnter::set_has_win_type() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EvtDeskUserEnter::clear_has_win_type() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EvtDeskUserEnter::clear_win_type() {
  win_type_ = 0;
  clear_has_win_type();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::win_type() const {
  return win_type_;
}
inline void EvtDeskUserEnter::set_win_type(::google::protobuf::int32 value) {
  set_has_win_type();
  win_type_ = value;
}

// optional .ExtraDeskTypeInfo extra_type = 19;
inline bool EvtDeskUserEnter::has_extra_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EvtDeskUserEnter::set_has_extra_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EvtDeskUserEnter::clear_has_extra_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EvtDeskUserEnter::clear_extra_type() {
  if (extra_type_ != NULL) extra_type_->::ExtraDeskTypeInfo::Clear();
  clear_has_extra_type();
}
inline const ::ExtraDeskTypeInfo& EvtDeskUserEnter::extra_type() const {
  return extra_type_ != NULL ? *extra_type_ : *default_instance_->extra_type_;
}
inline ::ExtraDeskTypeInfo* EvtDeskUserEnter::mutable_extra_type() {
  set_has_extra_type();
  if (extra_type_ == NULL) extra_type_ = new ::ExtraDeskTypeInfo;
  return extra_type_;
}
inline ::ExtraDeskTypeInfo* EvtDeskUserEnter::release_extra_type() {
  clear_has_extra_type();
  ::ExtraDeskTypeInfo* temp = extra_type_;
  extra_type_ = NULL;
  return temp;
}
inline void EvtDeskUserEnter::set_allocated_extra_type(::ExtraDeskTypeInfo* extra_type) {
  delete extra_type_;
  extra_type_ = extra_type;
  if (extra_type) {
    set_has_extra_type();
  } else {
    clear_has_extra_type();
  }
}

// optional int32 type = 20;
inline bool EvtDeskUserEnter::has_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EvtDeskUserEnter::set_has_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EvtDeskUserEnter::clear_has_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EvtDeskUserEnter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::type() const {
  return type_;
}
inline void EvtDeskUserEnter::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 pre_remain_time = 21;
inline bool EvtDeskUserEnter::has_pre_remain_time() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EvtDeskUserEnter::set_has_pre_remain_time() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EvtDeskUserEnter::clear_has_pre_remain_time() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EvtDeskUserEnter::clear_pre_remain_time() {
  pre_remain_time_ = 0;
  clear_has_pre_remain_time();
}
inline ::google::protobuf::int32 EvtDeskUserEnter::pre_remain_time() const {
  return pre_remain_time_;
}
inline void EvtDeskUserEnter::set_pre_remain_time(::google::protobuf::int32 value) {
  set_has_pre_remain_time();
  pre_remain_time_ = value;
}

// -------------------------------------------------------------------

// GameExitDeskReq

// -------------------------------------------------------------------

// GameExitDeskRsp

// optional int32 ret = 1;
inline bool GameExitDeskRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameExitDeskRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameExitDeskRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameExitDeskRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GameExitDeskRsp::ret() const {
  return ret_;
}
inline void GameExitDeskRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// DeskPlayInfo

// repeated int32 cards = 1 [packed = true];
inline int DeskPlayInfo::cards_size() const {
  return cards_.size();
}
inline void DeskPlayInfo::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 DeskPlayInfo::cards(int index) const {
  return cards_.Get(index);
}
inline void DeskPlayInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void DeskPlayInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DeskPlayInfo::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DeskPlayInfo::mutable_cards() {
  return &cards_;
}

// optional int32 card_len = 2;
inline bool DeskPlayInfo::has_card_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeskPlayInfo::set_has_card_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeskPlayInfo::clear_has_card_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeskPlayInfo::clear_card_len() {
  card_len_ = 0;
  clear_has_card_len();
}
inline ::google::protobuf::int32 DeskPlayInfo::card_len() const {
  return card_len_;
}
inline void DeskPlayInfo::set_card_len(::google::protobuf::int32 value) {
  set_has_card_len();
  card_len_ = value;
}

// repeated int32 out_cards = 3 [packed = true];
inline int DeskPlayInfo::out_cards_size() const {
  return out_cards_.size();
}
inline void DeskPlayInfo::clear_out_cards() {
  out_cards_.Clear();
}
inline ::google::protobuf::int32 DeskPlayInfo::out_cards(int index) const {
  return out_cards_.Get(index);
}
inline void DeskPlayInfo::set_out_cards(int index, ::google::protobuf::int32 value) {
  out_cards_.Set(index, value);
}
inline void DeskPlayInfo::add_out_cards(::google::protobuf::int32 value) {
  out_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DeskPlayInfo::out_cards() const {
  return out_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DeskPlayInfo::mutable_out_cards() {
  return &out_cards_;
}

// optional int32 out_card_len = 4;
inline bool DeskPlayInfo::has_out_card_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeskPlayInfo::set_has_out_card_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeskPlayInfo::clear_has_out_card_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeskPlayInfo::clear_out_card_len() {
  out_card_len_ = 0;
  clear_has_out_card_len();
}
inline ::google::protobuf::int32 DeskPlayInfo::out_card_len() const {
  return out_card_len_;
}
inline void DeskPlayInfo::set_out_card_len(::google::protobuf::int32 value) {
  set_has_out_card_len();
  out_card_len_ = value;
}

// repeated int32 discards = 5 [packed = true];
inline int DeskPlayInfo::discards_size() const {
  return discards_.size();
}
inline void DeskPlayInfo::clear_discards() {
  discards_.Clear();
}
inline ::google::protobuf::int32 DeskPlayInfo::discards(int index) const {
  return discards_.Get(index);
}
inline void DeskPlayInfo::set_discards(int index, ::google::protobuf::int32 value) {
  discards_.Set(index, value);
}
inline void DeskPlayInfo::add_discards(::google::protobuf::int32 value) {
  discards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DeskPlayInfo::discards() const {
  return discards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DeskPlayInfo::mutable_discards() {
  return &discards_;
}

// optional int32 status = 6;
inline bool DeskPlayInfo::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeskPlayInfo::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeskPlayInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeskPlayInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 DeskPlayInfo::status() const {
  return status_;
}
inline void DeskPlayInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 chips = 7;
inline bool DeskPlayInfo::has_chips() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeskPlayInfo::set_has_chips() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeskPlayInfo::clear_has_chips() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeskPlayInfo::clear_chips() {
  chips_ = 0;
  clear_has_chips();
}
inline ::google::protobuf::int32 DeskPlayInfo::chips() const {
  return chips_;
}
inline void DeskPlayInfo::set_chips(::google::protobuf::int32 value) {
  set_has_chips();
  chips_ = value;
}

// optional int32 round_win_chips = 8;
inline bool DeskPlayInfo::has_round_win_chips() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeskPlayInfo::set_has_round_win_chips() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeskPlayInfo::clear_has_round_win_chips() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeskPlayInfo::clear_round_win_chips() {
  round_win_chips_ = 0;
  clear_has_round_win_chips();
}
inline ::google::protobuf::int32 DeskPlayInfo::round_win_chips() const {
  return round_win_chips_;
}
inline void DeskPlayInfo::set_round_win_chips(::google::protobuf::int32 value) {
  set_has_round_win_chips();
  round_win_chips_ = value;
}

// optional int32 total_chi_num = 9;
inline bool DeskPlayInfo::has_total_chi_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeskPlayInfo::set_has_total_chi_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeskPlayInfo::clear_has_total_chi_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeskPlayInfo::clear_total_chi_num() {
  total_chi_num_ = 0;
  clear_has_total_chi_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::total_chi_num() const {
  return total_chi_num_;
}
inline void DeskPlayInfo::set_total_chi_num(::google::protobuf::int32 value) {
  set_has_total_chi_num();
  total_chi_num_ = value;
}

// optional int32 total_peng_num = 10;
inline bool DeskPlayInfo::has_total_peng_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeskPlayInfo::set_has_total_peng_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DeskPlayInfo::clear_has_total_peng_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DeskPlayInfo::clear_total_peng_num() {
  total_peng_num_ = 0;
  clear_has_total_peng_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::total_peng_num() const {
  return total_peng_num_;
}
inline void DeskPlayInfo::set_total_peng_num(::google::protobuf::int32 value) {
  set_has_total_peng_num();
  total_peng_num_ = value;
}

// optional int32 total_gang_num = 11;
inline bool DeskPlayInfo::has_total_gang_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DeskPlayInfo::set_has_total_gang_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DeskPlayInfo::clear_has_total_gang_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DeskPlayInfo::clear_total_gang_num() {
  total_gang_num_ = 0;
  clear_has_total_gang_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::total_gang_num() const {
  return total_gang_num_;
}
inline void DeskPlayInfo::set_total_gang_num(::google::protobuf::int32 value) {
  set_has_total_gang_num();
  total_gang_num_ = value;
}

// optional int32 total_ganged_num = 12;
inline bool DeskPlayInfo::has_total_ganged_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DeskPlayInfo::set_has_total_ganged_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DeskPlayInfo::clear_has_total_ganged_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DeskPlayInfo::clear_total_ganged_num() {
  total_ganged_num_ = 0;
  clear_has_total_ganged_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::total_ganged_num() const {
  return total_ganged_num_;
}
inline void DeskPlayInfo::set_total_ganged_num(::google::protobuf::int32 value) {
  set_has_total_ganged_num();
  total_ganged_num_ = value;
}

// optional int32 total_hu_num = 13;
inline bool DeskPlayInfo::has_total_hu_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DeskPlayInfo::set_has_total_hu_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DeskPlayInfo::clear_has_total_hu_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DeskPlayInfo::clear_total_hu_num() {
  total_hu_num_ = 0;
  clear_has_total_hu_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::total_hu_num() const {
  return total_hu_num_;
}
inline void DeskPlayInfo::set_total_hu_num(::google::protobuf::int32 value) {
  set_has_total_hu_num();
  total_hu_num_ = value;
}

// optional int32 total_hued_num = 14;
inline bool DeskPlayInfo::has_total_hued_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DeskPlayInfo::set_has_total_hued_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DeskPlayInfo::clear_has_total_hued_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DeskPlayInfo::clear_total_hued_num() {
  total_hued_num_ = 0;
  clear_has_total_hued_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::total_hued_num() const {
  return total_hued_num_;
}
inline void DeskPlayInfo::set_total_hued_num(::google::protobuf::int32 value) {
  set_has_total_hued_num();
  total_hued_num_ = value;
}

// optional int32 round_chi_num = 15;
inline bool DeskPlayInfo::has_round_chi_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DeskPlayInfo::set_has_round_chi_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DeskPlayInfo::clear_has_round_chi_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DeskPlayInfo::clear_round_chi_num() {
  round_chi_num_ = 0;
  clear_has_round_chi_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::round_chi_num() const {
  return round_chi_num_;
}
inline void DeskPlayInfo::set_round_chi_num(::google::protobuf::int32 value) {
  set_has_round_chi_num();
  round_chi_num_ = value;
}

// optional int32 round_peng_num = 16;
inline bool DeskPlayInfo::has_round_peng_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DeskPlayInfo::set_has_round_peng_num() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DeskPlayInfo::clear_has_round_peng_num() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DeskPlayInfo::clear_round_peng_num() {
  round_peng_num_ = 0;
  clear_has_round_peng_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::round_peng_num() const {
  return round_peng_num_;
}
inline void DeskPlayInfo::set_round_peng_num(::google::protobuf::int32 value) {
  set_has_round_peng_num();
  round_peng_num_ = value;
}

// optional int32 round_gang_num = 17;
inline bool DeskPlayInfo::has_round_gang_num() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DeskPlayInfo::set_has_round_gang_num() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DeskPlayInfo::clear_has_round_gang_num() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DeskPlayInfo::clear_round_gang_num() {
  round_gang_num_ = 0;
  clear_has_round_gang_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::round_gang_num() const {
  return round_gang_num_;
}
inline void DeskPlayInfo::set_round_gang_num(::google::protobuf::int32 value) {
  set_has_round_gang_num();
  round_gang_num_ = value;
}

// optional int32 round_ganged_num = 18;
inline bool DeskPlayInfo::has_round_ganged_num() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DeskPlayInfo::set_has_round_ganged_num() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DeskPlayInfo::clear_has_round_ganged_num() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DeskPlayInfo::clear_round_ganged_num() {
  round_ganged_num_ = 0;
  clear_has_round_ganged_num();
}
inline ::google::protobuf::int32 DeskPlayInfo::round_ganged_num() const {
  return round_ganged_num_;
}
inline void DeskPlayInfo::set_round_ganged_num(::google::protobuf::int32 value) {
  set_has_round_ganged_num();
  round_ganged_num_ = value;
}

// optional int32 role = 19;
inline bool DeskPlayInfo::has_role() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DeskPlayInfo::set_has_role() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DeskPlayInfo::clear_has_role() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DeskPlayInfo::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::google::protobuf::int32 DeskPlayInfo::role() const {
  return role_;
}
inline void DeskPlayInfo::set_role(::google::protobuf::int32 value) {
  set_has_role();
  role_ = value;
}

// -------------------------------------------------------------------

// EvtUserExit

// optional int32 deskid = 1;
inline bool EvtUserExit::has_deskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvtUserExit::set_has_deskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvtUserExit::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvtUserExit::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 EvtUserExit::deskid() const {
  return deskid_;
}
inline void EvtUserExit::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
}

// optional int32 dealer = 2;
inline bool EvtUserExit::has_dealer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EvtUserExit::set_has_dealer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EvtUserExit::clear_has_dealer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EvtUserExit::clear_dealer() {
  dealer_ = 0;
  clear_has_dealer();
}
inline ::google::protobuf::int32 EvtUserExit::dealer() const {
  return dealer_;
}
inline void EvtUserExit::set_dealer(::google::protobuf::int32 value) {
  set_has_dealer();
  dealer_ = value;
}

// optional int32 op_uin = 3;
inline bool EvtUserExit::has_op_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EvtUserExit::set_has_op_uin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EvtUserExit::clear_has_op_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EvtUserExit::clear_op_uin() {
  op_uin_ = 0;
  clear_has_op_uin();
}
inline ::google::protobuf::int32 EvtUserExit::op_uin() const {
  return op_uin_;
}
inline void EvtUserExit::set_op_uin(::google::protobuf::int32 value) {
  set_has_op_uin();
  op_uin_ = value;
}

// optional int32 op_status = 4;
inline bool EvtUserExit::has_op_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EvtUserExit::set_has_op_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EvtUserExit::clear_has_op_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EvtUserExit::clear_op_status() {
  op_status_ = 0;
  clear_has_op_status();
}
inline ::google::protobuf::int32 EvtUserExit::op_status() const {
  return op_status_;
}
inline void EvtUserExit::set_op_status(::google::protobuf::int32 value) {
  set_has_op_status();
  op_status_ = value;
}

// optional int32 next_uin = 5;
inline bool EvtUserExit::has_next_uin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EvtUserExit::set_has_next_uin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EvtUserExit::clear_has_next_uin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EvtUserExit::clear_next_uin() {
  next_uin_ = 0;
  clear_has_next_uin();
}
inline ::google::protobuf::int32 EvtUserExit::next_uin() const {
  return next_uin_;
}
inline void EvtUserExit::set_next_uin(::google::protobuf::int32 value) {
  set_has_next_uin();
  next_uin_ = value;
}

// optional .DeskPlayInfo play_info = 6;
inline bool EvtUserExit::has_play_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EvtUserExit::set_has_play_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EvtUserExit::clear_has_play_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EvtUserExit::clear_play_info() {
  if (play_info_ != NULL) play_info_->::DeskPlayInfo::Clear();
  clear_has_play_info();
}
inline const ::DeskPlayInfo& EvtUserExit::play_info() const {
  return play_info_ != NULL ? *play_info_ : *default_instance_->play_info_;
}
inline ::DeskPlayInfo* EvtUserExit::mutable_play_info() {
  set_has_play_info();
  if (play_info_ == NULL) play_info_ = new ::DeskPlayInfo;
  return play_info_;
}
inline ::DeskPlayInfo* EvtUserExit::release_play_info() {
  clear_has_play_info();
  ::DeskPlayInfo* temp = play_info_;
  play_info_ = NULL;
  return temp;
}
inline void EvtUserExit::set_allocated_play_info(::DeskPlayInfo* play_info) {
  delete play_info_;
  play_info_ = play_info;
  if (play_info) {
    set_has_play_info();
  } else {
    clear_has_play_info();
  }
}

// optional int64 player_op_past_time = 7;
inline bool EvtUserExit::has_player_op_past_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EvtUserExit::set_has_player_op_past_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EvtUserExit::clear_has_player_op_past_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EvtUserExit::clear_player_op_past_time() {
  player_op_past_time_ = GOOGLE_LONGLONG(0);
  clear_has_player_op_past_time();
}
inline ::google::protobuf::int64 EvtUserExit::player_op_past_time() const {
  return player_op_past_time_;
}
inline void EvtUserExit::set_player_op_past_time(::google::protobuf::int64 value) {
  set_has_player_op_past_time();
  player_op_past_time_ = value;
}

// optional int32 dealer_seatid = 8;
inline bool EvtUserExit::has_dealer_seatid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EvtUserExit::set_has_dealer_seatid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EvtUserExit::clear_has_dealer_seatid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EvtUserExit::clear_dealer_seatid() {
  dealer_seatid_ = 0;
  clear_has_dealer_seatid();
}
inline ::google::protobuf::int32 EvtUserExit::dealer_seatid() const {
  return dealer_seatid_;
}
inline void EvtUserExit::set_dealer_seatid(::google::protobuf::int32 value) {
  set_has_dealer_seatid();
  dealer_seatid_ = value;
}

// optional int32 reason = 9;
inline bool EvtUserExit::has_reason() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EvtUserExit::set_has_reason() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EvtUserExit::clear_has_reason() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EvtUserExit::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::google::protobuf::int32 EvtUserExit::reason() const {
  return reason_;
}
inline void EvtUserExit::set_reason(::google::protobuf::int32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// ClientNotifyStartGameReq

// -------------------------------------------------------------------

// ClientNotifyStartGameRsp

// optional int32 ret = 1;
inline bool ClientNotifyStartGameRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientNotifyStartGameRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientNotifyStartGameRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientNotifyStartGameRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ClientNotifyStartGameRsp::ret() const {
  return ret_;
}
inline void ClientNotifyStartGameRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GameSendCardReq

// optional int32 card = 1;
inline bool GameSendCardReq::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSendCardReq::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSendCardReq::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSendCardReq::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 GameSendCardReq::card() const {
  return card_;
}
inline void GameSendCardReq::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// -------------------------------------------------------------------

// GameSendCardRsp

// optional int32 ret = 1;
inline bool GameSendCardRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSendCardRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSendCardRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSendCardRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GameSendCardRsp::ret() const {
  return ret_;
}
inline void GameSendCardRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GameOptionChiReq

// optional int32 index = 1;
inline bool GameOptionChiReq::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOptionChiReq::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOptionChiReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOptionChiReq::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GameOptionChiReq::index() const {
  return index_;
}
inline void GameOptionChiReq::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// GameOptionChiRsp

// optional int32 ret = 1;
inline bool GameOptionChiRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOptionChiRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOptionChiRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOptionChiRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GameOptionChiRsp::ret() const {
  return ret_;
}
inline void GameOptionChiRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GameOptionPengReq

// -------------------------------------------------------------------

// GameOptionPengRsp

// optional int32 ret = 1;
inline bool GameOptionPengRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOptionPengRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOptionPengRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOptionPengRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GameOptionPengRsp::ret() const {
  return ret_;
}
inline void GameOptionPengRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GameOptionGangReq

// -------------------------------------------------------------------

// GameOptionGangRsp

// optional int32 ret = 1;
inline bool GameOptionGangRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOptionGangRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOptionGangRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOptionGangRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GameOptionGangRsp::ret() const {
  return ret_;
}
inline void GameOptionGangRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GameOptionHuReq

// -------------------------------------------------------------------

// GameOptionHuRsp

// optional int32 ret = 1;
inline bool GameOptionHuRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOptionHuRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOptionHuRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOptionHuRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GameOptionHuRsp::ret() const {
  return ret_;
}
inline void GameOptionHuRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GameOptionPassReq

// -------------------------------------------------------------------

// GameOptionPassRsp

// optional int32 ret = 1;
inline bool GameOptionPassRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOptionPassRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOptionPassRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOptionPassRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GameOptionPassRsp::ret() const {
  return ret_;
}
inline void GameOptionPassRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GamePlayerReadyReq

// optional int32 status = 1;
inline bool GamePlayerReadyReq::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePlayerReadyReq::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePlayerReadyReq::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePlayerReadyReq::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GamePlayerReadyReq::status() const {
  return status_;
}
inline void GamePlayerReadyReq::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 piaofen = 2;
inline bool GamePlayerReadyReq::has_piaofen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePlayerReadyReq::set_has_piaofen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePlayerReadyReq::clear_has_piaofen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePlayerReadyReq::clear_piaofen() {
  piaofen_ = 0;
  clear_has_piaofen();
}
inline ::google::protobuf::int32 GamePlayerReadyReq::piaofen() const {
  return piaofen_;
}
inline void GamePlayerReadyReq::set_piaofen(::google::protobuf::int32 value) {
  set_has_piaofen();
  piaofen_ = value;
}

// -------------------------------------------------------------------

// UserStatus

// optional int32 uin = 1;
inline bool UserStatus::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStatus::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStatus::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserStatus::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 UserStatus::uin() const {
  return uin_;
}
inline void UserStatus::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int32 status = 2;
inline bool UserStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 UserStatus::status() const {
  return status_;
}
inline void UserStatus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 piaofen = 3;
inline bool UserStatus::has_piaofen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserStatus::set_has_piaofen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserStatus::clear_has_piaofen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserStatus::clear_piaofen() {
  piaofen_ = 0;
  clear_has_piaofen();
}
inline ::google::protobuf::int32 UserStatus::piaofen() const {
  return piaofen_;
}
inline void UserStatus::set_piaofen(::google::protobuf::int32 value) {
  set_has_piaofen();
  piaofen_ = value;
}

// optional int32 shanghuo = 4;
inline bool UserStatus::has_shanghuo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserStatus::set_has_shanghuo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserStatus::clear_has_shanghuo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserStatus::clear_shanghuo() {
  shanghuo_ = 0;
  clear_has_shanghuo();
}
inline ::google::protobuf::int32 UserStatus::shanghuo() const {
  return shanghuo_;
}
inline void UserStatus::set_shanghuo(::google::protobuf::int32 value) {
  set_has_shanghuo();
  shanghuo_ = value;
}

// -------------------------------------------------------------------

// GamePlayerReadyEvt

// repeated .UserStatus users = 1;
inline int GamePlayerReadyEvt::users_size() const {
  return users_.size();
}
inline void GamePlayerReadyEvt::clear_users() {
  users_.Clear();
}
inline const ::UserStatus& GamePlayerReadyEvt::users(int index) const {
  return users_.Get(index);
}
inline ::UserStatus* GamePlayerReadyEvt::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::UserStatus* GamePlayerReadyEvt::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserStatus >&
GamePlayerReadyEvt::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserStatus >*
GamePlayerReadyEvt::mutable_users() {
  return &users_;
}

// optional int32 pre_remain_time = 2;
inline bool GamePlayerReadyEvt::has_pre_remain_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePlayerReadyEvt::set_has_pre_remain_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePlayerReadyEvt::clear_has_pre_remain_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePlayerReadyEvt::clear_pre_remain_time() {
  pre_remain_time_ = 0;
  clear_has_pre_remain_time();
}
inline ::google::protobuf::int32 GamePlayerReadyEvt::pre_remain_time() const {
  return pre_remain_time_;
}
inline void GamePlayerReadyEvt::set_pre_remain_time(::google::protobuf::int32 value) {
  set_has_pre_remain_time();
  pre_remain_time_ = value;
}

// optional int32 deskid = 3;
inline bool GamePlayerReadyEvt::has_deskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamePlayerReadyEvt::set_has_deskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamePlayerReadyEvt::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamePlayerReadyEvt::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 GamePlayerReadyEvt::deskid() const {
  return deskid_;
}
inline void GamePlayerReadyEvt::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
}

// -------------------------------------------------------------------

// GameOptionGangNotFirstReq

// optional int32 gang_card = 1;
inline bool GameOptionGangNotFirstReq::has_gang_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOptionGangNotFirstReq::set_has_gang_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOptionGangNotFirstReq::clear_has_gang_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOptionGangNotFirstReq::clear_gang_card() {
  gang_card_ = 0;
  clear_has_gang_card();
}
inline ::google::protobuf::int32 GameOptionGangNotFirstReq::gang_card() const {
  return gang_card_;
}
inline void GameOptionGangNotFirstReq::set_gang_card(::google::protobuf::int32 value) {
  set_has_gang_card();
  gang_card_ = value;
}

// -------------------------------------------------------------------

// GameOptionGangNotFirstRsp

// optional int32 ret = 1;
inline bool GameOptionGangNotFirstRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOptionGangNotFirstRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOptionGangNotFirstRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOptionGangNotFirstRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GameOptionGangNotFirstRsp::ret() const {
  return ret_;
}
inline void GameOptionGangNotFirstRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ApplyDeleteReq

// -------------------------------------------------------------------

// ApplyDeleteEvt

// optional int32 apply_uin = 1;
inline bool ApplyDeleteEvt::has_apply_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplyDeleteEvt::set_has_apply_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplyDeleteEvt::clear_has_apply_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplyDeleteEvt::clear_apply_uin() {
  apply_uin_ = 0;
  clear_has_apply_uin();
}
inline ::google::protobuf::int32 ApplyDeleteEvt::apply_uin() const {
  return apply_uin_;
}
inline void ApplyDeleteEvt::set_apply_uin(::google::protobuf::int32 value) {
  set_has_apply_uin();
  apply_uin_ = value;
}

// optional int32 game_status = 2;
inline bool ApplyDeleteEvt::has_game_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplyDeleteEvt::set_has_game_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApplyDeleteEvt::clear_has_game_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApplyDeleteEvt::clear_game_status() {
  game_status_ = 0;
  clear_has_game_status();
}
inline ::google::protobuf::int32 ApplyDeleteEvt::game_status() const {
  return game_status_;
}
inline void ApplyDeleteEvt::set_game_status(::google::protobuf::int32 value) {
  set_has_game_status();
  game_status_ = value;
}

// optional int32 remain_time = 3;
inline bool ApplyDeleteEvt::has_remain_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApplyDeleteEvt::set_has_remain_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ApplyDeleteEvt::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ApplyDeleteEvt::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 ApplyDeleteEvt::remain_time() const {
  return remain_time_;
}
inline void ApplyDeleteEvt::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// optional int32 status = 4;
inline bool ApplyDeleteEvt::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApplyDeleteEvt::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ApplyDeleteEvt::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ApplyDeleteEvt::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ApplyDeleteEvt::status() const {
  return status_;
}
inline void ApplyDeleteEvt::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 deskid = 5;
inline bool ApplyDeleteEvt::has_deskid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ApplyDeleteEvt::set_has_deskid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ApplyDeleteEvt::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ApplyDeleteEvt::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 ApplyDeleteEvt::deskid() const {
  return deskid_;
}
inline void ApplyDeleteEvt::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
}

// -------------------------------------------------------------------

// UserOption

// optional int32 uin = 1;
inline bool UserOption::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserOption::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserOption::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserOption::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 UserOption::uin() const {
  return uin_;
}
inline void UserOption::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int32 type = 2;
inline bool UserOption::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserOption::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserOption::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserOption::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserOption::type() const {
  return type_;
}
inline void UserOption::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// GameInfoEvt

// optional int32 deskid = 1;
inline bool GameInfoEvt::has_deskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInfoEvt::set_has_deskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInfoEvt::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInfoEvt::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 GameInfoEvt::deskid() const {
  return deskid_;
}
inline void GameInfoEvt::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
}

// optional int32 next_uin = 2;
inline bool GameInfoEvt::has_next_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInfoEvt::set_has_next_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInfoEvt::clear_has_next_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInfoEvt::clear_next_uin() {
  next_uin_ = 0;
  clear_has_next_uin();
}
inline ::google::protobuf::int32 GameInfoEvt::next_uin() const {
  return next_uin_;
}
inline void GameInfoEvt::set_next_uin(::google::protobuf::int32 value) {
  set_has_next_uin();
  next_uin_ = value;
}

// optional int32 max_round = 3;
inline bool GameInfoEvt::has_max_round() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInfoEvt::set_has_max_round() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInfoEvt::clear_has_max_round() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInfoEvt::clear_max_round() {
  max_round_ = 0;
  clear_has_max_round();
}
inline ::google::protobuf::int32 GameInfoEvt::max_round() const {
  return max_round_;
}
inline void GameInfoEvt::set_max_round(::google::protobuf::int32 value) {
  set_has_max_round();
  max_round_ = value;
}

// repeated int32 cards = 4 [packed = true];
inline int GameInfoEvt::cards_size() const {
  return cards_.size();
}
inline void GameInfoEvt::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 GameInfoEvt::cards(int index) const {
  return cards_.Get(index);
}
inline void GameInfoEvt::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void GameInfoEvt::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameInfoEvt::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameInfoEvt::mutable_cards() {
  return &cards_;
}

// optional int32 dealer_seatid = 5;
inline bool GameInfoEvt::has_dealer_seatid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameInfoEvt::set_has_dealer_seatid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameInfoEvt::clear_has_dealer_seatid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameInfoEvt::clear_dealer_seatid() {
  dealer_seatid_ = 0;
  clear_has_dealer_seatid();
}
inline ::google::protobuf::int32 GameInfoEvt::dealer_seatid() const {
  return dealer_seatid_;
}
inline void GameInfoEvt::set_dealer_seatid(::google::protobuf::int32 value) {
  set_has_dealer_seatid();
  dealer_seatid_ = value;
}

// repeated .UserCommonCards users = 6;
inline int GameInfoEvt::users_size() const {
  return users_.size();
}
inline void GameInfoEvt::clear_users() {
  users_.Clear();
}
inline const ::UserCommonCards& GameInfoEvt::users(int index) const {
  return users_.Get(index);
}
inline ::UserCommonCards* GameInfoEvt::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::UserCommonCards* GameInfoEvt::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserCommonCards >&
GameInfoEvt::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserCommonCards >*
GameInfoEvt::mutable_users() {
  return &users_;
}

// optional .UserOption op_user = 7;
inline bool GameInfoEvt::has_op_user() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameInfoEvt::set_has_op_user() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameInfoEvt::clear_has_op_user() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameInfoEvt::clear_op_user() {
  if (op_user_ != NULL) op_user_->::UserOption::Clear();
  clear_has_op_user();
}
inline const ::UserOption& GameInfoEvt::op_user() const {
  return op_user_ != NULL ? *op_user_ : *default_instance_->op_user_;
}
inline ::UserOption* GameInfoEvt::mutable_op_user() {
  set_has_op_user();
  if (op_user_ == NULL) op_user_ = new ::UserOption;
  return op_user_;
}
inline ::UserOption* GameInfoEvt::release_op_user() {
  clear_has_op_user();
  ::UserOption* temp = op_user_;
  op_user_ = NULL;
  return temp;
}
inline void GameInfoEvt::set_allocated_op_user(::UserOption* op_user) {
  delete op_user_;
  op_user_ = op_user;
  if (op_user) {
    set_has_op_user();
  } else {
    clear_has_op_user();
  }
}

// optional int32 share_cards_len = 8;
inline bool GameInfoEvt::has_share_cards_len() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameInfoEvt::set_has_share_cards_len() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameInfoEvt::clear_has_share_cards_len() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameInfoEvt::clear_share_cards_len() {
  share_cards_len_ = 0;
  clear_has_share_cards_len();
}
inline ::google::protobuf::int32 GameInfoEvt::share_cards_len() const {
  return share_cards_len_;
}
inline void GameInfoEvt::set_share_cards_len(::google::protobuf::int32 value) {
  set_has_share_cards_len();
  share_cards_len_ = value;
}

// optional int32 game_round = 9;
inline bool GameInfoEvt::has_game_round() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameInfoEvt::set_has_game_round() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameInfoEvt::clear_has_game_round() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameInfoEvt::clear_game_round() {
  game_round_ = 0;
  clear_has_game_round();
}
inline ::google::protobuf::int32 GameInfoEvt::game_round() const {
  return game_round_;
}
inline void GameInfoEvt::set_game_round(::google::protobuf::int32 value) {
  set_has_game_round();
  game_round_ = value;
}

// optional .MyOption my_option = 10;
inline bool GameInfoEvt::has_my_option() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameInfoEvt::set_has_my_option() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameInfoEvt::clear_has_my_option() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameInfoEvt::clear_my_option() {
  if (my_option_ != NULL) my_option_->::MyOption::Clear();
  clear_has_my_option();
}
inline const ::MyOption& GameInfoEvt::my_option() const {
  return my_option_ != NULL ? *my_option_ : *default_instance_->my_option_;
}
inline ::MyOption* GameInfoEvt::mutable_my_option() {
  set_has_my_option();
  if (my_option_ == NULL) my_option_ = new ::MyOption;
  return my_option_;
}
inline ::MyOption* GameInfoEvt::release_my_option() {
  clear_has_my_option();
  ::MyOption* temp = my_option_;
  my_option_ = NULL;
  return temp;
}
inline void GameInfoEvt::set_allocated_my_option(::MyOption* my_option) {
  delete my_option_;
  my_option_ = my_option;
  if (my_option) {
    set_has_my_option();
  } else {
    clear_has_my_option();
  }
}

// optional int32 status = 11;
inline bool GameInfoEvt::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameInfoEvt::set_has_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameInfoEvt::clear_has_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameInfoEvt::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GameInfoEvt::status() const {
  return status_;
}
inline void GameInfoEvt::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 recv_card_uin = 12;
inline bool GameInfoEvt::has_recv_card_uin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameInfoEvt::set_has_recv_card_uin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameInfoEvt::clear_has_recv_card_uin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameInfoEvt::clear_recv_card_uin() {
  recv_card_uin_ = 0;
  clear_has_recv_card_uin();
}
inline ::google::protobuf::int32 GameInfoEvt::recv_card_uin() const {
  return recv_card_uin_;
}
inline void GameInfoEvt::set_recv_card_uin(::google::protobuf::int32 value) {
  set_has_recv_card_uin();
  recv_card_uin_ = value;
}

// optional int32 desk_remain_round = 13;
inline bool GameInfoEvt::has_desk_remain_round() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GameInfoEvt::set_has_desk_remain_round() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GameInfoEvt::clear_has_desk_remain_round() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GameInfoEvt::clear_desk_remain_round() {
  desk_remain_round_ = 0;
  clear_has_desk_remain_round();
}
inline ::google::protobuf::int32 GameInfoEvt::desk_remain_round() const {
  return desk_remain_round_;
}
inline void GameInfoEvt::set_desk_remain_round(::google::protobuf::int32 value) {
  set_has_desk_remain_round();
  desk_remain_round_ = value;
}

// optional int32 seat_num = 14;
inline bool GameInfoEvt::has_seat_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GameInfoEvt::set_has_seat_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GameInfoEvt::clear_has_seat_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GameInfoEvt::clear_seat_num() {
  seat_num_ = 0;
  clear_has_seat_num();
}
inline ::google::protobuf::int32 GameInfoEvt::seat_num() const {
  return seat_num_;
}
inline void GameInfoEvt::set_seat_num(::google::protobuf::int32 value) {
  set_has_seat_num();
  seat_num_ = value;
}

// -------------------------------------------------------------------

// GameOverResultInfo

// optional int32 uin = 1;
inline bool GameOverResultInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameOverResultInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameOverResultInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameOverResultInfo::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 GameOverResultInfo::uin() const {
  return uin_;
}
inline void GameOverResultInfo::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int64 chips = 2;
inline bool GameOverResultInfo::has_chips() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameOverResultInfo::set_has_chips() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameOverResultInfo::clear_has_chips() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameOverResultInfo::clear_chips() {
  chips_ = GOOGLE_LONGLONG(0);
  clear_has_chips();
}
inline ::google::protobuf::int64 GameOverResultInfo::chips() const {
  return chips_;
}
inline void GameOverResultInfo::set_chips(::google::protobuf::int64 value) {
  set_has_chips();
  chips_ = value;
}

// optional int32 round_chi_num = 3;
inline bool GameOverResultInfo::has_round_chi_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameOverResultInfo::set_has_round_chi_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameOverResultInfo::clear_has_round_chi_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameOverResultInfo::clear_round_chi_num() {
  round_chi_num_ = 0;
  clear_has_round_chi_num();
}
inline ::google::protobuf::int32 GameOverResultInfo::round_chi_num() const {
  return round_chi_num_;
}
inline void GameOverResultInfo::set_round_chi_num(::google::protobuf::int32 value) {
  set_has_round_chi_num();
  round_chi_num_ = value;
}

// optional int32 round_peng_num = 4;
inline bool GameOverResultInfo::has_round_peng_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameOverResultInfo::set_has_round_peng_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameOverResultInfo::clear_has_round_peng_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameOverResultInfo::clear_round_peng_num() {
  round_peng_num_ = 0;
  clear_has_round_peng_num();
}
inline ::google::protobuf::int32 GameOverResultInfo::round_peng_num() const {
  return round_peng_num_;
}
inline void GameOverResultInfo::set_round_peng_num(::google::protobuf::int32 value) {
  set_has_round_peng_num();
  round_peng_num_ = value;
}

// repeated int32 round_gang_list = 5;
inline int GameOverResultInfo::round_gang_list_size() const {
  return round_gang_list_.size();
}
inline void GameOverResultInfo::clear_round_gang_list() {
  round_gang_list_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::round_gang_list(int index) const {
  return round_gang_list_.Get(index);
}
inline void GameOverResultInfo::set_round_gang_list(int index, ::google::protobuf::int32 value) {
  round_gang_list_.Set(index, value);
}
inline void GameOverResultInfo::add_round_gang_list(::google::protobuf::int32 value) {
  round_gang_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::round_gang_list() const {
  return round_gang_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_round_gang_list() {
  return &round_gang_list_;
}

// repeated int32 round_hu_list = 6;
inline int GameOverResultInfo::round_hu_list_size() const {
  return round_hu_list_.size();
}
inline void GameOverResultInfo::clear_round_hu_list() {
  round_hu_list_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::round_hu_list(int index) const {
  return round_hu_list_.Get(index);
}
inline void GameOverResultInfo::set_round_hu_list(int index, ::google::protobuf::int32 value) {
  round_hu_list_.Set(index, value);
}
inline void GameOverResultInfo::add_round_hu_list(::google::protobuf::int32 value) {
  round_hu_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::round_hu_list() const {
  return round_hu_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_round_hu_list() {
  return &round_hu_list_;
}

// repeated int32 round_win_list = 7;
inline int GameOverResultInfo::round_win_list_size() const {
  return round_win_list_.size();
}
inline void GameOverResultInfo::clear_round_win_list() {
  round_win_list_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::round_win_list(int index) const {
  return round_win_list_.Get(index);
}
inline void GameOverResultInfo::set_round_win_list(int index, ::google::protobuf::int32 value) {
  round_win_list_.Set(index, value);
}
inline void GameOverResultInfo::add_round_win_list(::google::protobuf::int32 value) {
  round_win_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::round_win_list() const {
  return round_win_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_round_win_list() {
  return &round_win_list_;
}

// optional int32 total_chi_num = 8;
inline bool GameOverResultInfo::has_total_chi_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameOverResultInfo::set_has_total_chi_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameOverResultInfo::clear_has_total_chi_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameOverResultInfo::clear_total_chi_num() {
  total_chi_num_ = 0;
  clear_has_total_chi_num();
}
inline ::google::protobuf::int32 GameOverResultInfo::total_chi_num() const {
  return total_chi_num_;
}
inline void GameOverResultInfo::set_total_chi_num(::google::protobuf::int32 value) {
  set_has_total_chi_num();
  total_chi_num_ = value;
}

// optional int32 total_peng_num = 9;
inline bool GameOverResultInfo::has_total_peng_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameOverResultInfo::set_has_total_peng_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameOverResultInfo::clear_has_total_peng_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameOverResultInfo::clear_total_peng_num() {
  total_peng_num_ = 0;
  clear_has_total_peng_num();
}
inline ::google::protobuf::int32 GameOverResultInfo::total_peng_num() const {
  return total_peng_num_;
}
inline void GameOverResultInfo::set_total_peng_num(::google::protobuf::int32 value) {
  set_has_total_peng_num();
  total_peng_num_ = value;
}

// repeated int32 total_gang_list = 10;
inline int GameOverResultInfo::total_gang_list_size() const {
  return total_gang_list_.size();
}
inline void GameOverResultInfo::clear_total_gang_list() {
  total_gang_list_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::total_gang_list(int index) const {
  return total_gang_list_.Get(index);
}
inline void GameOverResultInfo::set_total_gang_list(int index, ::google::protobuf::int32 value) {
  total_gang_list_.Set(index, value);
}
inline void GameOverResultInfo::add_total_gang_list(::google::protobuf::int32 value) {
  total_gang_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::total_gang_list() const {
  return total_gang_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_total_gang_list() {
  return &total_gang_list_;
}

// repeated int32 total_hu_list = 11;
inline int GameOverResultInfo::total_hu_list_size() const {
  return total_hu_list_.size();
}
inline void GameOverResultInfo::clear_total_hu_list() {
  total_hu_list_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::total_hu_list(int index) const {
  return total_hu_list_.Get(index);
}
inline void GameOverResultInfo::set_total_hu_list(int index, ::google::protobuf::int32 value) {
  total_hu_list_.Set(index, value);
}
inline void GameOverResultInfo::add_total_hu_list(::google::protobuf::int32 value) {
  total_hu_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::total_hu_list() const {
  return total_hu_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_total_hu_list() {
  return &total_hu_list_;
}

// repeated int32 total_win_list = 12;
inline int GameOverResultInfo::total_win_list_size() const {
  return total_win_list_.size();
}
inline void GameOverResultInfo::clear_total_win_list() {
  total_win_list_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::total_win_list(int index) const {
  return total_win_list_.Get(index);
}
inline void GameOverResultInfo::set_total_win_list(int index, ::google::protobuf::int32 value) {
  total_win_list_.Set(index, value);
}
inline void GameOverResultInfo::add_total_win_list(::google::protobuf::int32 value) {
  total_win_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::total_win_list() const {
  return total_win_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_total_win_list() {
  return &total_win_list_;
}

// optional int32 status = 13;
inline bool GameOverResultInfo::has_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GameOverResultInfo::set_has_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GameOverResultInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GameOverResultInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GameOverResultInfo::status() const {
  return status_;
}
inline void GameOverResultInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 piaofen = 14;
inline bool GameOverResultInfo::has_piaofen() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GameOverResultInfo::set_has_piaofen() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GameOverResultInfo::clear_has_piaofen() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GameOverResultInfo::clear_piaofen() {
  piaofen_ = 0;
  clear_has_piaofen();
}
inline ::google::protobuf::int32 GameOverResultInfo::piaofen() const {
  return piaofen_;
}
inline void GameOverResultInfo::set_piaofen(::google::protobuf::int32 value) {
  set_has_piaofen();
  piaofen_ = value;
}

// optional int32 shanghuo = 15;
inline bool GameOverResultInfo::has_shanghuo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GameOverResultInfo::set_has_shanghuo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GameOverResultInfo::clear_has_shanghuo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GameOverResultInfo::clear_shanghuo() {
  shanghuo_ = 0;
  clear_has_shanghuo();
}
inline ::google::protobuf::int32 GameOverResultInfo::shanghuo() const {
  return shanghuo_;
}
inline void GameOverResultInfo::set_shanghuo(::google::protobuf::int32 value) {
  set_has_shanghuo();
  shanghuo_ = value;
}

// optional int32 bird_num = 16;
inline bool GameOverResultInfo::has_bird_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GameOverResultInfo::set_has_bird_num() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GameOverResultInfo::clear_has_bird_num() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GameOverResultInfo::clear_bird_num() {
  bird_num_ = 0;
  clear_has_bird_num();
}
inline ::google::protobuf::int32 GameOverResultInfo::bird_num() const {
  return bird_num_;
}
inline void GameOverResultInfo::set_bird_num(::google::protobuf::int32 value) {
  set_has_bird_num();
  bird_num_ = value;
}

// repeated int32 cards = 17;
inline int GameOverResultInfo::cards_size() const {
  return cards_.size();
}
inline void GameOverResultInfo::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::cards(int index) const {
  return cards_.Get(index);
}
inline void GameOverResultInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void GameOverResultInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_cards() {
  return &cards_;
}

// repeated int32 out_cards = 18;
inline int GameOverResultInfo::out_cards_size() const {
  return out_cards_.size();
}
inline void GameOverResultInfo::clear_out_cards() {
  out_cards_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::out_cards(int index) const {
  return out_cards_.Get(index);
}
inline void GameOverResultInfo::set_out_cards(int index, ::google::protobuf::int32 value) {
  out_cards_.Set(index, value);
}
inline void GameOverResultInfo::add_out_cards(::google::protobuf::int32 value) {
  out_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::out_cards() const {
  return out_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_out_cards() {
  return &out_cards_;
}

// repeated int32 op_list = 19;
inline int GameOverResultInfo::op_list_size() const {
  return op_list_.size();
}
inline void GameOverResultInfo::clear_op_list() {
  op_list_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::op_list(int index) const {
  return op_list_.Get(index);
}
inline void GameOverResultInfo::set_op_list(int index, ::google::protobuf::int32 value) {
  op_list_.Set(index, value);
}
inline void GameOverResultInfo::add_op_list(::google::protobuf::int32 value) {
  op_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::op_list() const {
  return op_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_op_list() {
  return &op_list_;
}

// optional int32 round_win_chips = 20;
inline bool GameOverResultInfo::has_round_win_chips() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GameOverResultInfo::set_has_round_win_chips() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GameOverResultInfo::clear_has_round_win_chips() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GameOverResultInfo::clear_round_win_chips() {
  round_win_chips_ = 0;
  clear_has_round_win_chips();
}
inline ::google::protobuf::int32 GameOverResultInfo::round_win_chips() const {
  return round_win_chips_;
}
inline void GameOverResultInfo::set_round_win_chips(::google::protobuf::int32 value) {
  set_has_round_win_chips();
  round_win_chips_ = value;
}

// repeated int32 over_chips_details = 21;
inline int GameOverResultInfo::over_chips_details_size() const {
  return over_chips_details_.size();
}
inline void GameOverResultInfo::clear_over_chips_details() {
  over_chips_details_.Clear();
}
inline ::google::protobuf::int32 GameOverResultInfo::over_chips_details(int index) const {
  return over_chips_details_.Get(index);
}
inline void GameOverResultInfo::set_over_chips_details(int index, ::google::protobuf::int32 value) {
  over_chips_details_.Set(index, value);
}
inline void GameOverResultInfo::add_over_chips_details(::google::protobuf::int32 value) {
  over_chips_details_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameOverResultInfo::over_chips_details() const {
  return over_chips_details_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameOverResultInfo::mutable_over_chips_details() {
  return &over_chips_details_;
}

// optional int32 round_win_chips_before = 22;
inline bool GameOverResultInfo::has_round_win_chips_before() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GameOverResultInfo::set_has_round_win_chips_before() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GameOverResultInfo::clear_has_round_win_chips_before() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GameOverResultInfo::clear_round_win_chips_before() {
  round_win_chips_before_ = 0;
  clear_has_round_win_chips_before();
}
inline ::google::protobuf::int32 GameOverResultInfo::round_win_chips_before() const {
  return round_win_chips_before_;
}
inline void GameOverResultInfo::set_round_win_chips_before(::google::protobuf::int32 value) {
  set_has_round_win_chips_before();
  round_win_chips_before_ = value;
}

// -------------------------------------------------------------------

// EvtGameOver

// repeated int32 winners = 1 [packed = true];
inline int EvtGameOver::winners_size() const {
  return winners_.size();
}
inline void EvtGameOver::clear_winners() {
  winners_.Clear();
}
inline ::google::protobuf::int32 EvtGameOver::winners(int index) const {
  return winners_.Get(index);
}
inline void EvtGameOver::set_winners(int index, ::google::protobuf::int32 value) {
  winners_.Set(index, value);
}
inline void EvtGameOver::add_winners(::google::protobuf::int32 value) {
  winners_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EvtGameOver::winners() const {
  return winners_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EvtGameOver::mutable_winners() {
  return &winners_;
}

// repeated .GameOverResultInfo result = 2;
inline int EvtGameOver::result_size() const {
  return result_.size();
}
inline void EvtGameOver::clear_result() {
  result_.Clear();
}
inline const ::GameOverResultInfo& EvtGameOver::result(int index) const {
  return result_.Get(index);
}
inline ::GameOverResultInfo* EvtGameOver::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::GameOverResultInfo* EvtGameOver::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameOverResultInfo >&
EvtGameOver::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::GameOverResultInfo >*
EvtGameOver::mutable_result() {
  return &result_;
}

// optional int32 deskid = 3;
inline bool EvtGameOver::has_deskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EvtGameOver::set_has_deskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EvtGameOver::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EvtGameOver::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 EvtGameOver::deskid() const {
  return deskid_;
}
inline void EvtGameOver::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
}

// optional int32 status = 4;
inline bool EvtGameOver::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EvtGameOver::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EvtGameOver::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EvtGameOver::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 EvtGameOver::status() const {
  return status_;
}
inline void EvtGameOver::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 remain_round_num = 5;
inline bool EvtGameOver::has_remain_round_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EvtGameOver::set_has_remain_round_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EvtGameOver::clear_has_remain_round_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EvtGameOver::clear_remain_round_num() {
  remain_round_num_ = 0;
  clear_has_remain_round_num();
}
inline ::google::protobuf::int32 EvtGameOver::remain_round_num() const {
  return remain_round_num_;
}
inline void EvtGameOver::set_remain_round_num(::google::protobuf::int32 value) {
  set_has_remain_round_num();
  remain_round_num_ = value;
}

// repeated int32 bird_card = 6 [packed = true];
inline int EvtGameOver::bird_card_size() const {
  return bird_card_.size();
}
inline void EvtGameOver::clear_bird_card() {
  bird_card_.Clear();
}
inline ::google::protobuf::int32 EvtGameOver::bird_card(int index) const {
  return bird_card_.Get(index);
}
inline void EvtGameOver::set_bird_card(int index, ::google::protobuf::int32 value) {
  bird_card_.Set(index, value);
}
inline void EvtGameOver::add_bird_card(::google::protobuf::int32 value) {
  bird_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EvtGameOver::bird_card() const {
  return bird_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EvtGameOver::mutable_bird_card() {
  return &bird_card_;
}

// optional int32 type = 7;
inline bool EvtGameOver::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EvtGameOver::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EvtGameOver::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EvtGameOver::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 EvtGameOver::type() const {
  return type_;
}
inline void EvtGameOver::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 seat_limit = 8;
inline bool EvtGameOver::has_seat_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EvtGameOver::set_has_seat_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EvtGameOver::clear_has_seat_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EvtGameOver::clear_seat_limit() {
  seat_limit_ = 0;
  clear_has_seat_limit();
}
inline ::google::protobuf::int32 EvtGameOver::seat_limit() const {
  return seat_limit_;
}
inline void EvtGameOver::set_seat_limit(::google::protobuf::int32 value) {
  set_has_seat_limit();
  seat_limit_ = value;
}

// optional int32 win_type = 9;
inline bool EvtGameOver::has_win_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EvtGameOver::set_has_win_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EvtGameOver::clear_has_win_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EvtGameOver::clear_win_type() {
  win_type_ = 0;
  clear_has_win_type();
}
inline ::google::protobuf::int32 EvtGameOver::win_type() const {
  return win_type_;
}
inline void EvtGameOver::set_win_type(::google::protobuf::int32 value) {
  set_has_win_type();
  win_type_ = value;
}

// optional .ExtraDeskTypeInfo extra_type = 10;
inline bool EvtGameOver::has_extra_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EvtGameOver::set_has_extra_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EvtGameOver::clear_has_extra_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EvtGameOver::clear_extra_type() {
  if (extra_type_ != NULL) extra_type_->::ExtraDeskTypeInfo::Clear();
  clear_has_extra_type();
}
inline const ::ExtraDeskTypeInfo& EvtGameOver::extra_type() const {
  return extra_type_ != NULL ? *extra_type_ : *default_instance_->extra_type_;
}
inline ::ExtraDeskTypeInfo* EvtGameOver::mutable_extra_type() {
  set_has_extra_type();
  if (extra_type_ == NULL) extra_type_ = new ::ExtraDeskTypeInfo;
  return extra_type_;
}
inline ::ExtraDeskTypeInfo* EvtGameOver::release_extra_type() {
  clear_has_extra_type();
  ::ExtraDeskTypeInfo* temp = extra_type_;
  extra_type_ = NULL;
  return temp;
}
inline void EvtGameOver::set_allocated_extra_type(::ExtraDeskTypeInfo* extra_type) {
  delete extra_type_;
  extra_type_ = extra_type;
  if (extra_type) {
    set_has_extra_type();
  } else {
    clear_has_extra_type();
  }
}

// optional bool last_round = 11;
inline bool EvtGameOver::has_last_round() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EvtGameOver::set_has_last_round() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EvtGameOver::clear_has_last_round() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EvtGameOver::clear_last_round() {
  last_round_ = false;
  clear_has_last_round();
}
inline bool EvtGameOver::last_round() const {
  return last_round_;
}
inline void EvtGameOver::set_last_round(bool value) {
  set_has_last_round();
  last_round_ = value;
}

// optional int32 over_time = 12;
inline bool EvtGameOver::has_over_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EvtGameOver::set_has_over_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EvtGameOver::clear_has_over_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EvtGameOver::clear_over_time() {
  over_time_ = 0;
  clear_has_over_time();
}
inline ::google::protobuf::int32 EvtGameOver::over_time() const {
  return over_time_;
}
inline void EvtGameOver::set_over_time(::google::protobuf::int32 value) {
  set_has_over_time();
  over_time_ = value;
}

// optional int32 over_reason = 13;
inline bool EvtGameOver::has_over_reason() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EvtGameOver::set_has_over_reason() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EvtGameOver::clear_has_over_reason() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EvtGameOver::clear_over_reason() {
  over_reason_ = 0;
  clear_has_over_reason();
}
inline ::google::protobuf::int32 EvtGameOver::over_reason() const {
  return over_reason_;
}
inline void EvtGameOver::set_over_reason(::google::protobuf::int32 value) {
  set_has_over_reason();
  over_reason_ = value;
}

// -------------------------------------------------------------------

// RecordInfo

// optional int32 uin = 1;
inline bool RecordInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordInfo::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 RecordInfo::uin() const {
  return uin_;
}
inline void RecordInfo::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int32 role = 2;
inline bool RecordInfo::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordInfo::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordInfo::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordInfo::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::google::protobuf::int32 RecordInfo::role() const {
  return role_;
}
inline void RecordInfo::set_role(::google::protobuf::int32 value) {
  set_has_role();
  role_ = value;
}

// optional int64 chips = 3;
inline bool RecordInfo::has_chips() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordInfo::set_has_chips() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordInfo::clear_has_chips() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordInfo::clear_chips() {
  chips_ = GOOGLE_LONGLONG(0);
  clear_has_chips();
}
inline ::google::protobuf::int64 RecordInfo::chips() const {
  return chips_;
}
inline void RecordInfo::set_chips(::google::protobuf::int64 value) {
  set_has_chips();
  chips_ = value;
}

// optional int32 round_win_chips = 4;
inline bool RecordInfo::has_round_win_chips() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecordInfo::set_has_round_win_chips() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecordInfo::clear_has_round_win_chips() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecordInfo::clear_round_win_chips() {
  round_win_chips_ = 0;
  clear_has_round_win_chips();
}
inline ::google::protobuf::int32 RecordInfo::round_win_chips() const {
  return round_win_chips_;
}
inline void RecordInfo::set_round_win_chips(::google::protobuf::int32 value) {
  set_has_round_win_chips();
  round_win_chips_ = value;
}

// optional int32 round_chi_num = 5;
inline bool RecordInfo::has_round_chi_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecordInfo::set_has_round_chi_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecordInfo::clear_has_round_chi_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecordInfo::clear_round_chi_num() {
  round_chi_num_ = 0;
  clear_has_round_chi_num();
}
inline ::google::protobuf::int32 RecordInfo::round_chi_num() const {
  return round_chi_num_;
}
inline void RecordInfo::set_round_chi_num(::google::protobuf::int32 value) {
  set_has_round_chi_num();
  round_chi_num_ = value;
}

// optional int32 round_peng_num = 6;
inline bool RecordInfo::has_round_peng_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecordInfo::set_has_round_peng_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecordInfo::clear_has_round_peng_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecordInfo::clear_round_peng_num() {
  round_peng_num_ = 0;
  clear_has_round_peng_num();
}
inline ::google::protobuf::int32 RecordInfo::round_peng_num() const {
  return round_peng_num_;
}
inline void RecordInfo::set_round_peng_num(::google::protobuf::int32 value) {
  set_has_round_peng_num();
  round_peng_num_ = value;
}

// repeated int32 round_gang_list = 7;
inline int RecordInfo::round_gang_list_size() const {
  return round_gang_list_.size();
}
inline void RecordInfo::clear_round_gang_list() {
  round_gang_list_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::round_gang_list(int index) const {
  return round_gang_list_.Get(index);
}
inline void RecordInfo::set_round_gang_list(int index, ::google::protobuf::int32 value) {
  round_gang_list_.Set(index, value);
}
inline void RecordInfo::add_round_gang_list(::google::protobuf::int32 value) {
  round_gang_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::round_gang_list() const {
  return round_gang_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_round_gang_list() {
  return &round_gang_list_;
}

// repeated int32 round_hu_list = 8;
inline int RecordInfo::round_hu_list_size() const {
  return round_hu_list_.size();
}
inline void RecordInfo::clear_round_hu_list() {
  round_hu_list_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::round_hu_list(int index) const {
  return round_hu_list_.Get(index);
}
inline void RecordInfo::set_round_hu_list(int index, ::google::protobuf::int32 value) {
  round_hu_list_.Set(index, value);
}
inline void RecordInfo::add_round_hu_list(::google::protobuf::int32 value) {
  round_hu_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::round_hu_list() const {
  return round_hu_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_round_hu_list() {
  return &round_hu_list_;
}

// repeated int32 round_win_list = 9;
inline int RecordInfo::round_win_list_size() const {
  return round_win_list_.size();
}
inline void RecordInfo::clear_round_win_list() {
  round_win_list_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::round_win_list(int index) const {
  return round_win_list_.Get(index);
}
inline void RecordInfo::set_round_win_list(int index, ::google::protobuf::int32 value) {
  round_win_list_.Set(index, value);
}
inline void RecordInfo::add_round_win_list(::google::protobuf::int32 value) {
  round_win_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::round_win_list() const {
  return round_win_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_round_win_list() {
  return &round_win_list_;
}

// optional int32 total_chi_num = 10;
inline bool RecordInfo::has_total_chi_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecordInfo::set_has_total_chi_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecordInfo::clear_has_total_chi_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecordInfo::clear_total_chi_num() {
  total_chi_num_ = 0;
  clear_has_total_chi_num();
}
inline ::google::protobuf::int32 RecordInfo::total_chi_num() const {
  return total_chi_num_;
}
inline void RecordInfo::set_total_chi_num(::google::protobuf::int32 value) {
  set_has_total_chi_num();
  total_chi_num_ = value;
}

// optional int32 total_peng_num = 11;
inline bool RecordInfo::has_total_peng_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecordInfo::set_has_total_peng_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecordInfo::clear_has_total_peng_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecordInfo::clear_total_peng_num() {
  total_peng_num_ = 0;
  clear_has_total_peng_num();
}
inline ::google::protobuf::int32 RecordInfo::total_peng_num() const {
  return total_peng_num_;
}
inline void RecordInfo::set_total_peng_num(::google::protobuf::int32 value) {
  set_has_total_peng_num();
  total_peng_num_ = value;
}

// repeated int32 total_gang_list = 12;
inline int RecordInfo::total_gang_list_size() const {
  return total_gang_list_.size();
}
inline void RecordInfo::clear_total_gang_list() {
  total_gang_list_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::total_gang_list(int index) const {
  return total_gang_list_.Get(index);
}
inline void RecordInfo::set_total_gang_list(int index, ::google::protobuf::int32 value) {
  total_gang_list_.Set(index, value);
}
inline void RecordInfo::add_total_gang_list(::google::protobuf::int32 value) {
  total_gang_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::total_gang_list() const {
  return total_gang_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_total_gang_list() {
  return &total_gang_list_;
}

// repeated int32 total_hu_list = 13;
inline int RecordInfo::total_hu_list_size() const {
  return total_hu_list_.size();
}
inline void RecordInfo::clear_total_hu_list() {
  total_hu_list_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::total_hu_list(int index) const {
  return total_hu_list_.Get(index);
}
inline void RecordInfo::set_total_hu_list(int index, ::google::protobuf::int32 value) {
  total_hu_list_.Set(index, value);
}
inline void RecordInfo::add_total_hu_list(::google::protobuf::int32 value) {
  total_hu_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::total_hu_list() const {
  return total_hu_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_total_hu_list() {
  return &total_hu_list_;
}

// repeated int32 total_win_list = 14;
inline int RecordInfo::total_win_list_size() const {
  return total_win_list_.size();
}
inline void RecordInfo::clear_total_win_list() {
  total_win_list_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::total_win_list(int index) const {
  return total_win_list_.Get(index);
}
inline void RecordInfo::set_total_win_list(int index, ::google::protobuf::int32 value) {
  total_win_list_.Set(index, value);
}
inline void RecordInfo::add_total_win_list(::google::protobuf::int32 value) {
  total_win_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::total_win_list() const {
  return total_win_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_total_win_list() {
  return &total_win_list_;
}

// optional int32 piaofen = 15;
inline bool RecordInfo::has_piaofen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RecordInfo::set_has_piaofen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RecordInfo::clear_has_piaofen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RecordInfo::clear_piaofen() {
  piaofen_ = 0;
  clear_has_piaofen();
}
inline ::google::protobuf::int32 RecordInfo::piaofen() const {
  return piaofen_;
}
inline void RecordInfo::set_piaofen(::google::protobuf::int32 value) {
  set_has_piaofen();
  piaofen_ = value;
}

// optional int32 shanghuo = 16;
inline bool RecordInfo::has_shanghuo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RecordInfo::set_has_shanghuo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RecordInfo::clear_has_shanghuo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RecordInfo::clear_shanghuo() {
  shanghuo_ = 0;
  clear_has_shanghuo();
}
inline ::google::protobuf::int32 RecordInfo::shanghuo() const {
  return shanghuo_;
}
inline void RecordInfo::set_shanghuo(::google::protobuf::int32 value) {
  set_has_shanghuo();
  shanghuo_ = value;
}

// optional int32 bird_num = 17;
inline bool RecordInfo::has_bird_num() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RecordInfo::set_has_bird_num() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RecordInfo::clear_has_bird_num() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RecordInfo::clear_bird_num() {
  bird_num_ = 0;
  clear_has_bird_num();
}
inline ::google::protobuf::int32 RecordInfo::bird_num() const {
  return bird_num_;
}
inline void RecordInfo::set_bird_num(::google::protobuf::int32 value) {
  set_has_bird_num();
  bird_num_ = value;
}

// repeated int32 cards = 18;
inline int RecordInfo::cards_size() const {
  return cards_.size();
}
inline void RecordInfo::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::cards(int index) const {
  return cards_.Get(index);
}
inline void RecordInfo::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void RecordInfo::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_cards() {
  return &cards_;
}

// repeated int32 out_cards = 19;
inline int RecordInfo::out_cards_size() const {
  return out_cards_.size();
}
inline void RecordInfo::clear_out_cards() {
  out_cards_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::out_cards(int index) const {
  return out_cards_.Get(index);
}
inline void RecordInfo::set_out_cards(int index, ::google::protobuf::int32 value) {
  out_cards_.Set(index, value);
}
inline void RecordInfo::add_out_cards(::google::protobuf::int32 value) {
  out_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::out_cards() const {
  return out_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_out_cards() {
  return &out_cards_;
}

// repeated int32 op_list = 20;
inline int RecordInfo::op_list_size() const {
  return op_list_.size();
}
inline void RecordInfo::clear_op_list() {
  op_list_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::op_list(int index) const {
  return op_list_.Get(index);
}
inline void RecordInfo::set_op_list(int index, ::google::protobuf::int32 value) {
  op_list_.Set(index, value);
}
inline void RecordInfo::add_op_list(::google::protobuf::int32 value) {
  op_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::op_list() const {
  return op_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_op_list() {
  return &op_list_;
}

// repeated int32 over_chips_details = 21;
inline int RecordInfo::over_chips_details_size() const {
  return over_chips_details_.size();
}
inline void RecordInfo::clear_over_chips_details() {
  over_chips_details_.Clear();
}
inline ::google::protobuf::int32 RecordInfo::over_chips_details(int index) const {
  return over_chips_details_.Get(index);
}
inline void RecordInfo::set_over_chips_details(int index, ::google::protobuf::int32 value) {
  over_chips_details_.Set(index, value);
}
inline void RecordInfo::add_over_chips_details(::google::protobuf::int32 value) {
  over_chips_details_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RecordInfo::over_chips_details() const {
  return over_chips_details_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RecordInfo::mutable_over_chips_details() {
  return &over_chips_details_;
}

// optional int32 round_win_chips_before = 22;
inline bool RecordInfo::has_round_win_chips_before() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RecordInfo::set_has_round_win_chips_before() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RecordInfo::clear_has_round_win_chips_before() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RecordInfo::clear_round_win_chips_before() {
  round_win_chips_before_ = 0;
  clear_has_round_win_chips_before();
}
inline ::google::protobuf::int32 RecordInfo::round_win_chips_before() const {
  return round_win_chips_before_;
}
inline void RecordInfo::set_round_win_chips_before(::google::protobuf::int32 value) {
  set_has_round_win_chips_before();
  round_win_chips_before_ = value;
}

// optional string nick = 23;
inline bool RecordInfo::has_nick() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RecordInfo::set_has_nick() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RecordInfo::clear_has_nick() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RecordInfo::clear_nick() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& RecordInfo::nick() const {
  return *nick_;
}
inline void RecordInfo::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void RecordInfo::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void RecordInfo::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordInfo::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  return nick_;
}
inline ::std::string* RecordInfo::release_nick() {
  clear_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RecordInfo::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 seatid = 24;
inline bool RecordInfo::has_seatid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RecordInfo::set_has_seatid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RecordInfo::clear_has_seatid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RecordInfo::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 RecordInfo::seatid() const {
  return seatid_;
}
inline void RecordInfo::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 sex = 25;
inline bool RecordInfo::has_sex() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RecordInfo::set_has_sex() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RecordInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RecordInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 RecordInfo::sex() const {
  return sex_;
}
inline void RecordInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string portrait = 26;
inline bool RecordInfo::has_portrait() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RecordInfo::set_has_portrait() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RecordInfo::clear_has_portrait() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RecordInfo::clear_portrait() {
  if (portrait_ != &::google::protobuf::internal::kEmptyString) {
    portrait_->clear();
  }
  clear_has_portrait();
}
inline const ::std::string& RecordInfo::portrait() const {
  return *portrait_;
}
inline void RecordInfo::set_portrait(const ::std::string& value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
}
inline void RecordInfo::set_portrait(const char* value) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(value);
}
inline void RecordInfo::set_portrait(const char* value, size_t size) {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  portrait_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecordInfo::mutable_portrait() {
  set_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    portrait_ = new ::std::string;
  }
  return portrait_;
}
inline ::std::string* RecordInfo::release_portrait() {
  clear_has_portrait();
  if (portrait_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = portrait_;
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RecordInfo::set_allocated_portrait(::std::string* portrait) {
  if (portrait_ != &::google::protobuf::internal::kEmptyString) {
    delete portrait_;
  }
  if (portrait) {
    set_has_portrait();
    portrait_ = portrait;
  } else {
    clear_has_portrait();
    portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PerPlayRecord

// optional string roundid = 1;
inline bool PerPlayRecord::has_roundid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerPlayRecord::set_has_roundid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerPlayRecord::clear_has_roundid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerPlayRecord::clear_roundid() {
  if (roundid_ != &::google::protobuf::internal::kEmptyString) {
    roundid_->clear();
  }
  clear_has_roundid();
}
inline const ::std::string& PerPlayRecord::roundid() const {
  return *roundid_;
}
inline void PerPlayRecord::set_roundid(const ::std::string& value) {
  set_has_roundid();
  if (roundid_ == &::google::protobuf::internal::kEmptyString) {
    roundid_ = new ::std::string;
  }
  roundid_->assign(value);
}
inline void PerPlayRecord::set_roundid(const char* value) {
  set_has_roundid();
  if (roundid_ == &::google::protobuf::internal::kEmptyString) {
    roundid_ = new ::std::string;
  }
  roundid_->assign(value);
}
inline void PerPlayRecord::set_roundid(const char* value, size_t size) {
  set_has_roundid();
  if (roundid_ == &::google::protobuf::internal::kEmptyString) {
    roundid_ = new ::std::string;
  }
  roundid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PerPlayRecord::mutable_roundid() {
  set_has_roundid();
  if (roundid_ == &::google::protobuf::internal::kEmptyString) {
    roundid_ = new ::std::string;
  }
  return roundid_;
}
inline ::std::string* PerPlayRecord::release_roundid() {
  clear_has_roundid();
  if (roundid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roundid_;
    roundid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PerPlayRecord::set_allocated_roundid(::std::string* roundid) {
  if (roundid_ != &::google::protobuf::internal::kEmptyString) {
    delete roundid_;
  }
  if (roundid) {
    set_has_roundid();
    roundid_ = roundid;
  } else {
    clear_has_roundid();
    roundid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .RecordInfo result = 2;
inline int PerPlayRecord::result_size() const {
  return result_.size();
}
inline void PerPlayRecord::clear_result() {
  result_.Clear();
}
inline const ::RecordInfo& PerPlayRecord::result(int index) const {
  return result_.Get(index);
}
inline ::RecordInfo* PerPlayRecord::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::RecordInfo* PerPlayRecord::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RecordInfo >&
PerPlayRecord::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::RecordInfo >*
PerPlayRecord::mutable_result() {
  return &result_;
}

// optional int32 deskid = 3;
inline bool PerPlayRecord::has_deskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerPlayRecord::set_has_deskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerPlayRecord::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerPlayRecord::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 PerPlayRecord::deskid() const {
  return deskid_;
}
inline void PerPlayRecord::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
}

// optional int32 game_round = 4;
inline bool PerPlayRecord::has_game_round() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerPlayRecord::set_has_game_round() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerPlayRecord::clear_has_game_round() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerPlayRecord::clear_game_round() {
  game_round_ = 0;
  clear_has_game_round();
}
inline ::google::protobuf::int32 PerPlayRecord::game_round() const {
  return game_round_;
}
inline void PerPlayRecord::set_game_round(::google::protobuf::int32 value) {
  set_has_game_round();
  game_round_ = value;
}

// optional int32 desk_round = 6;
inline bool PerPlayRecord::has_desk_round() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerPlayRecord::set_has_desk_round() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PerPlayRecord::clear_has_desk_round() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PerPlayRecord::clear_desk_round() {
  desk_round_ = 0;
  clear_has_desk_round();
}
inline ::google::protobuf::int32 PerPlayRecord::desk_round() const {
  return desk_round_;
}
inline void PerPlayRecord::set_desk_round(::google::protobuf::int32 value) {
  set_has_desk_round();
  desk_round_ = value;
}

// repeated int32 bird_card = 7 [packed = true];
inline int PerPlayRecord::bird_card_size() const {
  return bird_card_.size();
}
inline void PerPlayRecord::clear_bird_card() {
  bird_card_.Clear();
}
inline ::google::protobuf::int32 PerPlayRecord::bird_card(int index) const {
  return bird_card_.Get(index);
}
inline void PerPlayRecord::set_bird_card(int index, ::google::protobuf::int32 value) {
  bird_card_.Set(index, value);
}
inline void PerPlayRecord::add_bird_card(::google::protobuf::int32 value) {
  bird_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PerPlayRecord::bird_card() const {
  return bird_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PerPlayRecord::mutable_bird_card() {
  return &bird_card_;
}

// optional int32 type = 8;
inline bool PerPlayRecord::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerPlayRecord::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PerPlayRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PerPlayRecord::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PerPlayRecord::type() const {
  return type_;
}
inline void PerPlayRecord::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 seat_limit = 9;
inline bool PerPlayRecord::has_seat_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PerPlayRecord::set_has_seat_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PerPlayRecord::clear_has_seat_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PerPlayRecord::clear_seat_limit() {
  seat_limit_ = 0;
  clear_has_seat_limit();
}
inline ::google::protobuf::int32 PerPlayRecord::seat_limit() const {
  return seat_limit_;
}
inline void PerPlayRecord::set_seat_limit(::google::protobuf::int32 value) {
  set_has_seat_limit();
  seat_limit_ = value;
}

// optional int32 win_type = 10;
inline bool PerPlayRecord::has_win_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PerPlayRecord::set_has_win_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PerPlayRecord::clear_has_win_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PerPlayRecord::clear_win_type() {
  win_type_ = 0;
  clear_has_win_type();
}
inline ::google::protobuf::int32 PerPlayRecord::win_type() const {
  return win_type_;
}
inline void PerPlayRecord::set_win_type(::google::protobuf::int32 value) {
  set_has_win_type();
  win_type_ = value;
}

// optional .ExtraDeskTypeInfo extra_type = 11;
inline bool PerPlayRecord::has_extra_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PerPlayRecord::set_has_extra_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PerPlayRecord::clear_has_extra_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PerPlayRecord::clear_extra_type() {
  if (extra_type_ != NULL) extra_type_->::ExtraDeskTypeInfo::Clear();
  clear_has_extra_type();
}
inline const ::ExtraDeskTypeInfo& PerPlayRecord::extra_type() const {
  return extra_type_ != NULL ? *extra_type_ : *default_instance_->extra_type_;
}
inline ::ExtraDeskTypeInfo* PerPlayRecord::mutable_extra_type() {
  set_has_extra_type();
  if (extra_type_ == NULL) extra_type_ = new ::ExtraDeskTypeInfo;
  return extra_type_;
}
inline ::ExtraDeskTypeInfo* PerPlayRecord::release_extra_type() {
  clear_has_extra_type();
  ::ExtraDeskTypeInfo* temp = extra_type_;
  extra_type_ = NULL;
  return temp;
}
inline void PerPlayRecord::set_allocated_extra_type(::ExtraDeskTypeInfo* extra_type) {
  delete extra_type_;
  extra_type_ = extra_type;
  if (extra_type) {
    set_has_extra_type();
  } else {
    clear_has_extra_type();
  }
}

// optional int32 over_time = 12;
inline bool PerPlayRecord::has_over_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PerPlayRecord::set_has_over_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PerPlayRecord::clear_has_over_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PerPlayRecord::clear_over_time() {
  over_time_ = 0;
  clear_has_over_time();
}
inline ::google::protobuf::int32 PerPlayRecord::over_time() const {
  return over_time_;
}
inline void PerPlayRecord::set_over_time(::google::protobuf::int32 value) {
  set_has_over_time();
  over_time_ = value;
}

// optional int32 master_uin = 13;
inline bool PerPlayRecord::has_master_uin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PerPlayRecord::set_has_master_uin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PerPlayRecord::clear_has_master_uin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PerPlayRecord::clear_master_uin() {
  master_uin_ = 0;
  clear_has_master_uin();
}
inline ::google::protobuf::int32 PerPlayRecord::master_uin() const {
  return master_uin_;
}
inline void PerPlayRecord::set_master_uin(::google::protobuf::int32 value) {
  set_has_master_uin();
  master_uin_ = value;
}

// repeated int32 winners = 14 [packed = true];
inline int PerPlayRecord::winners_size() const {
  return winners_.size();
}
inline void PerPlayRecord::clear_winners() {
  winners_.Clear();
}
inline ::google::protobuf::int32 PerPlayRecord::winners(int index) const {
  return winners_.Get(index);
}
inline void PerPlayRecord::set_winners(int index, ::google::protobuf::int32 value) {
  winners_.Set(index, value);
}
inline void PerPlayRecord::add_winners(::google::protobuf::int32 value) {
  winners_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PerPlayRecord::winners() const {
  return winners_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PerPlayRecord::mutable_winners() {
  return &winners_;
}

// -------------------------------------------------------------------

// MyPlayRecordListReq

// -------------------------------------------------------------------

// MyPlayRecordListRsp

// repeated .PerPlayRecord record_list = 1;
inline int MyPlayRecordListRsp::record_list_size() const {
  return record_list_.size();
}
inline void MyPlayRecordListRsp::clear_record_list() {
  record_list_.Clear();
}
inline const ::PerPlayRecord& MyPlayRecordListRsp::record_list(int index) const {
  return record_list_.Get(index);
}
inline ::PerPlayRecord* MyPlayRecordListRsp::mutable_record_list(int index) {
  return record_list_.Mutable(index);
}
inline ::PerPlayRecord* MyPlayRecordListRsp::add_record_list() {
  return record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PerPlayRecord >&
MyPlayRecordListRsp::record_list() const {
  return record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PerPlayRecord >*
MyPlayRecordListRsp::mutable_record_list() {
  return &record_list_;
}

// optional int32 ret = 2;
inline bool MyPlayRecordListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyPlayRecordListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyPlayRecordListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyPlayRecordListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 MyPlayRecordListRsp::ret() const {
  return ret_;
}
inline void MyPlayRecordListRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// RoundPlayRecordsReq

// optional string round_id = 1;
inline bool RoundPlayRecordsReq::has_round_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoundPlayRecordsReq::set_has_round_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoundPlayRecordsReq::clear_has_round_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoundPlayRecordsReq::clear_round_id() {
  if (round_id_ != &::google::protobuf::internal::kEmptyString) {
    round_id_->clear();
  }
  clear_has_round_id();
}
inline const ::std::string& RoundPlayRecordsReq::round_id() const {
  return *round_id_;
}
inline void RoundPlayRecordsReq::set_round_id(const ::std::string& value) {
  set_has_round_id();
  if (round_id_ == &::google::protobuf::internal::kEmptyString) {
    round_id_ = new ::std::string;
  }
  round_id_->assign(value);
}
inline void RoundPlayRecordsReq::set_round_id(const char* value) {
  set_has_round_id();
  if (round_id_ == &::google::protobuf::internal::kEmptyString) {
    round_id_ = new ::std::string;
  }
  round_id_->assign(value);
}
inline void RoundPlayRecordsReq::set_round_id(const char* value, size_t size) {
  set_has_round_id();
  if (round_id_ == &::google::protobuf::internal::kEmptyString) {
    round_id_ = new ::std::string;
  }
  round_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoundPlayRecordsReq::mutable_round_id() {
  set_has_round_id();
  if (round_id_ == &::google::protobuf::internal::kEmptyString) {
    round_id_ = new ::std::string;
  }
  return round_id_;
}
inline ::std::string* RoundPlayRecordsReq::release_round_id() {
  clear_has_round_id();
  if (round_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = round_id_;
    round_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoundPlayRecordsReq::set_allocated_round_id(::std::string* round_id) {
  if (round_id_ != &::google::protobuf::internal::kEmptyString) {
    delete round_id_;
  }
  if (round_id) {
    set_has_round_id();
    round_id_ = round_id;
  } else {
    clear_has_round_id();
    round_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 game_round_index = 2;
inline bool RoundPlayRecordsReq::has_game_round_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundPlayRecordsReq::set_has_game_round_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoundPlayRecordsReq::clear_has_game_round_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoundPlayRecordsReq::clear_game_round_index() {
  game_round_index_ = 0;
  clear_has_game_round_index();
}
inline ::google::protobuf::int32 RoundPlayRecordsReq::game_round_index() const {
  return game_round_index_;
}
inline void RoundPlayRecordsReq::set_game_round_index(::google::protobuf::int32 value) {
  set_has_game_round_index();
  game_round_index_ = value;
}

// -------------------------------------------------------------------

// RoundPlayRecordsRsp

// repeated .PerPlayRecord record_list = 1;
inline int RoundPlayRecordsRsp::record_list_size() const {
  return record_list_.size();
}
inline void RoundPlayRecordsRsp::clear_record_list() {
  record_list_.Clear();
}
inline const ::PerPlayRecord& RoundPlayRecordsRsp::record_list(int index) const {
  return record_list_.Get(index);
}
inline ::PerPlayRecord* RoundPlayRecordsRsp::mutable_record_list(int index) {
  return record_list_.Mutable(index);
}
inline ::PerPlayRecord* RoundPlayRecordsRsp::add_record_list() {
  return record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PerPlayRecord >&
RoundPlayRecordsRsp::record_list() const {
  return record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PerPlayRecord >*
RoundPlayRecordsRsp::mutable_record_list() {
  return &record_list_;
}

// optional int32 ret = 2;
inline bool RoundPlayRecordsRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoundPlayRecordsRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoundPlayRecordsRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoundPlayRecordsRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RoundPlayRecordsRsp::ret() const {
  return ret_;
}
inline void RoundPlayRecordsRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// DeskChatReq

// optional string content = 1;
inline bool DeskChatReq::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeskChatReq::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeskChatReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeskChatReq::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DeskChatReq::content() const {
  return *content_;
}
inline void DeskChatReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DeskChatReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DeskChatReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeskChatReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* DeskChatReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeskChatReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type = 2;
inline bool DeskChatReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeskChatReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeskChatReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeskChatReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 DeskChatReq::type() const {
  return type_;
}
inline void DeskChatReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 index = 3;
inline bool DeskChatReq::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeskChatReq::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeskChatReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeskChatReq::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 DeskChatReq::index() const {
  return index_;
}
inline void DeskChatReq::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// DeskChatEvt

// optional int32 ret = 1;
inline bool DeskChatEvt::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeskChatEvt::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeskChatEvt::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeskChatEvt::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 DeskChatEvt::ret() const {
  return ret_;
}
inline void DeskChatEvt::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 op_uin = 2;
inline bool DeskChatEvt::has_op_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeskChatEvt::set_has_op_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeskChatEvt::clear_has_op_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeskChatEvt::clear_op_uin() {
  op_uin_ = 0;
  clear_has_op_uin();
}
inline ::google::protobuf::int32 DeskChatEvt::op_uin() const {
  return op_uin_;
}
inline void DeskChatEvt::set_op_uin(::google::protobuf::int32 value) {
  set_has_op_uin();
  op_uin_ = value;
}

// optional bool sex = 3;
inline bool DeskChatEvt::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeskChatEvt::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeskChatEvt::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeskChatEvt::clear_sex() {
  sex_ = false;
  clear_has_sex();
}
inline bool DeskChatEvt::sex() const {
  return sex_;
}
inline void DeskChatEvt::set_sex(bool value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 index = 4;
inline bool DeskChatEvt::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeskChatEvt::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeskChatEvt::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeskChatEvt::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 DeskChatEvt::index() const {
  return index_;
}
inline void DeskChatEvt::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional string content = 5;
inline bool DeskChatEvt::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeskChatEvt::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeskChatEvt::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeskChatEvt::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DeskChatEvt::content() const {
  return *content_;
}
inline void DeskChatEvt::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DeskChatEvt::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void DeskChatEvt::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeskChatEvt::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* DeskChatEvt::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeskChatEvt::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LogOutReq

// -------------------------------------------------------------------

// LogOutRsp

// -------------------------------------------------------------------

// EvtBroadCast

// optional int32 uin = 1;
inline bool EvtBroadCast::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvtBroadCast::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvtBroadCast::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvtBroadCast::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 EvtBroadCast::uin() const {
  return uin_;
}
inline void EvtBroadCast::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional string content = 2;
inline bool EvtBroadCast::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EvtBroadCast::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EvtBroadCast::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EvtBroadCast::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& EvtBroadCast::content() const {
  return *content_;
}
inline void EvtBroadCast::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void EvtBroadCast::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void EvtBroadCast::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EvtBroadCast::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* EvtBroadCast::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EvtBroadCast::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nick = 3;
inline bool EvtBroadCast::has_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EvtBroadCast::set_has_nick() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EvtBroadCast::clear_has_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EvtBroadCast::clear_nick() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& EvtBroadCast::nick() const {
  return *nick_;
}
inline void EvtBroadCast::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void EvtBroadCast::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void EvtBroadCast::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EvtBroadCast::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  return nick_;
}
inline ::std::string* EvtBroadCast::release_nick() {
  clear_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EvtBroadCast::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserCreatePreBill

// optional int32 uin = 1;
inline bool UserCreatePreBill::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserCreatePreBill::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserCreatePreBill::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserCreatePreBill::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 UserCreatePreBill::uin() const {
  return uin_;
}
inline void UserCreatePreBill::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional string name = 2;
inline bool UserCreatePreBill::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserCreatePreBill::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserCreatePreBill::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserCreatePreBill::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserCreatePreBill::name() const {
  return *name_;
}
inline void UserCreatePreBill::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserCreatePreBill::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserCreatePreBill::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserCreatePreBill::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UserCreatePreBill::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserCreatePreBill::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string item_id = 3;
inline bool UserCreatePreBill::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserCreatePreBill::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserCreatePreBill::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserCreatePreBill::clear_item_id() {
  if (item_id_ != &::google::protobuf::internal::kEmptyString) {
    item_id_->clear();
  }
  clear_has_item_id();
}
inline const ::std::string& UserCreatePreBill::item_id() const {
  return *item_id_;
}
inline void UserCreatePreBill::set_item_id(const ::std::string& value) {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  item_id_->assign(value);
}
inline void UserCreatePreBill::set_item_id(const char* value) {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  item_id_->assign(value);
}
inline void UserCreatePreBill::set_item_id(const char* value, size_t size) {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  item_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserCreatePreBill::mutable_item_id() {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  return item_id_;
}
inline ::std::string* UserCreatePreBill::release_item_id() {
  clear_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = item_id_;
    item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserCreatePreBill::set_allocated_item_id(::std::string* item_id) {
  if (item_id_ != &::google::protobuf::internal::kEmptyString) {
    delete item_id_;
  }
  if (item_id) {
    set_has_item_id();
    item_id_ = item_id;
  } else {
    clear_has_item_id();
    item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreateFormalBill

// optional int32 uin = 1;
inline bool CreateFormalBill::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateFormalBill::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateFormalBill::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateFormalBill::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 CreateFormalBill::uin() const {
  return uin_;
}
inline void CreateFormalBill::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// optional string item_id = 2;
inline bool CreateFormalBill::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateFormalBill::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateFormalBill::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateFormalBill::clear_item_id() {
  if (item_id_ != &::google::protobuf::internal::kEmptyString) {
    item_id_->clear();
  }
  clear_has_item_id();
}
inline const ::std::string& CreateFormalBill::item_id() const {
  return *item_id_;
}
inline void CreateFormalBill::set_item_id(const ::std::string& value) {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  item_id_->assign(value);
}
inline void CreateFormalBill::set_item_id(const char* value) {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  item_id_->assign(value);
}
inline void CreateFormalBill::set_item_id(const char* value, size_t size) {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  item_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateFormalBill::mutable_item_id() {
  set_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    item_id_ = new ::std::string;
  }
  return item_id_;
}
inline ::std::string* CreateFormalBill::release_item_id() {
  clear_has_item_id();
  if (item_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = item_id_;
    item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateFormalBill::set_allocated_item_id(::std::string* item_id) {
  if (item_id_ != &::google::protobuf::internal::kEmptyString) {
    delete item_id_;
  }
  if (item_id) {
    set_has_item_id();
    item_id_ = item_id;
  } else {
    clear_has_item_id();
    item_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetInviteUserReq

// optional int32 uin = 1;
inline bool SetInviteUserReq::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetInviteUserReq::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetInviteUserReq::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetInviteUserReq::clear_uin() {
  uin_ = 0;
  clear_has_uin();
}
inline ::google::protobuf::int32 SetInviteUserReq::uin() const {
  return uin_;
}
inline void SetInviteUserReq::set_uin(::google::protobuf::int32 value) {
  set_has_uin();
  uin_ = value;
}

// -------------------------------------------------------------------

// SetInviteUserRsp

// optional int32 ret = 1;
inline bool SetInviteUserRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetInviteUserRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetInviteUserRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetInviteUserRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 SetInviteUserRsp::ret() const {
  return ret_;
}
inline void SetInviteUserRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// HeartBeatReq

// -------------------------------------------------------------------

// HeartBeatRsp

// -------------------------------------------------------------------

// ws_msg

// optional int32 ms_op_int = 1;
inline bool ws_msg::has_ms_op_int() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ws_msg::set_has_ms_op_int() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ws_msg::clear_has_ms_op_int() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ws_msg::clear_ms_op_int() {
  ms_op_int_ = 0;
  clear_has_ms_op_int();
}
inline ::google::protobuf::int32 ws_msg::ms_op_int() const {
  return ms_op_int_;
}
inline void ws_msg::set_ms_op_int(::google::protobuf::int32 value) {
  set_has_ms_op_int();
  ms_op_int_ = value;
}

// -------------------------------------------------------------------

// WsProtoTest

// optional int32 op_int = 1;
inline bool WsProtoTest::has_op_int() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WsProtoTest::set_has_op_int() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WsProtoTest::clear_has_op_int() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WsProtoTest::clear_op_int() {
  op_int_ = 0;
  clear_has_op_int();
}
inline ::google::protobuf::int32 WsProtoTest::op_int() const {
  return op_int_;
}
inline void WsProtoTest::set_op_int(::google::protobuf::int32 value) {
  set_has_op_int();
  op_int_ = value;
}

// repeated int32 re_int = 2 [packed = true];
inline int WsProtoTest::re_int_size() const {
  return re_int_.size();
}
inline void WsProtoTest::clear_re_int() {
  re_int_.Clear();
}
inline ::google::protobuf::int32 WsProtoTest::re_int(int index) const {
  return re_int_.Get(index);
}
inline void WsProtoTest::set_re_int(int index, ::google::protobuf::int32 value) {
  re_int_.Set(index, value);
}
inline void WsProtoTest::add_re_int(::google::protobuf::int32 value) {
  re_int_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WsProtoTest::re_int() const {
  return re_int_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WsProtoTest::mutable_re_int() {
  return &re_int_;
}

// optional string op_str = 3;
inline bool WsProtoTest::has_op_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WsProtoTest::set_has_op_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WsProtoTest::clear_has_op_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WsProtoTest::clear_op_str() {
  if (op_str_ != &::google::protobuf::internal::kEmptyString) {
    op_str_->clear();
  }
  clear_has_op_str();
}
inline const ::std::string& WsProtoTest::op_str() const {
  return *op_str_;
}
inline void WsProtoTest::set_op_str(const ::std::string& value) {
  set_has_op_str();
  if (op_str_ == &::google::protobuf::internal::kEmptyString) {
    op_str_ = new ::std::string;
  }
  op_str_->assign(value);
}
inline void WsProtoTest::set_op_str(const char* value) {
  set_has_op_str();
  if (op_str_ == &::google::protobuf::internal::kEmptyString) {
    op_str_ = new ::std::string;
  }
  op_str_->assign(value);
}
inline void WsProtoTest::set_op_str(const char* value, size_t size) {
  set_has_op_str();
  if (op_str_ == &::google::protobuf::internal::kEmptyString) {
    op_str_ = new ::std::string;
  }
  op_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WsProtoTest::mutable_op_str() {
  set_has_op_str();
  if (op_str_ == &::google::protobuf::internal::kEmptyString) {
    op_str_ = new ::std::string;
  }
  return op_str_;
}
inline ::std::string* WsProtoTest::release_op_str() {
  clear_has_op_str();
  if (op_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = op_str_;
    op_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WsProtoTest::set_allocated_op_str(::std::string* op_str) {
  if (op_str_ != &::google::protobuf::internal::kEmptyString) {
    delete op_str_;
  }
  if (op_str) {
    set_has_op_str();
    op_str_ = op_str;
  } else {
    clear_has_op_str();
    op_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .ws_msg op_msg = 4;
inline bool WsProtoTest::has_op_msg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WsProtoTest::set_has_op_msg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WsProtoTest::clear_has_op_msg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WsProtoTest::clear_op_msg() {
  if (op_msg_ != NULL) op_msg_->::ws_msg::Clear();
  clear_has_op_msg();
}
inline const ::ws_msg& WsProtoTest::op_msg() const {
  return op_msg_ != NULL ? *op_msg_ : *default_instance_->op_msg_;
}
inline ::ws_msg* WsProtoTest::mutable_op_msg() {
  set_has_op_msg();
  if (op_msg_ == NULL) op_msg_ = new ::ws_msg;
  return op_msg_;
}
inline ::ws_msg* WsProtoTest::release_op_msg() {
  clear_has_op_msg();
  ::ws_msg* temp = op_msg_;
  op_msg_ = NULL;
  return temp;
}
inline void WsProtoTest::set_allocated_op_msg(::ws_msg* op_msg) {
  delete op_msg_;
  op_msg_ = op_msg;
  if (op_msg) {
    set_has_op_msg();
  } else {
    clear_has_op_msg();
  }
}

// repeated .ws_msg re_msg = 5;
inline int WsProtoTest::re_msg_size() const {
  return re_msg_.size();
}
inline void WsProtoTest::clear_re_msg() {
  re_msg_.Clear();
}
inline const ::ws_msg& WsProtoTest::re_msg(int index) const {
  return re_msg_.Get(index);
}
inline ::ws_msg* WsProtoTest::mutable_re_msg(int index) {
  return re_msg_.Mutable(index);
}
inline ::ws_msg* WsProtoTest::add_re_msg() {
  return re_msg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ws_msg >&
WsProtoTest::re_msg() const {
  return re_msg_;
}
inline ::google::protobuf::RepeatedPtrField< ::ws_msg >*
WsProtoTest::mutable_re_msg() {
  return &re_msg_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mahjong_2eproto__INCLUDED
